#include "StdAfx.h"
#include "Rendering/Textures/Bitmap.h"
#include "unitsync.h"
#include "Platform/FileSystem.h"

#define NAMEBUF_SIZE 4096

// JNIEXPORT doesn't define default visibility
#ifdef __GNUC__
#pragma visibility(default)
#endif

DLL_EXPORT void __stdcall Message(const char* p_szMessage);
DLL_EXPORT int __stdcall Init(bool isServer, int id);
DLL_EXPORT void __stdcall UnInit();
DLL_EXPORT int __stdcall ProcessUnits(void);
DLL_EXPORT int __stdcall ProcessUnitsNoChecksum(void);
DLL_EXPORT const char * __stdcall GetCurrentList();
DLL_EXPORT void __stdcall AddClient(int id, const char *unitList);
DLL_EXPORT void __stdcall RemoveClient(int id);
DLL_EXPORT const char * __stdcall GetClientDiff(int id);
DLL_EXPORT void __stdcall InstallClientDiff(const char *diff);
DLL_EXPORT int __stdcall GetUnitCount();
DLL_EXPORT const char * __stdcall GetUnitName(int unit);
DLL_EXPORT const char * __stdcall GetFullUnitName(int unit);
DLL_EXPORT int __stdcall IsUnitDisabled(int unit);
DLL_EXPORT int __stdcall IsUnitDisabledByClient(int unit, int clientId);
DLL_EXPORT void __stdcall AddArchive(const char* name);
DLL_EXPORT void __stdcall AddAllArchives(const char* root);
DLL_EXPORT unsigned int __stdcall GetArchiveChecksum(const char* arname);
DLL_EXPORT int __stdcall GetMapCount();
DLL_EXPORT const char* __stdcall GetMapName(int index);
DLL_EXPORT int __stdcall GetMapInfoEx(const char* name, MapInfo* outInfo, int version);
DLL_EXPORT int __stdcall GetMapInfo(const char* name, MapInfo* outInfo);
DLL_EXPORT void* __stdcall GetMinimap(const char* filename, int miplevel);
DLL_EXPORT int __stdcall GetMapArchiveCount(const char* mapName);
DLL_EXPORT const char* __stdcall GetMapArchiveName(int index);
DLL_EXPORT unsigned int __stdcall GetMapChecksum(int index);
DLL_EXPORT int __stdcall GetPrimaryModCount();
DLL_EXPORT const char* __stdcall GetPrimaryModName(int index);
DLL_EXPORT const char* __stdcall GetPrimaryModArchive(int index);
DLL_EXPORT int __stdcall GetPrimaryModArchiveCount(int index);
DLL_EXPORT const char* __stdcall GetPrimaryModArchiveList(int arnr);
DLL_EXPORT int __stdcall GetPrimaryModIndex(const char* name);
DLL_EXPORT unsigned int __stdcall GetPrimaryModChecksum(int index);
DLL_EXPORT int __stdcall GetSideCount();
DLL_EXPORT const char* __stdcall GetSideName(int side);
DLL_EXPORT int __stdcall OpenFileVFS(const char* name);
DLL_EXPORT void __stdcall CloseFileVFS(int handle);
DLL_EXPORT void __stdcall ReadFileVFS(int handle, void* buf, int length);
DLL_EXPORT int __stdcall FileSizeVFS(int handle);
DLL_EXPORT int __stdcall InitFindVFS(const char* pattern);
DLL_EXPORT int __stdcall FindFilesVFS(int handle, char* nameBuf, int size);
DLL_EXPORT int __stdcall OpenArchive(const char* name);
DLL_EXPORT void __stdcall CloseArchive(int archive);
DLL_EXPORT int __stdcall FindFilesArchive(int archive, int cur, char* nameBuf, int* size);
DLL_EXPORT int __stdcall OpenArchiveFile(int archive, const char* name);
DLL_EXPORT int __stdcall ReadArchiveFile(int archive, int handle, void* buffer, int numBytes);
DLL_EXPORT void __stdcall CloseArchiveFile(int archive, int handle);
DLL_EXPORT int __stdcall SizeArchiveFile(int archive, int handle);

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class aflobby_JUnitSync */

#ifndef _Included_aflobby_JUnitSync
#define _Included_aflobby_JUnitSync
#ifdef __cplusplus
extern "C" {
#endif
	/*
	* Class:     aflobby_JUnitSync
	* Method:    Message
	* Signature: (Ljava/lang/String;)V
	*/
	JNIEXPORT void JNICALL Java_aflobby_JUnitSync_Message
		(JNIEnv *env, jclass myobject, jstring  p_szMessage){
			const char* c = env->GetStringUTFChars( p_szMessage,0);
			Message(c);
			env->ReleaseStringUTFChars( p_szMessage,c);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    Init
	* Signature: (ZI)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_Init
		(JNIEnv *env, jclass myobject, jboolean isServer, jint id){
			return Init(isServer,id);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    UnInit
	* Signature: ()V
	*/
	JNIEXPORT void JNICALL Java_aflobby_JUnitSync_UnInit
		(JNIEnv *env, jclass myobject){
			UnInit();
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    ProcessUnits
	* Signature: ()I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_ProcessUnits
		(JNIEnv *env, jclass myobject){
			return ProcessUnits();
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    ProcessUnitsNoChecksum
	* Signature: ()I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_ProcessUnitsNoChecksum
		(JNIEnv *env, jclass myobject){
			return ProcessUnitsNoChecksum();
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetCurrentList
	* Signature: ()Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetCurrentList
		(JNIEnv *env, jclass myobject){
			return env->NewStringUTF(GetCurrentList());
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    AddClient
	* Signature: (ILjava/lang/String;)V
	*/
	JNIEXPORT void JNICALL Java_aflobby_JUnitSync_AddClient
		(JNIEnv *env, jclass myobject, jint id, jstring unitList){
			const char* c = env->GetStringUTFChars(unitList,0);
			AddClient(id,c);
			env->ReleaseStringUTFChars(unitList,c);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    RemoveClient
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_aflobby_JUnitSync_RemoveClient
		(JNIEnv *env, jclass myobject, jint id){
			RemoveClient(id);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetClientDiff
	* Signature: (I)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetClientDiff
		(JNIEnv *env, jclass myobject, jint id){
			return env->NewStringUTF(GetClientDiff(id));
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    InstallClientDiff
	* Signature: (Ljava/lang/String;)V
	*/
	JNIEXPORT void JNICALL Java_aflobby_JUnitSync_InstallClientDiff
		(JNIEnv *env, jclass myobject, jstring diff){
			const char* c = env->GetStringUTFChars(diff,0);
			InstallClientDiff(c);
			env->ReleaseStringUTFChars(diff,c);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetUnitCount
	* Signature: ()I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_GetUnitCount
		(JNIEnv *env, jclass myobject){
			return GetUnitCount();
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetUnitName
	* Signature: (I)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetUnitName
		(JNIEnv *env, jclass myobject, jint unit){
			return env->NewStringUTF(GetUnitName(unit));
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetFullUnitName
	* Signature: (I)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetFullUnitName
		(JNIEnv *env, jclass myobject, jint unit){
			return env->NewStringUTF(GetFullUnitName(unit));
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    IsUnitDisabled
	* Signature: (I)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_IsUnitDisabled
		(JNIEnv *env, jclass myobject, jint unit){
			return IsUnitDisabled(unit);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    IsUnitDisabledByClient
	* Signature: (II)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_IsUnitDisabledByClient
		(JNIEnv *env, jclass myobject, jint unit, jint clientId){
			return IsUnitDisabledByClient(unit,clientId);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    AddArchive
	* Signature: (Ljava/lang/String;)V
	*/
	JNIEXPORT void JNICALL Java_aflobby_JUnitSync_AddArchive
		(JNIEnv *env, jclass myobject, jstring name){
			const char* c = env->GetStringUTFChars(name,0);
			AddArchive(c);
			env->ReleaseStringUTFChars(name,c);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    AddAllArchives
	* Signature: (Ljava/lang/String;)V
	*/
	JNIEXPORT void JNICALL Java_aflobby_JUnitSync_AddAllArchives
		(JNIEnv *env, jclass myobject, jstring root){
			const char* c = env->GetStringUTFChars(root,0);
			AddAllArchives(c);
			env->ReleaseStringUTFChars(root,c);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetArchiveChecksum
	* Signature: (Ljava/lang/String;)I
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetArchiveChecksum
		(JNIEnv *env, jclass myobject, jstring arname){
			const char* a = env->GetStringUTFChars(arname,0);
			char* c = new char[15];
			unsigned int i = GetArchiveChecksum(a);
			sprintf(c,"%u",i);
			env->ReleaseStringUTFChars(arname,a);
			return env->NewStringUTF((const char*)c);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetMapCount
	* Signature: ()I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_GetMapCount
		(JNIEnv *env, jclass myobject){
			signed int i = GetMapCount();
			return i;
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetMapName
	* Signature: (I)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetMapName
		(JNIEnv *env, jclass myobject, jint index){
			return env->NewStringUTF(GetMapName((signed)index));
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetMapArchiveCount
	* Signature: (Ljava/lang/String;)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_GetMapArchiveCount
		(JNIEnv *env, jclass myobject, jstring mapName){
			const char* c = env->GetStringUTFChars(mapName,0);
			int i = GetMapArchiveCount(c);
			env->ReleaseStringUTFChars(mapName,c);
			return i;
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetMapArchiveName
	* Signature: (I)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetMapArchiveName
		(JNIEnv *env, jclass myobject, jint index){
			return env->NewStringUTF(GetMapArchiveName(index));
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetMapChecksum
	* Signature: (I)I
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetMapChecksum
		(JNIEnv *env, jclass myobject, jint index){
			char* c = new char[15];
			unsigned int i = GetMapChecksum(index);
			sprintf(c,"%u",i);
			return env->NewStringUTF((const char*)c);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetPrimaryModCount
	* Signature: ()I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_GetPrimaryModCount
		(JNIEnv *env, jclass myobject){
			return GetPrimaryModCount();
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetPrimaryModName
	* Signature: (I)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetPrimaryModName
		(JNIEnv *env, jclass myobject, jint index){
			const char* c = GetPrimaryModName(index);
			return env->NewStringUTF(c);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetPrimaryModArchive
	* Signature: (I)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetPrimaryModArchive
		(JNIEnv *env, jclass myobject, jint index){
			const char* c = GetPrimaryModArchive(index);
			return env->NewStringUTF(c);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetPrimaryModArchiveCount
	* Signature: (I)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_GetPrimaryModArchiveCount
		(JNIEnv *env, jclass myobject, jint index){
			return GetPrimaryModArchiveCount(index);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetPrimaryModArchiveList
	* Signature: (I)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetPrimaryModArchiveList
		(JNIEnv *env, jclass myobject, jint arnr){
			const char* c = GetPrimaryModArchiveList(arnr);
			return env->NewStringUTF(c);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetPrimaryModIndex
	* Signature: (Ljava/lang/String;)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_GetPrimaryModIndex
		(JNIEnv *env, jclass myobject, jstring name){
			const char* cname = env->GetStringUTFChars(name,0);
			int i = GetPrimaryModIndex(cname);
			env->ReleaseStringUTFChars(name,cname);
			return i;
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetPrimaryModChecksum
	* Signature: (I)I
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetPrimaryModChecksum
		(JNIEnv *env, jclass myobject, jint index){
			char* c = new char[15];
			int i = GetPrimaryModChecksum(index);
			sprintf(c,"%i",i);
			return env->NewStringUTF((const char*)c);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetSideCount
	* Signature: ()I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_GetSideCount
		(JNIEnv *env, jclass myobject){
			return GetSideCount();
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetSideName
	* Signature: (I)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetSideName
		(JNIEnv *env, jclass myobject, jint side){
			return env->NewStringUTF(GetSideName(side));
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    penFileVFS
	* Signature: (Ljava/lang/String;)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_OpenFileVFS
		(JNIEnv *env, jclass myobject, jstring name){
			const char* cname = env->GetStringUTFChars(name,0);
			int i = OpenFileVFS(cname);
			env->ReleaseStringUTFChars(name,cname);
			return i;
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    CloseFileVFS
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_aflobby_JUnitSync_CloseFileVFS
		(JNIEnv *env, jclass myobject, jint handle){
			CloseFileVFS(handle);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    ReadFileVFS
	* Signature: (I)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_ReadFileVFS
		(JNIEnv *env, jclass myobject, jint handle){
			int length = FileSizeVFS(handle);
			unsigned char* buf = new unsigned char[length];
			ReadFileVFS(handle,buf,length);
			return env->NewStringUTF((const char*)buf);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    FileSizeVFS
	* Signature: (I)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_FileSizeVFS
		(JNIEnv *env, jclass myobject, jint handle){
			return FileSizeVFS(handle);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    InitFindVFS
	* Signature: (Ljava/lang/String;)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_InitFindVFS
		(JNIEnv *env, jclass myobject, jstring pattern){
			const char* cpattern = env->GetStringUTFChars(pattern,0);
			int i = InitFindVFS(cpattern);
			env->ReleaseStringUTFChars(pattern,cpattern);
			return i;
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    FindFilesVFS
	* Signature: (ILjava/lang/String;I)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_FindFilesVFS
		(JNIEnv *env, jclass myobject, jint handle, jstring nameBuf, jint size){
			/*const char* cnameBuf = env->GetStringUTFChars(nameBuf,0);
			int i = FindFilesVFS(handle,cnameBuf,size);
			env->ReleaseStringUTFChars(nameBuf,cnameBuf);
			return i;
			*/
			return 0;
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    OpenArchive
	* Signature: (Ljava/lang/String;)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_OpenArchive
		(JNIEnv *env, jclass myobject, jstring name){
			const char* cname = env->GetStringUTFChars(name,0);
			int i =  OpenArchive(cname);
			env->ReleaseStringUTFChars(name,cname);
			return i;
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    CloseArchive
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_aflobby_JUnitSync_CloseArchive
		(JNIEnv *env, jclass myobject, jint archive){
			CloseArchive(archive);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    FindFilesArchive
	* Signature: (IILjava/lang/String;I)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_FindFilesArchive
		(JNIEnv *env, jclass myobject, jint archive, jint cur, jstring nameBuf, jint size){
			/*const char* jnamebuf = env->GetStringUTFChars(nameBuf,0);
			int i = FindFilesArchive(archive,cur,jnamebuf,&size);
			env->ReleaseStringUTFChars(nameBuf,jnamebuf);
			return i;*/
			return 0;
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    OpenArchiveFile
	* Signature: (ILjava/lang/String;)I
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_OpenArchiveFile
		(JNIEnv *env, jclass myobject, jint archive, jstring name){
			const char* file = env->GetStringUTFChars(name,0);
			int i = OpenArchiveFile(archive,file);
			env->ReleaseStringUTFChars(name,file);
			return i;
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    ReadArchiveFile
	* Signature: (II)Ljava/lang/String;
	public static native String ReadArchiveFile(int archive, int handle);
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_ReadArchiveFile
		(JNIEnv *env, jclass myobject, jint archive, jint handle){
			int size = SizeArchiveFile(archive,handle);
			unsigned char* buffer = new unsigned char[size];
			ReadArchiveFile(archive,handle,buffer,size);
			return env->NewStringUTF((const char*)buffer);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    CloseArchiveFile
	* Signature: (II)V
	public static native void CloseArchiveFile(int archive, int handle);
	*/
	JNIEXPORT void JNICALL Java_aflobby_JUnitSync_CloseArchiveFile
		(JNIEnv *env, jclass myobject, jint archive, jint handle){
			CloseArchiveFile(archive,handle);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    SizeArchiveFile
	* Signature: (II)I
	* public static native int  SizeArchiveFile(int archive, int handle);
	*/
	JNIEXPORT jint JNICALL Java_aflobby_JUnitSync_SizeArchiveFile
		(JNIEnv *env, jclass myobject, jint archive, jint handle){
			return SizeArchiveFile(archive,handle);
		}

	/*
	* Class:     aflobby_JUnitSync
	* Method:    GetDataDirs
	* Signature:
	public static native String GetDataDirs(boolean write);
	*/
	JNIEXPORT jstring JNICALL Java_aflobby_JUnitSync_GetDataDirs
		(JNIEnv *env, jclass myobject, jboolean write){
			std::vector<std::string> f;
			std::string s;
			if (write)
				s = FileSystemHandler::GetInstance().GetWriteDir()+",";
			else {
				f = FileSystemHandler::GetInstance().GetDataDirectories();
				if(f.empty() == false){
					for(std::vector<std::string>::iterator i = f.begin(); i != f.end(); ++i){
						s += *i+",";
					}
				}
			}
			/*int size = SizeArchiveFile(archive,handle);
			unsigned char* buffer = new unsigned char[size];
			ReadArchiveFile(archive,handle,buffer,size);*/
			return env->NewStringUTF((const char*)s.c_str());
		}



#define RM	0x0000F800
#define GM  0x000007E0
#define BM  0x0000001F

#define RED_RGB565(x) ((x&RM)>>11)
#define GREEN_RGB565(x) ((x&GM)>>5)
#define BLUE_RGB565(x) (x&BM)
#define PACKRGB(r, g, b) (((r<<11)&RM) | ((g << 5)&GM) | (b&BM) )

	/*
	* Class:     aflobby_JUnitSync
	* Method:    WriteMiniMap
	* Signature: (II)I
	*/
	JNIEXPORT jboolean JNICALL Java_aflobby_JUnitSync_WriteMiniMap
		(JNIEnv *env, jclass myobject, jstring mapfile, jstring imagename, jint miplevel){
			const char *filename = env->GetStringUTFChars(mapfile, 0);
			const char *bitmap_filename = env->GetStringUTFChars(imagename, 0);
			void* minimap = GetMinimap(filename, miplevel);
			if (!minimap){
				env->ReleaseStringUTFChars(mapfile, filename);
				env->ReleaseStringUTFChars(mapfile, bitmap_filename);
				return false;
			}
			int size = 1024 >> miplevel;
			CBitmap bm;
			bm.Alloc(size, size);
			unsigned short *src = (unsigned short*)minimap;
			unsigned char *dst = bm.mem;
			for (int y = 0; y < size; y++) {
				for (int x = 0; x < size; x++){
					dst[0] = RED_RGB565   ((*src)) << 3;
					dst[1] = GREEN_RGB565 ((*src)) << 2;
					dst[2] = BLUE_RGB565  ((*src)) << 3;
					dst[3] = 255;
					++src;
					dst += 4;
				}
			}
			remove(bitmap_filename); //somehow overwriting doesn't work??
			bm.Save(bitmap_filename);
			// check whether the bm.Save succeeded?


			FILE* f = fopen(bitmap_filename, "rb");
			bool success = !!f;
			if (success) {
				fclose(f);
			}
			env->ReleaseStringUTFChars(mapfile, filename);
			env->ReleaseStringUTFChars(mapfile, bitmap_filename);
			return success;
		}

#ifdef __cplusplus
}
#endif
#endif
