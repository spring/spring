# Copyright (C) 2008 Robin Vobruba <hoijui.quaero@gmail.com>

# use ../SConstruct to build spring.
# even if you want to build only subparts of it,
# that are possibly defined in this file.

""" Available targets.
Each target has an equivalent install target. E.g. `NullAI' has
`install-NullAI' and the default target has `install'.

[default]
AIInterfaces
	C
	Java
SkirmishAI
	RAI
	NTAI
	KAI
	KAIK
	AAI
	JCAI
	NullAI
	NullLegacyCppAI
	NullJavaAI
	NullOOJavaAI
"""


Import(['aienv'])

import os, sys
sys.path.append('rts/build/scons')
import filelist

# the next four lines are needed when compiling on windows
# (seems to be a SCons bug)
import SCons.Tool.javac
import SCons.Tool.jar
SCons.Tool.javac.generate(aienv)
SCons.Tool.jar.generate(aienv)


################################################################################
### AIs
################################################################################
# Make a copy of the build environment for the AIs, but remove libraries and add include path.
# TODO: make separate SConstructs for AIs
#aienv = env.Clone()
#aienv = env.Clone(builddir=os.path.join(env['builddir'], 'AI'))
#aienv['LIBS'] = []
aienv.AppendUnique(CPPPATH = ['#rts/ExternalAI'])
aienv.AppendUnique(LINKFLAGS = ['-lstdc++'])
if aienv['platform'] == 'windows':
	aienv.AppendUnique(LINKFLAGS = ['-Wl,--kill-at', '--add-stdcall-alias', '-mno-cygwin'])
#print aienv['CPPDEFINES']

for d in filelist.list_directories(aienv, '../rts', exclude_list=["crashrpt"]):
	aienv.BuildDir(os.path.join(aienv['builddir'], 'Interfaces', d), d)
	#print "d pj: %s" % os.path.join(aienv['builddir'], 'Interfaces', d)
	#print "d: %s" % d
#aienv.BuildDir(os.path.join(aienv['builddir'], 'tools/unitsync'), 'tools/unitsync')

aiinterfaceenv = aienv.Clone()
aiinterfaceenv.AppendUnique(CPPDEFINES = ['BUILDING_AI_INTERFACE'])

aienv.AppendUnique(CPPDEFINES = ['BUILDING_AI'])

skirmishaienv = aienv.Clone()

#groupaienv = aienv.Clone()

# stores shared objects so newer scons versions don't choke with
def create_shared_objects(env, fileList, suffix, additionalCPPDEFINES = []):
	objsList = []
	myEnv = env.Clone()
	myEnv.AppendUnique(CPPDEFINES = additionalCPPDEFINES)
	for f in fileList:
		while isinstance(f, list):
			f = f[0]
		fpath, fbase = os.path.split(f)
#		print "file: %s" % f
#		print "base: %s" % fbase
		fname, fext = fbase.rsplit('.', 1)
		objsList.append(myEnv.SharedObject(os.path.join(fpath, fname + suffix), f))
	return objsList


# retrieves the version of a Skirmish AI from the following file
# {spring_source}/AI/Skirmish/{ai-name}/VERSION
def fetch_ai_version(aiName, subDir = 'Skirmish'):
	version = 'VERSION_UNKNOWN'
	versionFile = os.path.join(subDir, aiName, 'VERSION')
	if os.path.exists(versionFile):
		file = open(versionFile, 'r')
		version = file.readline().strip()
		file.close()
	return version


# appends the version to the end of the AI Interface name
def construct_aiinterface_libName(interfaceName):
	libName = interfaceName + '-' + fetch_ai_version(interfaceName, 'Interfaces')
	return libName


def getLocalShellExecPostfix():
	if sys.platform == 'win32' or sys.platform == 'win64':
		postfix = 'bat'
	else:
		postfix = 'sh'
	return postfix


def createJavaClasspath(path, pathPrefix = ''):
	# helper function to get a list of all subdirectories
	def addJars(jarList, dirname, names):
		# internal function to pass to os.path.walk
		for n in names:
			f = os.path.join(dirname, n)
			if os.path.isfile(f) and os.path.splitext(f)[1] == ".jar":
				jarList.append(os.path.join(pathPrefix, f))

	jarList = []
	os.path.walk(path, addJars, jarList)
	clsPath = path
	for j in jarList:
		clsPath = clsPath + os.pathsep + j
	return clsPath

# installs files plus empty directories recursively, preserving directory structure
def installDataDir(env, dstPath, srcPath, instList):
	if os.path.exists(srcPath):
		files = filelist.list_files_recursive(env, srcPath, exclude_dirs = False, path_relative = True)
		for f in files:
			f_src_file = os.path.join(srcPath, f)
			f_dst_path = os.path.join(dstPath, os.path.split(f)[0])
			f_dst_file = os.path.join(dstPath, f)

			#print ""
			#print "f_dst_file: %s" % f_dst_file
			#print "f_dst_path: %s" % f_dst_path
			#print "f_dst_file: %s" % f_dst_file
			#print "#build/f_src_file: %s" % os.path.join(env['builddir'], f_src_file)

			#print("f_dst_file, isdir exists: %i %i", os.path.isdir(f_src_file), os.path.exists(f_dst_file))
			#print("#build/f_dst_file, isdir exists: %i %i", os.path.isdir(os.path.join(env['builddir'], f_src_file)), os.path.exists(os.path.join(env['builddir'], f_dst_file)))
			if not (os.path.isdir(f_src_file) and (os.path.exists(f_dst_file) or len(os.listdir(f_src_file)) != 0)):
			#if not (os.path.isdir(f_src_file) and os.path.exists(f_dst_file)):
				instList += [env.Install(f_dst_path, f_src_file)]


################################################################################
### Build AI Interface shared objects
################################################################################
install_aiinterfaces_dir = os.path.join(aiinterfaceenv['installprefix'], aiinterfaceenv['datadir'], 'AI', 'Interfaces')
#install_aiinterfaces_dir = os.path.join('Interfaces')

# store shared ai-interface objects so newer scons versions don't choke with
# *** Two environments with different actions were specified for the same target
aiinterfaceobjs_main = create_shared_objects(aiinterfaceenv, filelist.get_shared_AIInterface_source(aiinterfaceenv), '-aiinterface')
aiinterfaceobjs_SharedLib = create_shared_objects(aiinterfaceenv, filelist.get_shared_AIInterface_source_SharedLib(aiinterfaceenv), '-aiinterface')
aiinterfaceobjs_CUtils = create_shared_objects(aiinterfaceenv, filelist.get_shared_Wrapper_source(aiinterfaceenv, 'CUtils'), '-aiinterface')

# Build
aiinterfaces_exclude_list=['build']
aiinterfaces_needSharedLib_list=['C']
aiinterfaces_needStreflop_list=['Java']
aiinterfaces_needCUtils_list=['C', 'Java']

# These two will be filled here and used by Java Skirmish AIs further down
javaInterfaceCP = ''
javaInterfaceJar = ''

for baseName in filelist.list_AIInterfaces(aiinterfaceenv, exclude_list=aiinterfaces_exclude_list):
	aiInterfaceVersion = fetch_ai_version(baseName, 'Interfaces')
	print "Found AI Interface: " + baseName + " " + aiInterfaceVersion
	myEnv = aiinterfaceenv.Clone()
	install_data_interface_dir = os.path.join(install_aiinterfaces_dir, baseName, aiInterfaceVersion)
	instList = []
	objs = []
	objs += aiinterfaceobjs_main
	if baseName in aiinterfaces_needSharedLib_list:
		objs += aiinterfaceobjs_SharedLib
	if baseName in aiinterfaces_needCUtils_list:
		myEnv.AppendUnique(CPPPATH = ['Wrappers'])
		objs += aiinterfaceobjs_CUtils
	if baseName in aiinterfaces_needStreflop_list:
		if myEnv['fpmath'] == 'sse':
			myEnv.AppendUnique(CPPDEFINES=['STREFLOP_SSE'])
		else:
			myEnv.AppendUnique(CPPDEFINES=['STREFLOP_X87'])
		myEnv.AppendUnique(CPPPATH = ['#rts/lib/streflop'])
		myEnv.AppendUnique(LIBS = ['streflop'])
	mySource = objs + filelist.get_AIInterface_source(myEnv, baseName)
	if baseName == 'Java':
		if myEnv['platform'] == 'windows':
			myEnv.AppendUnique(LIBS = ['jvm'])
		# generate class files
		#print "CWD %s" % os.getcwd()
		javaWrapperScript = 'java_generateWrappers.' + getLocalShellExecPostfix()
		javaWrapperScriptPath = os.path.join('AI', 'Interfaces', baseName, 'bin')
		if sys.platform == 'win32':
			javaWrapperCmd = javaWrapperScript
		else:
			javaWrapperCmd = './' + javaWrapperScript
		javaWrapperBld = myEnv.Builder(action = javaWrapperCmd, chdir = javaWrapperScriptPath)
		myEnv.Append(BUILDERS = {'JavaWrapper' : javaWrapperBld})
		javaSrcGen = myEnv.JavaWrapper(source = mySource)
		Alias(baseName, javaSrcGen)
		Alias('AIInterfaces', javaSrcGen)
		Default(javaSrcGen)
		# compile the Java part
		javaSrc = os.path.join('Interfaces', baseName, 'java/src')
		javaClasses = os.path.join(myEnv['builddir'], 'Interfaces', baseName, aiInterfaceVersion, 'classes')
		#javaJar = os.path.join(myEnv['builddir'], 'Interfaces', baseName, aiInterfaceVersion, 'interface.jar')
		#javaInterfaceJar = javaJar
		javaInterfaceJar = os.path.join('Interfaces', baseName, aiInterfaceVersion, 'AIInterface.jar')
		javaJar = os.path.join(myEnv['builddir'], javaInterfaceJar)
		javaInterfaceJar = os.path.join('build', 'AI', javaInterfaceJar)
		javaInterfaceSrcJar = os.path.join('Interfaces', baseName, aiInterfaceVersion, 'AIInterface-src.jar')
		jlibDir = os.path.join('Interfaces', baseName, 'data', 'jlib')
		javaInterfaceCP = createJavaClasspath(jlibDir, 'AI')
		myEnv['JAVACLASSPATH'] = javaInterfaceCP
		myEnv['JAVASOURCEPATH'] = javaSrc
		myClasses = myEnv.Java(target = javaClasses, source = javaSrc)
		myEnv['JARCHDIR'] = [javaClasses]
		myJar = myEnv.Jar(target = javaJar, source = myClasses)
		Alias(baseName, myJar)
		Alias('AIInterfaces', myJar)
		Default(myJar)
		instList += [myEnv.Install(install_data_interface_dir, myJar)]
		#installDataDir(myEnv, install_data_interface_dir, jlibDir, instList)

	#targetName = baseName + '-' + aiInterfaceVersion
	targetName = 'AIInterface'
	lib = myEnv.SharedLibrary(os.path.join(myEnv['builddir'], 'Interfaces', baseName, aiInterfaceVersion, targetName), mySource)
	Alias(baseName, lib)       # Allow e.g. `scons Java' to compile just that specific AI interface.
	Alias('AIInterfaces', lib) # Allow `scons AIInterfaces' to compile all AI interfaces.
	Default(lib)
	instList += [myEnv.Install(install_data_interface_dir, lib)]
	if myEnv['strip']:
		myEnv.AddPostAction(lib, Action([['strip','$TARGET']]))

	# record data files (eg InterfaceInfo.lua or config files) for installation
	source_data_dir = os.path.join('Interfaces', baseName, 'data')
	installDataDir(myEnv, install_data_interface_dir, source_data_dir, instList)

	Alias('install', instList)
	Alias('install-AIInterfaces', instList)
	Alias('install-' + baseName, instList)

################################################################################
### Build Skirmish AI shared objects
################################################################################
#print ""
#print "installprefix: %s" % skirmishaienv['installprefix']
#print "datadir: %s" % skirmishaienv['datadir']
#print "prefix: %s" % skirmishaienv['prefix']
install_skirmishai_dir = os.path.join(skirmishaienv['installprefix'], skirmishaienv['datadir'], 'AI', 'Skirmish')
#print "install_skirmishai_dir.abspath: %s" % SCons.Script.Dir(install_skirmishai_dir).abspath
#install_skirmishai_dir = os.path.join('Skirmish')

# store shared ai objects so newer scons versions don't choke with
# *** Two environments with different actions were specified for the same target
skirmishaiobjs_main = create_shared_objects(skirmishaienv, filelist.get_shared_skirmishAI_source(skirmishaienv), '-skirmishai')
skirmishaiobjs_mainCregged = create_shared_objects(skirmishaienv, filelist.get_shared_skirmishAI_source(skirmishaienv), '-skirmishai_creg', ['USING_CREG'])
skirmishaiobjs_creg = create_shared_objects(skirmishaienv, filelist.get_shared_skirmishAI_source_Creg(skirmishaienv), '-skirmishai_creg', ['USING_CREG'])
skirmishaiobjs_LegacyCpp = create_shared_objects(skirmishaienv, filelist.get_shared_skirmishAI_source_LegacyCpp(skirmishaienv), '-skirmishai')
skirmishaiobjs_LegacyCppCregged = create_shared_objects(skirmishaienv, filelist.get_shared_skirmishAI_source_LegacyCpp(skirmishaienv), '-skirmishai_creg', ['USING_CREG'])

# Build
skirmishai_exclude_list=['build', 'CSAI', 'TestABICAI', 'AbicWrappersTestAI']
# for some strange reason, NTai has a compile error
# when compiling with MinGW on windows, because of
# a class in the Legacy C++ wrapper, which is used
# by all other legacy C++ AIs aswell
if sys.platform == 'win32':
	skirmishai_exclude_list += ['NTai']
skirmishai_isLegacyCpp_list=['AAI', 'KAIK', 'RAI', 'NullLegacyCppAI', 'KAI', 'NTai']
skirmishai_needCreg_list=['KAIK', 'KAI']
skirmishai_needBoost_list=['NTai']
skirmishai_isJava_list=['NullJavaAI', 'NullOOJavaAI']
for baseName in filelist.list_skirmishAIs(skirmishaienv, exclude_list=skirmishai_exclude_list):
	aiVersion = fetch_ai_version(baseName, 'Skirmish')
	print "Found Skirmish AI: " + baseName + " " + aiVersion
	isLegacyCpp = baseName in skirmishai_isLegacyCpp_list
	useCreg = baseName in skirmishai_needCreg_list
	useBoost = baseName in skirmishai_needBoost_list
	isJava = baseName in skirmishai_isJava_list
	myEnv = skirmishaienv.Clone()
	install_data_ai_dir = os.path.join(install_skirmishai_dir, baseName, aiVersion)
	instList = []

	# create the library
	if isJava:
		javaSrc = os.path.join('Skirmish', baseName)
		javaClasses = os.path.join(myEnv['builddir'], 'Skirmish', baseName, aiVersion, 'classes')
		javaJar = os.path.join(myEnv['builddir'], 'Skirmish', baseName, aiVersion, 'SkirmishAI.jar')
		jlibDir = os.path.join('Skirmish', baseName, 'data', 'jlib')
		aiCP = createJavaClasspath(jlibDir, 'AI')
		aiFullCP = aiCP + os.pathsep + javaInterfaceJar + os.pathsep + javaInterfaceCP
		myEnv['JAVACLASSPATH'] = aiFullCP
		myEnv['JAVASOURCEPATH'] = javaSrc
		myClasses = myEnv.Java(target = javaClasses, source = javaSrc)
		myEnv['JARCHDIR'] = [javaClasses]
		myJar = myEnv.Jar(target = javaJar, source = myClasses)
		Alias(baseName, myJar)
		Alias('SkirmishAI', myJar)
		Default(myJar)
		instList += [myEnv.Install(install_data_ai_dir, myJar)]
		#installDataDir(myEnv, install_data_ai_dir, jlibDir, instList)

	else:
		#if useBoost:
		#	# This code is stolen from config.py
		#	boost_thread = ['boost_thread']
		#	boost_regex  = ['boost_regex']
		#	if myEnv.Dictionary('CC').find('gcc') != -1: gcc = True
		#	else: gcc = False
		#	for boost in (boost_thread, boost_regex):
		#		l = boost[0]
		#		if gcc: boost = [l+'-gcc-mt', l+'-mt', l+'-gcc', l]
		#		else:   boost = [l+'-mt', l]
		#		myEnv.AppendUnique(LIBS = boost)
		#	#myEnv.AppendUnique(LIBS = boost_regex.libraries)
		if useCreg:
			myEnv.AppendUnique(CPPDEFINES = ['USING_CREG'])
		objs = []
		if useCreg:
			objs += skirmishaiobjs_mainCregged
			objs += skirmishaiobjs_creg
		else:
			objs += skirmishaiobjs_main
		if isLegacyCpp:
			myEnv.AppendUnique(CPPPATH = ['Wrappers'])
			if useCreg:
				objs += skirmishaiobjs_LegacyCppCregged
			else:
				objs += skirmishaiobjs_LegacyCpp
		mySource = objs + filelist.get_skirmishAI_source(myEnv, baseName)
		#targetName = baseName + '-' + aiVersion
		targetName = 'SkirmishAI'
		lib = myEnv.SharedLibrary(os.path.join(myEnv['builddir'], 'AI/Skirmish', baseName, aiVersion, targetName), mySource)
		Alias(baseName, lib)     # Allow e.g. `scons JCAI' to compile just a skirmish AI.
		Alias('SkirmishAI', lib) # Allow `scons SkirmishAI' to compile all skirmishAIs.
		Default(lib)
		instList += [myEnv.Install(install_data_ai_dir, lib)]
		if myEnv['strip']:
			myEnv.AddPostAction(lib, Action([['strip','$TARGET']]))

	# record data files (eg AIInfo.lua or config files) for installation
	source_data_dir = os.path.join('Skirmish', baseName, 'data')
	installDataDir(myEnv, install_data_ai_dir, source_data_dir, instList)

	# install everything from this AI
	Alias('install', instList)
	Alias('install-SkirmishAI', instList)
	Alias('install-' + baseName, instList)

