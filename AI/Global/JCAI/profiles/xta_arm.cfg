//-------------------------------------------------------------------------
// JCAI version 0.21
//
// A skirmish AI for the TA Spring engine.
// Copyright Jelmer Cnossen
// 
// Released under GPL license: see LICENSE.html for more information.
//-------------------------------------------------------------------------
/*
This is the XTA arm configuration,
see the XTA core config (xta_core*.cfg) for more detailed info about config fields
*/

// the "build speed" used here is calculated from the actual build speed, the move speed, and the health
BuildSpeedPerMetalIncome = 0.05

//------------------------------------------------------------------------------------------
// Recon handler config 
//------------------------------------------------------------------------------------------
ReconInfo =
{
	UpdateInterval = 6 // Can be used to set frequency of recon updates, to reduce CPU use.
	MaxForce = 5

	Scouts = buildoptions
	{
		armpeep*2 armfig
	}

	SearchHeuristic =
	{
		// Higher score is better
		TimeFactor = 0.015
		DistanceFactor = -2
		ThreatFactor = -0.5
		SpreadFactor = 200
	}
}

//------------------------------------------------------------------------------------------
// Support handler config 
//------------------------------------------------------------------------------------------
// The support handler can be used to create tasks for things like defenses or radar
SupportInfo =
{

	groups = {
		llt = { 
			units=buildoptions{armllt} 
			minmetal = 4
		}
		
		hlt = {
			units=buildoptions { armhlt corrl*2 corrad }
			minmetal = 8
		}
	}
}

//------------------------------------------------------------------------------------------
// Resource unit handler config 
//------------------------------------------------------------------------------------------
ResourceInfo =
{
	// These factors determine the calculation of the 'cost' divisor in the energy production heuristic
	// It's used to decide which energy producer to build (fusion/wind/solar)
	EnergyBuildHeuristic =
	{
		// TODO: Fix this,it's unbalanced
		BuildTime = 0
		MetalCost = 1
		EnergyCost = 0

		// New energy making units have to fulfill this condition:
		// 1.0f + (UnitEnergyProduction / CurrentTotalEnergyProduction) < MaxUpscale
		// This makes sure the AI doesn't think "Hey, let's build a fusion right away!"
		MaxUpscale = 2
	}

	// This applies to both metal makers and metal extractors
	MetalBuildHeuristic =
	{
		/* score calculation:
		Threat value for metal makers build spots is assumed to be 0, since they can be placed anywhere
		
		PaybackTime = (MetalCost + MetalSpotThreatValue * ThreatConversionFactor) / MetalMake
		score = PaybackTimeFactor * PaybackTime + 
				(ResourceUnitUsage) * EnergyFactor
			*/
		PaybackTimeFactor = -10
		EnergyUsageFactor = -100
		ThreatConversionFactor = 1
		PrefUpscale = 2
		UpscaleOvershootFactor = -50
	}
	// To optimize building the beginning of the base - this has to be a buildoptions node
	InitialBuildOrders = buildoptions
	{
		armsolar*2 armmex*2
	}

	MetalExtracters =
	{
		armmex
		armmoho
	}

	MetalMakers =
	{
		armmakr
		armmmkr
	}

	EnergyMakers = 
	{
		armmfus
		armwin
		armsolar
		armckfus
		armfus
	}

	EnablePolicy =
	{
		MinUnitEnergyUsage=60
		MinEnergy=0.1
		MaxEnergy=0.85 // it's best to keep this below Storage.MaxRatio
	}

	Storage =
	{
		MetalStorage = armmstor 
		EnergyStorage = armestor 
		MaxRatio = 0.9 // The resource handler will build storage when Resource > ResourceStorage * MaxRatio
		MinMetalIncome = 4 // minimum metal income before it builds storage
		MinEnergyIncome = 80

		// These maximums define the point where no more storage is build (so resources are spilled)
		// They have to be multiplied by the energy income to get the real maximum:
		// Max = Income * MaxStorageFactor
		MaxEnergyStorageFactor = 500
		MaxMetalStorageFactor = 1000
	}
}

//------------------------------------------------------------------------------------------
// Force handler config 
//------------------------------------------------------------------------------------------
ForceInfo = 
{
	DefaultSpread = 600

	RushForce = 
	{
		task = attackdefend
		// the units fields always has to be a buildoptions value
		units= buildoptions { armflash }
		batchsize=6
		category=2
		level=1
		minmetal=6
	}

	BasicForce1 = 
	{
		task = attackdefend
		// the units fields always has to be a buildoptions value
		units= buildoptions { armflash *2 armstump*3 }
		batchsize=4
		category=2
		level=2
		minmetal=10
	}

	KbotForce1 =
	{
		task = attackdefend
		units = buildoptions { armpw*2 armham*2 armjeth armrock }
		batchsize=12
		category=3
		level=1
		minmetal=13
	}

	AdvForce1 =
	{
		task=attackdefend
		units = buildoptions { armbull*5 armlatnk*5 }
		batchsize=10
		category=2
		level=10
		minmetal=24
	}
}

