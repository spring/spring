Spring change log

0.81.1.3:
Engine:
 - Fixed automatically assigning start position if none is chosen
 - Fixed bug in DXT5 loading (caused artifacts with teamcolors)
 - Fixed F1 heightmap view
 - Fixed playing of demos created in a game in which Spring crashed
 - Made spectator drawings white instead of random team color
 - Disable recording demos from demos (default, DemoFromDemo in springrc to enable)
 - Added a mechanism to register/unregister for messages that are normally not broadcasted to game server

AIs:
- E323AI 3.14.5:
  * support for: partial watermaps (plays land only), group merging,
    auto kbot/vehicle lab selection, template configs
  * XTA & BA config improvements
  * Better lab assisting
- KAIK: do not build MExes on spots used by allies


0.81.1:
Engine / Simulation:
 - Terrain types and water damage are now taken into account for pathing checksum
   (Fixes desyncs on maps with map options which modify terrain types or water damage)
 - Changed builder patrol/fight behaviour for Hold Pos and Maneuver movestates
 - Being-built units are now visible on radar by default

Engine / Rendering, UI:
 - Added speed display
 - Improved basic player list
 - If OpenGL 1.4 is not available, an error is shown
 - Fixed being-built unit rendering
 - Placing buildings close together works again
 - Fixed canceling of first build item when buildiconsfirst is toggled

Engine / Lua:
 - Less strict type checking in VFS.DirList (fixes FBI2Lua converter)

Engine / System:
 - Map options fixed
 - Menu doesn't crash anymore if no mods/maps found


0.81.0:
Engine / Simulation:
 - Builders are now smart enough to to reclaim features that block their
   buildsite, which weren't there when they started moving to it
 - Fixed issues with features with 0 metal and 0 energy
 - Fixed crashes / desyncs when using area orders with a large radius 
 - Hold position doesn't imply "don't turn" anymore, and units with small
   firing arcs in general behave a lot better in this case.
 - Units on hold position now don't get confused by nearby invalid targets 
 - Smooth ground mesh for better aircraft behaviour (unit tag: useSmoothMesh)
 - Wind fixed to stay in between map boundaries
 - Momentum isn't conserved anymore in unit-unit collisions
 - Impulses decay every frame instead of every slow update
 - Kamikaze units now do a visibility and 3d distance check
 - Fixed ships were able to 'climb' cliffs
 - Fixed multiple issues with pathmap updates after terraforms

Engine / Rendering, UI:
 - Changed default binds of forcestart, singlestep, debug to Alt+f, Alt+o, Alt+b
 - Non-reclaimable features show up as red squares now when placing a building
 - Out-of-LOS features don't show up anymore when placing a building
 - Fixed icons not rendering properly when distance-to-ground method was used 
 - Better mipmap handling on SMF maps
 - Fixed specular lighting calculation on SM3 maps 
 - Fixed "/shadows" command on SM3 maps
 - Fixed SM3 map holes
 - Fixed "/wiremap 0|1" (argument was inversed)
 - Lots of other drawing fixes
 - Far-textures fixed
 - Load-screens preserve aspect ratio
 - Added checks for insufficent gfx cards
 - Added new shadow rendering option ("/shadows 2"): it disables terrain rendering
   in the shadow pass, which gives a huge performance increase
 - Changed BumpWaterReflection values:
   0 = disable; 1 = enable (no terrain); 2 = enable (with terrain - was '1' before)
 - Fixed occasional hang when word wrapping text
 - S3O transparency is now supported even with AdvUnitShading disabled

Engine / Lua:
 - Added AllowFeatureBuildStep call-in to included gadget handler
 - Fixed typos in certain featuredefs.lua, weapondefs.lua that mutilated error messages
 - Spring.Rehost fixed on Win32 when spaces in install path
 - Added support for modifying CTAAirMoveType (gunships)
 - Add GetUnitMoveTypeData(unitID) call-in, returns a table
 - Fixed Spring.SetFeatureDirection

Engine / System:
 - Fixed incorrect startpositions in skirmish games
 - Proper handling of mod dependencies
 - MAN pages support (Linux)
 - Support for external debug symbols (Linux)
 - Fixed an issue with using the root of a drive as data directory
 - Use less memory when reading from 7z archives
 - Improved handling of spectators in case of sim slowdown and desync

AIs:
 - E323AI: CPU performance improvements & bug fixes
 - KAIK: better D-Gun handling


0.80.5.2:
Bugfixes:
 - AI: Properly fix Lua AI loading
 - AI: Fix crash when Lua AI team dies
 - AI: Fixed clean target of ant scripts
 - Fixed deadlock in hang detection
 - Fixed .desktop file
 - Fixed crash on startup on Ubuntu Karmic
 - Fixed reflections
 - MT: Don't crash if draw callins access features
 - Fixed fading features for ATI (atiHacks)
 - Fixed crash when parsing certain chatmessage from autohost
 - Fixed crash if OSC stats sender is enabled and no network is reachable
 - cmake: Fixed 7-zip detection

Changes:
 - AI/cmake: Split system dependent/indepentent install parts (AI_LIBS_DIR, AI_DATA_DIR)
 - AI: Debugging is now enabled by default in the ant scripts
 - Time profiler cleanup, both code and UI
 - Show an AI's shortName + version + nick in tooltips


0.80.5.1:
Bugfixes:
 - fix a bug where empty network packets were spammed (eating bandwith and demo space)
 - fix a possible desync in the pathfinder
 - fix mouse jumping in windowed mode (windows)
 - fixed crash in KAIK


0.80.5:
Bugfixes:
 - lots of bugs in the AI interface fixed
 - fix some network-related problems and improve behaviour under worse conditions
 - large performance increase for units on patrol
 - fix some performance problems with the new heatmap pathfinder
 - fixed a crash which could occur after an AirBase was destroyed

Gui:
 - joystick support
 - some bugs resolved which could lead to crashes when using ogg samples or music
 - properly handle dds textures
 - fix some mouse-jumping in windows

Sim:
 - lua unit scripts major rework
 - some sources of desync fixed

Misc:
 - fix some compiling problems related to boost 1.40
 - some fixes for OS X


0.80.4.2:
Bugfixes:
 - fix crash when doing lots of mapdrawing (#1632)
 - fix crash when loading certain cursornormal files
 - fix drawing of ghosted buildings
 - properly initialise SDL timer for dedicated server
 - fixed GatherWait cursor
 - don't send resign-command when already spectating
 - fix units with vlaunch missiles (#1647)
 - Spring compiles boost 1.40


0.80.4.1:
Bugfixes:
 - Fix missing tree fog, misc fog fixes
 - fix crash in AI pathing
 - fix crashes in the Java AI interface
 - added VFS.MapArchive
 - fix possible crash on exit
 - fix crash when loading certain ogg-files


0.80.4.0:
Bugfixes:
 - don't reclaim dragonteeth with area-reclaim
 - lua unit script framework respects script tag


0.80.3.0:
Bugfixes:
 - fix direct control unit movement (forwards and backwards)
 - don't spam empty directories everywhere
 - fix BA crash when doom was installed
 - fix desync in pathfinder
 - fix music timing
 - single units should move in straight lines again
 - fix shadows on features
 - fix LocalModelPiece::GetPiecePosIter,GetPos,GetEmitDirPos
 - fix vertical text aligning of multiple GUI controls
 - fix jumping in middle click scrolling (windows)
 - massive speedup in Spring.GetVisibleUnits
 - added changed font vertical alignment opchars in gl.Text & luaFonts
 - fix wreckages sinking in the ground
 - add a modinfo featureLOS.featureVisibility tag
 - fix BumpWater shorewaves
 - make /nocost reversible

Lua:
 - add snapToGround bool param to SetFeaturePosition (default true)
 - add SetFeatureAlwaysVisible (analog to SetUnitAlwaysVisible)
 - added changed font vertical alignment opchars in gl.Text & luaFonts (baseline renamed to 'd'->'x', and use 'd' for descender)
 - unit script: added GetPieceTranslation, GetPieceRotation, GetPiecePosDir
 - unit script: SetSpeed/SetDirection/Go changes (see commit
 b49928454225f19f5c439c908c0a8cad775fb7ed)
 - unit script: removed Create (framework handles it)
 - 


0.80.2.0:
Bugfixes:
 - fix creation of DDS textures
 - Unbreak transports when loadingRadius <= some magic number
 
Lua:
 - fix Zlib-compression and decompression for lua
 - Added VFS.SubDirs(dir, pattern, modes) callout to LuaParser
 - added some more map water configs to Game. table


0.80.1.0:
Bugfixes:
 - don't write spring-files where they don't belong
 - some rendering fixes (ATI errors, bumpwater)
 - IPs of players not broadcasted
 - area reclaim doesn't know of features not in los anymore
 - slightly better paralyzeDamage handling
 - fixed several issues with ArchiveMover - it now moves files to
   My Documents\My Games\Spring and should be more reliable


0.80.0.0:
Engine / Simulation:
 - units can now move backwards
 - notable speed improvement of feature handling (unit wrecks, tress...)
 - LuaCOB: make it possible to make units with Lua instead of bos/cob
 - some fixes for sm3 map-format
 - pathfinding improvements for close groups of units
 - reclaim / ressurection now correctly exported to LuaAI
 - make better use of SSE functions for speed improvements
 - now compatible with Boost 1.34 again (was 1.35 for spring 0.79) 

Engine / GUI, System:
 - IPv6 support for all parts of the engine
 - caching for 7z archives: speed improvements at high compression levels (solid archives now usable)
 - rudimentary menu when starting spring executable directly
 - BumpWater got a major speed increase, and shorewaves look better
 - various improvements for the sound system (multithreading, fixes for music, ogg-effects...)

AIs:
 - Added /aikill and /aicontrol commands (only works in singleplayer in this version)
 - AIs won't crash the game anymore on startup
 - some AIs play better now (especially KAIK)
 - a lot of minor bugs

Dedicated Server:
 - ingame stats exported to the autohost on game end
 - always print IPs of players, even if connection fails
 - allow password-protecting client slots to prevent name spoofing (needs lobby support)


0.79.1.1:
Bugfixes:
 - fix microlags and increased CPU usage for dedicated server
 - fix the game ending when playign with AIs
 - various AI-interface and AI-related fixes
 - fallback to Lua for unhandled actions
 - fixed exploit where spectator could make Team 0 resign
 - fix certain soundeffects

0.79.1:
Bugfixes:
 - fix crash when a direct-controlled unit dies
 - fix watching of demos
 - various AI-related fixes
 - SetUnitShieldState fixed
 - fix an infinite memory allocation loop on startup
 - restore acceptable framerate on vey old cards

0.79:
Major stuff:
 - rewritten AI interface in C
 - new font renderer
 - sound system and music overhaul
 -> 2292 files changed, 149700 insertions, 290245 deletions

0.78.2.1:
Bugfixes:
 - fix for game refusing to speed up after a slowdown
 - set MaxSpeed to 20 on (test)singleplayer
 - fix insta-gameover vs. AIs
 - fixed the server to run away from the local player on high gamespeeds


0.78.2:
General bugfixes:
 - fix crash on gamestart with lots of players
 - should fix most of the desyncs

Engine:
 - fix startscript not written in demo header
 - units trying to stay in LOS of a target account for mip levels
 - fix the no-commander-for-side-Arm problem for local games not based on TA content
 - cob: made modelpiece mapping case-insensitive
 - initialize relPos in EmitSfx
 - fix for a fix in GetEmitDirPos
 - fix aircraft not flying back to repair pads when all are reserved
 - planes that are being refuelled aren't able to fire anymore
 - clamp map position in unitLoader.
 - players who didn't choose a start position start in their ally box
 - fixed short command line params on windows (mantis #1271)
 - don't try to kill dead teams
 - add gamemode 3 (no game over) and make it the default in non-AI non-script.txt games
 - removed luabind + lua-startscripts
 - fixed multithreaded pathing
 - removed partial match test for piece mapping
 - fixed emitsfx crash (Mantis: #1252,#1238 & #1242)
 - stunned planes shouldn't keep repair pads reserved
 - always apply a miniscule amount of impulse when a unit is damaged

User Interface:
 - fixed AltTab bug on gpus w/o FBO support
 - EndGameBox shouldn't render stats if the game hasn't started
 - changed minimap_startbox.lua to not show cones in top left (#1272)
 - StartPosSelector now unloads itself when game is started without sending start positions.
 - fixed refraction=2, disabled endless ocean for maps that don't show any water at the start of the game
 - fix #1258 (FBO crash on exit with non-FBO gpus)

Lua:
 - gl.Texture() can now load the textures of s3o features, syntax is gl.Texture('%'..(Game.maxUnits+featureDefID)..(':0' or ':1'))
 - added a new (unsynced) callout Spring.SetWaterParams, it needs cheating enabled and allows you to edit the mapwater settings ingame
 - fix Luamsg if null-characters where inside
 - add an GetUnitTransformMatrix unsynced callout (handy for shadow algs)

Installer:
 - add RAI to installer
 - allow the user to close TASClient / downloader during install


0.78.1.1:
 - fix Features (wrecks, rocks) not beeing drawn with reflective units

0.78.1:
(notice the new version number scheme, its MAJOR (0.78) - MINOR (1))
Crashes:
 - fix crash on window resizing
 - more groundDecal fixes
 - do not force useFPShadows to true unless they are supported (to prevent crashes during map-loading)
 - fix UDP buffer overrun

Engine:
 - use %CSIDL_LOCAL_APPDATA%/springsettings.cfg (e.g. \Users\<user_name>\AppData\Local\) to store settings instead of registry
 - use SSE instead of X87 for FP-calculations
 - if in Choose ingame startposition mode its possible to play a map with more players than startpositions
 - fix the aircraft hovering / drifting
 - fix random start positions not being random
 - fix area-attack for aircraft (#1144 again)
 - GenerateTargets no longer has much information that the team requesting targets doesn't have
 - fix spikes / lags in hosting demos
 - don't allow gunships to drift off the map
 - make planes bobble in place gently by default, and make hoverfactor work as intended
 - fix unit reply sound
 - don't open a (unused) network socket in single player mode
 - Don't let static beamlasers overshoot
 - Added new collision volume types: sphere, footprint.
 - Units/features with no collision volume defined get 'footprint' type by default now, this restores the 0.76b1 behaviour as default
 - Gave COB function BlockShotX a third parameter, userTarget, uses the engine's hasUserTarget value, that seems to reflect when unit has an attack order
 - fix teamstats in demofile
 - don't fail with "network unreachable" instantly, but wait until timeout or connection fix

Spring start / script.txt changes:
 - added Game/MyPlayerName (MyPlayerNum is now deprecated and will be removed sometimes)
 - send the gamesetup to each client once they join the server
 - Player / Team / Mod - options are not needed anymore for clients, they are transfered from the server once ingame

User Interface:
 - Argh's ground-decal shader shadow tweak
 - enable startboxes by default
 - decreased CPU load and increase drawing speed lines
 - fix small memleak when resizing the window
 - The protection ring shows up for non-stockpile interceptors
 - fix detection of units under mouse for spectators
 - fix the CTeam statistics tracking
 - do not force useFPShadows to true unless they are supported (to prevent crashes during map-loading)
 - fix for annoying flickering of the grounddetail texture in CA if some LUPS fx were visible
 - fixed a bug with waterplane on centerrock (the terrain is deeper than the water plane was drawn)
 - made forcestart a real shortcut, so you can unbind it
 - don't draw the terrain if curMaxHeight<0 and voidwater
 - fix long commandline options for linux build
 - dynamic sky rednerspeed improvements

Lua:
 - added Spring.GetLastMessagePositions() (returns the 10 last message positions)
 - moved Spring.GetDrawSelectionInfo() LuaUnsyncedCtrl -> LuaUnsyncedRead
 - moved Spring.GetSoundStreamTime() LuaUnsyncedCtrl -> LuaUnsyncedRead
 - added a 2nd return value to Spring.GetSoundStreamTime() (total sound stream length in seconds)
 - Made it possible to specify start positions in map with LUA .smd file
 - Immobile Builders doesn't put factories on patrol and doesn't give a stop order

Unitsync:
 - Don't crash/abort() on invalid handles, but throw exception instead
 - Fix crash bug in unitsync when UnInit/Init was called after an earlier Init which returned error code
 - Doesn't leak exceptions anymore over C interface.
 - Doesn't just crash by design anymore after something goes wrong.
 - Added API GetNextError, can be used to get error queue (currently limited to 1 error)
 - added SetSpringConfigFile(char*): reinitialise config handler to use the provided path
 - added char* GetSpringConfigFile(): return the currently used path to the config file

 - Deprecated APIs:
   - GetCurrentList
   - AddClient
   - RemoveClient
   - GetClientDiff
   - InstallClientDiff
   - IsUnitDisabled
   - IsUnitDisabledByClient
 - Removed all code supporting those functions.
 - These deprecated functions pop up MessageBox once on windows to nag lobby devs.
 - Use engine's logOutput, still writes to unitsync.log (overwrites, doesn't append)
 - ProcessUnitsNoChecksum is now identical to ProcessUnits.
 - ProcessUnits now returns 0 immediately (but should still be called in loop until it returns 0, in case it's changed sometime later)

Installer:
 - Fix groups.ini being overwritten by installer
 - removed all maps and mods from the installer

AAI v0.875	
- Current amount of land/water within the base is taken into account when selecting factories (e.g. don't order water factories on a land map anymore)
- Improved AAIs behaviour on water maps with start positions on islands/land masses
- Improved metal extractor construction algorithm (spots closer to available builder, faster algorithm, works better if there are land and sea spots available at the same time)
- Continent file version bumped to 0.87
- Fixed a crash on shut down

0.77b5
Installer:
 - check if common unitsync users are running, abort installation if any is found
 - don't download and install RiverDale and SmallDivide when the user already has it

Crashes:
 - even more preventions of DIV0

User Interface:
 - whe watching a demo with a setup locally, overwrite maxspeed with 10
 - fix mousehover detection for radar icons
 - fixed performance of Lua fontHandler
 - make the orbit-controller actually do something on win32
 - make the orbit-controller speeds configurable
 - rescale fonts on window resize so they don't look ugly
 - fixed black border blending of fonts
 - ATI drivers lie about not supporting extensions required by shadows. we ignore that extension now

Engine:
 - new fbi tag: bankingAllowed - only affects hoverAttack=1 units; controls if the aircraft can bank.
 - fbi tag upright now affects gunships
 - fix CAirMoveType using an uninitialized variable (maxSpeed)
 - fix Aircraft fuel not working properly on units with multiple weapons
 - fix SendLuaMsg
 - improve heading table resolution, this makes huge units less jerky
 - fix the gamespeed not going back up after it was slowed down
 - when ArchiveCache has not been written yet, do not add archive dependencies that are already in the chain (was breaking demos)
 - fix factories switching their yardmap to fully-blocked when a unit is present inside (so units don't getstuck inside)
 - fixed map defined detailtex
 - fix LUA Spring.GetTeamResources does not return "received" for one player on each team

Unitsync / Lobby interface:
 - engine now loads many start script options from GAME\ModOptions\ section in start script, instead of just GAME\
 - added EngineOptions.lua to springcontent.sdz, this contains the default engine options for backward compatibility
 - GetModOptions unitsync call parses both EngineOptions.lua and ModOptions.lua, and returns combined list of options

Random:
 - lots of fixes to CMake and dedicated server (already released)
 - minor KAIK stability fixes


0.77b4:
Crashes:
 - fixed a crash (on exit) in colormap.cpp
 - fixed another division /0
 - fix crashes on "/take"
 - fix crash when loading units into transporters

User Interface:
 - fix tabulator toggling overview mode
 - reduce the maxBreaking-is-zero message spam
 - fix far textures showing up as gray rectangles
 - the error message "no writable directories found" now has a windows version too
 - Fix explosion spheres appearing at wrong position
 - fix attackorder for radar dots

 Engine:
 - fix attacking gaia units
 - fix the collision detection for dgun (and other noExplode) projectiles
 - Made gunships (and possibly other units too) point their noses at the midPos of their target instead of the pos, the old behaviour could cause trouble with units where midPos and pos differ much.
 - added crashDrag tag (float, default 0.005) to fighter/bomber planes, when the plane is crashing it uses this drag instead of the automatically calculated drag it uses when flying. The calculated drag is no longer used when crashing, even if no crashDrag tag is present in the unit fbi
 - fix (AirMoveType) aircraft refueling
 - fix gameend detected not propperly
 - gameslowdown triggers at higher CPU usage and is limited to half the userspeed

0.77b3:
User Interface
 - added a simple Orbit-Camera controller
       META-key + LMB + drag ==> alter elevation, rotation
       META-key + MMB + drag ==> pan up/down/left/right
       META-key + RMB + drag ==> zoom
 - fix transports not killing their transportees when they should
 - update installer shortcuts
 - when kicking a player, kick only the player and don't disconnect everyone
 - fix invalid command spam
 - fix some divisions through 0
 - fix crash for all players when someone gives away all his units



0.77b1, 0.77b2

User Interface:
 - all commands are prefixed with '/' instead of '.' (".cheat" becomes "/cheat", etc.)
 - Added /mapmarks [0|1]
 - Added /allmapmarks [0|1]
 - Added /forcestart command
 - Added /ally teamID [0|1] (Ingame alliances)
 - Added /commands (shows all registered commands in the console)
 - whisper private messages to any other player ingame (excluding spectators) by typing "/w Playername Your secret message"
 - Added new camera controller: SmoothCamera
   behaves like overview controller, but feels much smoother
 - Added possibility to specify files that should be excluded from Spring's
   archive checksumming routines ('springignore.txt').
 - Added commandline resolution change:
   ./spring -xresolution 800 -yresolution 600
 - Added /unitreplyvolume [0.0-1.0]
 - Added /hardwarecursor [0|1]
 - Added /minimap drawprojectiles [0|1]
   (you can turn off drawing of projectiles on the minimap now)
 - Added /grounddecals [0|1]
 - Added /movewarnings [0|1]
 - Added /globalLOS [0|1] (needs cheats on)
 - Added the /luamoduictrl [0|1] command. Enables LuaRules/LuaGaia access
   to many LuaUI callins/functions.
 - Added ground rendering detail factors:
   GroundLODScaleReflection
   GroundLODScaleUnitReflection
   (GroundLODScaleRefraction unused atm)
 - Added TextureLODBias to settings (global mipmapping bias)
 - Added CompressTextures to settings (it compress textures on runtime)
 - Added UsePBO to settings (enables PixelBufferObject usage for smf texture loading)
 - Added CamModeName as an alternate for CamMode
   (should still be backwards compatible for settings programs)
 - Added SPRING_DATADIR variable on linux
 - Added option "AtiHacks" to settings. This fixes an issue with severe
   display corruption during building, on ati drivers, where multiple
   colored lines criss-cross the screen. It also fixes issues with the
   new texture mipmap generation.
 - You can now cycle through the last 10 message positions with F3.

Spring Engine:
 - multithreaded avi-generator
 - new water renderer: bumpwater ("/water 4"), pretty and fast 
 - the usual speedups and performance improvements
 - Font rendering system overhaul 
 - Functionality of Sensors.tdf and Particles.tdf moved to modrules. removed Sensors.tdf or Particles.tdf
   Transfers resources.tdf to resources.lua, and resources_map.tdf to resources_map.lua.
   Sidedata.tdf -> sidedata.lua
   icontypes.lua
   changed SideData 'commander' tag to 'startUnit'
   Replaced 'messages.tdf' with 'messages.lua'
   modinfo.tdf --> modinfo.lua
   ArchiveCacheV6.txt --> ArchiveCacheV7.lua
 - Add 'springcontent.sdz' as the last dependency for all primary mod archives
 - Custom collision volumes for Units and Features
 - you can ally / unally other teams ingame using the "/ally [teamnumber] [0|1]" command (needs to be activated in lobby)
 - Made the groundplate decals follow their parent building's facing.
 - Allow modnames (e.g. "OTA Content") in dependX tag (modinfo).
 - Removed 50% capture progress after an unit got captured.
 - Made units transfer their speed to their wrecks.
 - submarines can now travel directly underneath surface vessels and floating obstacles
   (and conversely; ships can move across underwater objects), EDIT your mod's MoveInfo
   entries so that the classes used by submarine-style units have "subMarine=1;" set if
   you want to enable this fully
 - Increased weapon limit per unit to 32.
 - Added the following new tags to modrules.{lua,tdf}
   - repair.energyCostFactor
   - capture.energyCostFactor
   - resurrect.energyCostFactor
   - reclaim.unitEnergyCostFactor
   - reclaim.featureEnergyCostFactor
   - reclaim.unitMethod
   - reclaim.unitEfficiency
   - reclaim.allowEnemies
   - reclaim.allowAllies
 - Allow any key binding to a CMDTYPE_ICON command to use the 'queued' keyword
   (except for build and stockpile commands, which already have special handling)
 - Keep units in various situations from deciding to attack units they 
   shouldn't (noChaseCatagory, neutral, under water without water weapons).
   

Units & Weapons:
 - Added canFireControl unitdef tag.
 - Fixed the stop-turn-move-stop-turn behavior for ground units (new udef tag, turnInPlace) 
 - Added maxRepairSpeed tag for builders. Limits the rate a con swarm of any
   size can repair a single target.
 - Made accuracy, sprayangle and similar tags work for starburst missiles.
   The inaccuracy is applied when the missile turns toward its target.
 - Added capturable tag.
 - Implemented 'y' value for yardmaps which means this square is not blocked.
 - Have fighting, patrolling and guarding aircraft and guarding ground units
   follow noChaseCatagory.
 - Added per-weapon highTrajectory tag (int, default 2). It acts like the unit
   tag, 0 is always low trajectory, 1 always high and 2 uses the unit's setting
   (whether the unit uses a switch or fixed setting).
 - Added impactOnly weapon tag (bool, default false), if set the weapon does damage
   by colliding with units instead of causing an explosion (the CEG will still run)
   to avoid the shortcomings of small AOEs. It's only implemented for projectile weapons
   so far.
 - Custom collision volumes:
   - collisionVolumeType (either: "ellipsoid","cylT" where 'T' is one of {X, Y, Z}, "box")
   - collisionVolumeScales (float3)
   - collisionVolumeOffsets (float3)
   - collisionVolumeTest (0: per-frame hit detection, 1: raytraced)
   - all these tags are the same for Features
 - Added shieldRechargeDelay weapon tag (float, default 0). The delay is the number
   of seconds the shield won't charge after being hit (kinda like the idle autoheal
   for hitpoints)
 - Added 'sonarStealth' unitDef tag.
 - Added new stockpileTime weapondef tag. It allows seperate reload and stockpile
   times for stockpile weapons.
 - Allow for square metal extraction areas (use the new extractSquare unitdef tag).
 - Added moveState and fixed fireState unitdef tags.
 - Added strafeToAttack tag. Moving sideways when in range but not shooting optional
   behaviour, the behaviour fails if the unit just takes its time for aiming (or
   cannot shoot at all) or has any other reason not to shoot.
 - Added avoidNeutral (targetting) and collideNeutral (projectiles) weapon tags.
 - Added verticalSpeed (float, default: 3.0) unitDef tag  for non-fighter/bomber
   planes to define the speed of takeoff and landing (or loading).
 - Made missiles obey burnblow=1 (existing tag), the missile will explode in midair
   instead of turning away or falling down when its flighttime expires if the tag is set.
 - Added the 'customParams' table to both featureDefs and weaponDefs
   (accessible via the lua FeatureDefs and WeaponDefs' tables).
 - only add ".wav" extension for unitdef sounds if it is missing
 - Made MeleeWeapon obey impulseFactor.

Maps:
 - Maps have their own resource_map.lua/resource_map.tdf now.
 - converted map config scripts to lua format (LuaParser / MapParser)
   - MapOptions.lua is now handed the 'Map' table information as well
     (allows one to write a generic MapOptions.lua file that accesses
     the SMD/SM3 files to retrieve the defaults)
   - the SM3 format is yet to be converted to the lua format
     (but its MapInfo information is)
 - added SMF height overrides in the SMD file, example:
    smf = {
      minheight = -100.0f,
      maxheight =  200.0f,
    }
   (note:  these values can be changed by MapOptions)
 - new water tags (mostly used by the BumpWater renderer):
  - shoreWaves           (true)
  - forceRendering       (false)
  - ambientFactor        (1.0)
  - diffuseFactor        (1.0)
  - specularFactor       (1.0)
  - specularPower        (20.0)
  - diffuseColor         float3(1.0, 1.0, 1.0)
  - specularColor        float3(light.groundSunColor)
  - fresnelMin           (0.2)
  - fresnelMax           (0.8)
  - fresnelPower         (4.0)
  - reflectionDistortion (1.0)
  - blurBase             (2.0)
  - blurExponent         (1.5)
  - perlinStartFreq      (8.0)
  - perlinLacunarity     (3.0)
  - perlinAmplitude      (0.9)
  - foamTexture
  - normalTexture
  - numTiles
  - caustics (texture table)

COB:
 - Added new COB get constants MIN (131), MAX(132) and ABS(133).
 - Added the SONAR_STEALTH (108) COB get/set parameter

LUA changes:
 - Added 'teamcolors.lua' to the installers
 - Renamed 'gui.lua' to 'luaui.lua'
 - Removed LuaCob, and redirected Cob2Lua calls to LuaRules
 - removed the following compatibility defines from luaconf.h
   (can break compability with old lua scripts):
    LUA_COMPAT_GETN
    LUA_COMPAT_VARARG
    LUA_COMPAT_MOD
    LUA_COMPAT_LSTR
    LUA_COMPAT_GFIND
    LUA_COMPAT_OPENLIB
 - Moved most of the LuaUI call-outs into LuaUnsyncedRead
   and LuaUnsyncedCtrl. The LuaUnsyncedCtrl call-outs require
   that the modUICtrl variable be enabled for gadget scripts
   to use them.
 - Moved most of the LuaUI call-ins into LuaCallInHandler and
   LuaHandle. The moved call-ins require that the modUICtrl
   variable be enabled for gadget scripts to receive them.
 - Updated included gadgetHandler
 - Removed unwanted/confusing widgets.
 - fonts.lua can load fonts from the VFS
   (and will create LuaUI/Fonts/ if it does not exist)
 - Removed the unused CommandDesc 'hotkey' member
 - Renamed CommandDescription's  'onlyKey'  to  'hidden'
 - lua scripts now get first crack at all mouse events
 - Treat SDD file sizes as dynamic, so that lua scripts can
   be reloaded while dev'ing without having file size mismatches
   (LuaRules, LuaGaia, mod widgets, etc...)
 - Added some new constants to the lua Game{} table.
 - Added the dynamic HeightMapTexture
  - FLOAT32/LUMINANCE format, NEAREST/NEAREST filtering
  - can be accessed by lua scripts using '$heightmap'
  - can be disable by clients with 'HeightMapTex=0' (config parameter)
 - Added multiple new callins:
   - UnitEnteredWater(unitID, unitDefID, unitTeam)
   - UnitEnteredAir(unitID, unitDefID, unitTeam)
   - UnitLeftWater(unitID, unitDefID, unitTeam)
   - UnitLeftAir(unitID, unitDefID, unitTeam)
   - PlayerChanged(playerID)  (player changed team or spectating state)
   - TeamChanged(teamID)      (team changed allyteam, not useful yet)
   - UnitCommand(unitID, unitDefID, unitTeam, cmdID, cmdOpts, cmdParams) (note that cmdOpts is a number)
   - UnitMoveFailed()
   - MoveCtrlNotify(unitID, unitDefID, unitTeam, data)
     - currently called with data = 1 if the unit hits the ground and stops
     - return true to disable the unit's MoveCtrl
   - ProjectileCreated(projectileID, projectileOwnerID) (arg #2 is -1 if no owner)
   - ProjectileDestroyed(projectileID)
   - GamePreload() (Called at the end of the loading process)
   - GameStart()   (Called when the game is about to start)
   - TerraformComplete(UnitID, UnitDefID, UnitTeam, BuildUnitID, BuildUnitDefID, BuildUnitTeam)
     (it gets called after the terraforming for a construction is complete (once
      per terraforming builder), the return value is whether the con should stop
      building.)
   - DrawGenesis()
     - called immediately following Update()
     - called even when the game window is minimized
     - modelview and projection matrices are identities
     - can be used to update GPU-side physics simulation
     textures and custom per-unit textures
   - a real ViewResize() call-in
 - Added the unicode values to the lua KeyPress() and KeyRelease() call-ins
 - Replaced Spring.GetMouseMiniMapState() with:
    Spring.GetMiniMapGeometry() ->
      posX, posY, sizeX, sizeY, minimized, maximized, <false | "left" | "right">
 - Changed the GetUnitNearestEnemy() lua call-out to:
               GetUnitNearestEnemy(number unitID[, number range[, boolean useLos=true]])
 - Added geometry shader support to LuaOpenGL
 - Added Spring.ValidUnitID(number id)    -> boolean
 - Added Spring.ValidFeatureID(number id) -> boolean
 - Added Spring.GetUnitIsDead()
 - Added Spring.GetModUICtrl()
 - Added Spring.GetViewGeometry()   -> sizeX, sizeY, posX, posY
 - Added Spring.GetWindowGeometry() -> sizeX, sizeY, posX, posY
 - Added Spring.GetScreenGeometry() -> sizeX, sizeY, posX, posY
 - Added Spring.IsAboveMiniMap(x, y) -> boolean
 - Added Spring.GetUnitLastAttacker()
 - Added Spring.GetUnitFuel()
 - Added Spring.SetUnitFuel()
 - Added Spring.GetUnitSensorRadius(unitID, <type>)
 - Added Spring.SetUnitSensorRadius(unitID, <type>, radius)
 - new projectile call-outs:
     Spring.GetProjectilePosition(projectileID) -> px, py, pz
     Spring.GetProjectileVelocity(projectileID) -> vx, vy, vz
     Spring.SetProjectilePosition(projectileID, px, py, pz) -> nil
     Spring.SetProjectileVelocity(projectileID, vx, vy, vz) -> nil
     Spring.SetProjectileDetonate(projectileID) -> nil
 - added the GL evaluator functions to the lua GL interface
   (note the gl.EvalEnable() and gl.EvalDisable() can only be
   called in a gl.Eval(func) block).
 - Added Spring.SetUnitCollisionVolumeData(id, xs, ys, zs, xo, yo, zo, vtype, ptype, paxis)
     and Spring.SetFeatureCollisionVolumeData() (same args)
 - Added Spring.SetLastMessagePosition(x,y,z)
 - Added Spring.SetUnitLosMask(unitID, allyTeamID, number | table) -> nil
     and Spring.SetUnitLosState(unitID, allyTeamID, number | table) -> nil
 - Added Spring.FixedAllies()
 - Reverted the GetPositionLosState() to its original configuration (no air los)
 - Added Spring.IsPosInLos()
 - Added Spring.IsPosInRadar()
 - Added Spring.IsPosInAirLos()
 - Added Spring.PauseSoundStream(), Spring.GetSoundStreamTime(),
         Spring.SetSoundStreamVolume(number)
 - Added burst, burstRate and projectiles to Spring.SetUnitWeaponState
 - Added Spring.AddUnitIcon(string name, string texture
                            [, number size[, number distance[, bool radiusAdjust]]])
         Spring.FreeUnitIcon(string name)
 - Added Spring.SetUnitSonarStealth()
 - Added Spring.SpawnCEG(tag, px, py, pz, dx, dy, dz, rad, dmg) synced callout
 - Added Spring.SetHeightMapFunc(lua_func,arg1,arg2,..),
         Spring.AddHeightMap(x, y, h) -> `final height`
         Spring.SetHeightMap(x, y, h [,t]) -> `absolute value changed`
 - Added Spring.ExtractModArchiveFile(path) callout
   For example, Spring.ExtractModArchiveFile("sounds/boom.wav")
   will create a directory "sounds/" and extract "boom.wav" to it.
 - Added Spring.GetUnitPiecePosDir(unitID, piece) -> posx,posy,posz, dirx,diry,dirz
 - Added Spring.GetUnitVectors(unitID) -> {front_x,front_y,front_z},{up_x,up_y,up_z},{right_x,right_y,right_z}
 - Added Spring.GetUnitWeaponVectors(unitID,weaponNum) -> wpos_x,wpos_y,wpos_z, wdir_x,wdir_y,wdir_z
 - Added gl.ActiveShader(shaderID, function(), ...) (safe way to set shader uniforms in non-drawing code)
 - Added gl.DepthClamp(bool)  (not always available)
 - Added gl.UnsafeState(number, [bool reverse, ] function, ...)
   (glEnable() / glDisable() for unknown states; considered 'unsafe')
 - Added Occlusion Queries:
   - Added gl.CreateQuery() -> query
   - Added gl.DeleteQuery(query)
   - Added gl.RunQuery(query, function, ...)
   - Added gl.GetQuery(query) -> number
 - Added the following unsynced query call-outs:
   - Spring.GetUnitLuaDraw()
   - Spring.GetUnitNoDraw()  
   - Spring.GetUnitNoMinimap()
   - Spring.GetUnitNoSelect()
 - Added the fbo 'readbuffer' parameter
 - Added gl.ReadPixels(x, y, w, h [,format])
 - Added StencilTests:
   NOTES: The engine expects that the stencil buffer be left in a
   state of all 0's when a task has finished with it. This
   is not enforced by the lua backend.
   - Added gl.StencilTest(bool)
   - Added gl.StencilMask(bits)
   - Added gl.StencilFunc(func, ref, mask)
   - Added gl.StencilOp(fail, zfail, zpass)
   - Added gl.StencilMaskSeparate()
   - Added gl.StencilFuncSeparate()
   - Added gl.StencilOpSeparate()
 - Added gl.BlendEquation()
 - Added gl.BlendEquationSeparate()
 - Added gl.BlendFunc()  -- redundant
 - Added gl.BlendFuncSeparate()
 - Added gl.Blending() convenience names:
    name           blend_src    blend_dst             enabled
    "add"          ONE          ONE                   true
    "add_alpha"    SRC_ALPHA    ONE                   true
    "alpha"        SRC_ALPHA    ONE_MINUS_SRC_ALPHA   true
    "reset"        SRC_ALPHA    ONE_MINUS_SRC_ALPHA   true
    "disable"      SRC_ALPHA    ONE_MINUS_SRC_ALPHA   false
    "color"        SRC_COLOR    ONE_MINUS_SRC_COLOR   true
    "modulate"     DST_COLOR    ZERO                  true
 - Added Picking support:
     gl.RenderMode()
     gl.SelectBuffer()
     gl.SelectBufferData()
     gl.InitNames()
     gl.PushName()
     gl.PopName()
     gl.LoadName()
 - Added gl.Texture($shading) & gl.Texture($grass)
 - Allowed to use gl.CopyToTexture with non GL_TEXTURE2D, i.e. GL_TEXTURE_RECTANGLE
 - Modified Spring.GetVisibleUnits() so that the team specifier can
   use the ALL_UNITS, ALLY_UNITS, ENEMY_UNITS, and MY_UNITS values.
 - 'facing' parameters can now use long strings: 'north', 'south', 'east', 'west'
 - Spring.UnitCreated() call-out now accepts unitDef names and unitDef IDs
 - Spring.SendCommands() can use a bunch of string arguments as well as the old
   table format. e.g Spring.SendCommands('echo aoeu', 'info 2', 'specteam 0')
 - Fixed Spring.UnitRendering interface to make it possible to emulate the default 3do/s3o shaders
   - fixed $shadows texture params (you can now use shadow2DProj() in glsl)
   - fixed wrong (!=0) check if uniform locations are set (they begin with 0!)
   - added new uniforms: cameraposloc,shadowloc,shadowparamsloc
   - added new culling tag, so you can enable s3o backface culling w/o using a displaylist
   - auto enable alphatest (+blending in case of cloaked stuff) for luaUnitMaterials
     (alphatest: 0.5 for opaque and 0.1 for cloaked stuff)
 - Fixed missing return;'s in gl.LoadMatrix() and gl.MulMatrix()
 - Fixed WarpMouse() for dual mode (minimap on the left).
 - Fixed the 'frame' table value returned by Spring.GetTeamStatsHistory()
   (and added the 'time' value, which is in seconds).
 - Fixed full-view spectators get all LuaUI  RecvLuaMsg()  messages now.
 - Fixed Spring.SetFeaturePosition().
 - Fixed Spring.SetFeatureDirection().
 - If Spring.SetDrawSky(false) is set, do not draw the sun.
 - Fixed s3o recognition in LuaUnitDefs

AI:
 - Added new ai value AIVAL_SCRIPT returning start script text.
 - Removed ABIC AI stuff that no-one is using.
 - Added AIHCGetUnitDefById, AIHCGetWeaponDefById, AIHCGetFeatureDefById

Unitsync:
 - Added LuaParser API to unitsync.
 - Added OpenArchiveType(name, type) to unitsync
   (type can be "zip", "7z", "dir", or "hpi").
 - Added 'const char* GetSideStartUnit(int side)' to unitsync.
 - Added InitDirListVFS(path, pattern, modes) and
         InitSubDirsVFS(path, pattern, modes)
 - Mod/Map Options : 'section' option type added
 - Mod/Map Options : 'style' option added, syntax not defined yet

Bugfixes:
 - Fixed Aircraft units that can't land not stopping when reaching the final waypoint.
 - Fixed display of times in the EndGameBox (For example 9:07 displayed as 9: 7)
 - Fixed the grey flashing that sometimes happened when making new buildings
 - Prevent decay when the builder or factory is waiting (executing a wait command).
 - Fixed positions occupied by units with a maxspeed of zero (hubs, etc) being considered
   valid build-sites.
 - Fixed division by zero if two units are in the exact same spot and collide.
 - Fixed negative pings
 - Fix a dangling pointer when using ground decals. Could have caused desyncs
   and LuaUI bugs.
 - Fixed possible out of bounds map reads that could cause crashes
 - Fixed /cheat and /skip not working in demo-playback mode
 - Fixed /noSpectatorChat
 - Fixed /fpshud polarity
 - Randomize unitIDs
 - Fixed dds mipmapping filter (was GL_NEAREST_MIPMAP_LINEAR).
 - Fixed dynamic water with geforce 8x00
 - Fixed it so that units using ScriptMoveType can not be pushed
 - Fixed an infinite recursion in the LuaUI layout handler
 - Fixed the Lua SendToUnsynced() stack check bug
 - Fixed ScriptMoveType vs. unit pushing
 - Fixed "cloaked units were invisble underwater" with DynWater
 - Blocked team changes for dead units
 - Fixed beamlaser damage vs shields
 - Fixed smoke textures loading from resource.tdf (resources/graphics/smoke/smoke00 .. smoke11).
 - Fixed clipping issue with units begin built.
 - Don't show two statistic windows after demo watching.
 - Always create/update the perlin texture used by shields and not only if shadows are enabled.
 - Fixed ctrl+c, it searches now for the iscommander tag instead for the commander category.
 - Fixed a wrong rotation in ApplyTransform() (which is used by lua's gl.UnitPieceMultMatrix).
 - Fixed black lines on CEGs when AntiAliasing is enabled.



0.76b1

Installer:
- Add new installer SideBanner, Spring icon and ArchiveMover icon all
  contributed by AF.
- Put springcontent.sdz and bitmaps.sdz in upgrading installer.
- Installer greatly improved - all content is downloaded from the internet based
  on which mods and maps you choose to install.
- No more updating installer because updating and full one would be nearly
  identical (in size and functionality).
- Added the following original content mods to the installer (downloads):
  -Gundam
  -Kernel Panic
  -Evolution
  -Spring: 1944
  -Simbase
- Added springsettings.exe by koshi.
- Added ArchiveMover by zizu. Automatically moves .sdz and .sd7 files to the
  correct place (Spring folder\maps\ or Spring folder\mods\)
- Moved to Satirik's lobby, huge amount of changes.
- Moved shaders into springcontent.sdz
- Replacement Bark, bleaf and foam images.

Spring engine varying changes:
- A lot of networking code was refactored.
- Reintroduced heightMod to TryTarget.
- New aircraft command CMD_IDLEMODE, it switches between landing when idle
  and not landing.
- Cache input and output of GetWantedDir to save a lot of expensive calculations
  for a little loss of accuracy.
- Tiny speedups in LosAdd and SafeLosAdd.
- Optimized unnecessary sqrt in GuiTraceRay.
- Made the replay format better:
  - It has a proper header now with version field instead of the entire file
    being just a data blob.
  - The header has made the gameSetup script.txt modifications redundant: the
    UnixTime and Spring Version are in the header, and the gameSetup script is
    stored unmodified now.
  - It stores a game ID, this can be used to match replays of the same game together.
  - It stores the winning ally team, if any.
  - It stores player stats.
  - It stores team stats.
  - It stores game duration, both in game time and wallclock time.
- Small messages are once again send together in one packet.
- Stop animations when network lags (timeout set to 0.5 sec).
- Added some OGGVorbis sound support.
- Added behavior to mobile units so that they will start chasing when the target
  is running away, but before the target exits weapons range, allowing the unit
  to fire continuously at the retreating unit, instead of the cycles of firing,
  then running to catch up that existed prevously.
- Added client side network traffic tallying (per packet type).
- Lasers no longer use their full texture on shots that hit before their full length.
- Negative damage now allowed.
- Log the version of some of the major libraries (SDL, GL, GLEW, AL) 
- Bump the unit-limit to 10000.

Lobby interface (unitsync, game setup):
- Added new start positions mode Choose Before Game. Useful for AIs, you can
  select the starting position of players from the client.
- Gap removal in GameSetup, players/teams/allyteams can now be given\
  with gaps in the numbering, e.g. PLAYER10 and PLAYER14 in an 1 vs 1.
  Ordering does still matter.
- Unitsync Java bindings now have a version number.
- Checksum is now read from 7z/zip archive header instead of checksumming entire
  file, making things like map list reloading faster by a huge amount.
- Added GetPrimaryModVersion() to unitsync.
- Bumped to ArchiveCache version to 6 ... ArchiveCacheV6.txt
- Applied patch by tc making Spring's configuration variables available through
  unitsync.
- Disabled recursive directory scanning for .sdd and omitted files within
  .../hidden/*  directories from the scan.
- Added the following unitsync calls:
               int GetModValidMapCount()
       const char* GetModValidMapCount(int index)
  - Valid maps are listed in the mod's "ValidMaps.lua" file.
  - A valid map count of 0 means that any map can be used with the mod.
  - This can be used in concert with LuaRules to setup multi-player scenarios
    and tutorials.

AI interface:
- Exposed unit->maxSpeed to the AI interface.
- Added CallLuaRules() to CAICallback.
- Added 'AIDLL=LuaAI:' -> CTeam::luaAI handling for LuaAI.
- Added AI unloading after team is destroyed.
- Allow GlobalAIs to send a startposition.

User Interface:
- Added the CTRL modifier to area reclaims to allow reclaiming your own wrecks 
- Removed some hard-coded key bindings and replaced them with:
    edit_return
    edit_escape
    edit_complete
    edit_backspace
    edit_delete
    edit_home
    edit_end
    edit_prev_line
    edit_next_line
    edit_prev_char
    edit_next_char
    edit_prev_word
    edit_next_word
- Added some reasonable default keybindings for all/ally/spec chat messaging:
            enter -> send to <last send type>
       Ctrl+enter -> send to All
        Alt+enter -> send to Allies
      Shift+enter -> send to Spectators
  (Note that the modifier versions can be used to change the send mode ever
   while typing the message.)
- Added the CTRL modifier to area reclaims for reclaiming all features.
- /specfullview 3 is the new default for spectating and watching demos.
  (can view and select all units)
- Added the ctrlpanel.txt "frontByEnds" option. (let's you use the endpoints to
  define a front instead of the midpoint and one of the ends.)
- When a factory is set on repeat, alt+build-click inserts the order as a
  no-repeat and right after the currently built unit. Behavior is unchanged
  if repeat is off.
- Added water lines while placing unit builds.
- Moved the clock and fps indicators to the upper right hand corner.
  (the default setup results in overlaps with the player info text.)
- Modified the LOS view to better show the los-only and radar-only conditions
    dark  = no los, no radar
    white = los + radar
    blue  = los-only
    green = radar-only
    red   = jammed area
- Disabled shadow generation when using LOS viewmode. (would be better to add
  shadows in LOS mode, but might as well avoid the shadow generation overhead
  until the shadows are added.)
- Make Fight be able to be given a line command, like move already can be.
- Only add the SelectAI button if the current selection has valid GroupAIs.
- Change default keybinding for createvideo to Ctrl+Shift+F10 (was Any+F10),
  so it is less easy to accidentally hit it.
- Change savegame default keybinding from Any+F8 to Ctrl+Shift+F8,
  for the same reason as the createvideo keybind change.
- Improved view centering for the Free Camera mode.
- Made nano-particles unsynced. (and respect maxParticles)
- Added '/cross [size]'.
- Added .godmode [0|1] -- allows all players (even specs) to control all units.
- Added a team parameter to .give: .give [amount] <unitName> [team] @x,y,z
- .kick and .kickbynum messages are filtered.
- Changed '/grabinput' to '/grabinput [0|1]', and added state reporting.
- Added the "/grounddecals [0|1]" command.

Modinfo / modrules tags:
- Allow for the modder to define whether the crashing planes (and/or units
  running long Killed() scripts) can be fired on via modrules.tdf new section:
    [FIREATDEAD]
    {
      fireAtKilled=0;
      fireAtCrashing=0;
    }
  The defaults are to disallow both (Spring 0.75 behaviour, both variables set
  to 0). Spring 0.74 behaviour (allow both) can be emulated by setting both
  variables to 1.
- Added modinfo.tdf 'version', 'mutator', and 'shortName' tags.
- Added the following to modrules.tdf (default values shown):
    [DISTANCE] {
      builderUse2D=0;
    }
    [EXPERIENCE] {
      powerScale=1.0;
      healthScale=0.7;
      reloadScale=0.4;
    }
- Adds [experience] { experienceMult = 1.0; } to modrules.
- Adds [flankingBonus] { defaultMode = 1; } to modrules.
- Replaces the old bonus shield system with flanking bonus

Unit / feature definition tags:
- The TDF tags MetalStorage and EnergyStorage now override the StartMetal and
  StartEnergy specified in the startscript, instead of the other way round. If
  MetalStorage or EnergyStorage isn't specified the default values for commander
  units are StartMetal and StartEnergy. For other units the default remains 0.
- Moved the buildOptions definitions into the unitDef definitions, LuaParser
  handles backwards compatibility.
- Changed init_cloaked to initcloaked.
- Add a tag 'pushResistant' to UnitDef. If set to true, a unit will not be
  pushed out of the way by another when their footprints overlap, nor will
  it respond to BuggerOff directives when the other party has an important
  move order. Defaults to false.
- Added a per-soundfile volume control format for unitdefs
    sounds = {
      ok = 'oksound',
      cancel = {
        'cancel1',
        'cancel2',
      },
      select = {
        { file = 'selsound1', volume = 2.0 },
        { file = 'selsound2', volume = 2.5 },
        etc...
      },
    }
- Features have new tag "reclaimTime" defining how long they take to reclaim,
  default is metal+energy.
- Added tags:
    transportUnloadMethod = <integer>;  // 0 - land unload, 1 - flyover drop, 2 - land flood
    fallSpeed = <float>
    unitFallSpeed = <float>
  These dictate the speed of units being dropped from the transport.
  fallSpeed is used on the transports FBI file, to dictate the speed of all
  units it drops, unitFallSpeed is used on each transported unit to override
  fallSpeed.
- Added flighttime functionality to cannons.
- Added flighttime to bombdroppers.
- Added FBI tag cantBeTransported=0|1, if set to 1 no transport can load this unit.
- Added FBI tag minTransportSize=int, determines the smallest size footprint
  that the transport can load
- Added FBI tag minTransportMass=float, determines the smallest mass unit that
  the transport can load.
- Removed the check for Air movetype for holdSteady FBI tag, so now ground
  transports can use it too.
- New FBI tag for transports; float unloadSpread: Controls the spacing between
  units in an area unload command, works as a multiple, default is 1.
- Added the 'decloakSpherical' unitDef tag  (defaults to true).
- Added optional 3D ranging for all builder operations.
  (build, repair, reclaim, etc...) (per-unitdef buildRange3D=true)
- New unitDef parameters:
    int    flankingBonusMode
    float  flankingBonusMax
    float  flankingBonusMin
    float  flankingBonusMobilityAdd
    float3 flankingBonusDir
- Added the "canSelfDestruct = true" unitDef tag.
- Enable CEGs to be tied to pieces of exploding units
  (CEG replaces the default smoke if used, but not the miniscule fire-effect)
- Added CEG opcodes y, x, a, p and q. Except for p those operate on a set of 16
  buffers that store a float value each.
  y# - Yank: Stores the running value in the buffer # and returns 0.
  x# - Multiply: Multiplies the value with the contents of buffer #.
  a# - Add: Adds the contents of buffer #.
  p# - Pow: Returns the #th power of the value.
  q# - Buffer Pow: Like Pow but uses the contents of buffer # as the exponent.
- Add a tag "factoryHeadingTakeoff" (on request of the SWS folks to prevent some
  clipping issues) which controls the takeoff behavior of TAAirMoveType aircraft.
  True (default) means planes start matching their factory's heading right after
  taking off from the pad, false means they maintain the heading of the pad
  until reaching wantedHeight.
- Added [CONSTRUCTION] section to Modruless.tdf:
  constructionDecay (bool, default true): Should constructions decay if noone is working on them?
  constructionDecayTime (float, default 6.66): How long until the decay starts?
  constructionDecaySpeed (float, default 0.03): The speed of the decay, 
  whereby buildTime*decaySpeed = time for a total decay so higher = slower decay
- Added unit FBI collide tag (boolean, default: 1), currently affects only planes:
  If set to 0 the plane will not collide with any other unit. Most notably this
  saves the CPU-heavy collision checks every frame (big performance boost!) and
  avoids the damage planes normally take from bumping into each other.
  Projectiles will still collide with the units normally.

Weapon definition tags:
- Added heightBoostFactor - a float tag that gives control of cannon height
  range boost (more than 1 means increased range, 0 means the cannon has fixed
  range regardless of height difference to target. default is a magic value
  calculated on weapon init, based on range tag and theoretical max range.) 
- Added heightMod tag (height difference is multiplied by this value before
  checking range), default 0.8 for Cannon weapon type, 0.2 for everything else
  (i.e. stays as it was). Beamlasers have heightmod=1 by default so they use
  pure spherical targeting.
- Added GroundBounce, WaterBounce, NumBounce, BounceSlip, BounceRebound, and
  bounceExplosionGenerator tags.
- New tags beamttl (default: 0) and beamdecay (default: 1) for the beamlaser.
  Beamttl defines the time (in frames) the beam will stay after being fired and
  beamdecay defines the speed of the fadeout (each frame the beam's intensity is
  multiplied with that value). This applies to the single-frame beams the weapon
  emits, if it has a beamtime it will emit one such beam every frame, which is
  only useful if the source of the beam moves a lot (gives a cool trail effect).
  It's primarily intended for beams with a beamtime of one frame (which often
  simulate very fast shots instead of constant streams, e.g. railguns) so they
  don't disappear immediately.
- Added fixedLauncher tag (bool) for missiles, starburst missiles and torpedoes,
  this makes the projectile spawn with the orientation of the shooting piece
  instead of their normal orientation. The weapon will not properly check if
  allies are in the way so make sure you align the launchers in a way that
  won't hammer right into your own forces and perhaps use collideFriendly=0.
  FixedLauncher conflicts with trajectoryHeight and IMO combining them is
  pointless anyway so don't use both on a weapon.
- Added projectiles tag (int), each time a weapon fires this many projectiles
  are spawned (on the same frame). Make sure you put them on different
  trajectories somehow (sprayangle or different firepoints) because otherwise
  they'll all be clumped in one shot. Can be set to 0 as well for script trigger
  weapons and can be combined with burst.
- Missiles and starburst missiles now obey smoketrail, set it to 0 to disable
  the smoke. To get a missile without smoketrail you have to define the weapon
  as a missile with WeaponType=MissileLauncher in the tdf.
- Missiles, starburst missiles and torpedoes now use flighttime if present
  instead of the hardcoded formula (which is still used if flighttime is not
  present)
- Added SubMissile tag (bool) for TorpedoLaunchers, if set to 1 the torpedo will
  travel like a missile outside of water. It will not emit a smoketrail, though.
  When fired from a plane it will behave the same way but the plane will
  probably be considered a fighter, not a bomber.
- Added fireSubmersed tag (bool), defaults to the value of waterweapon. If set
  the weapon can fire underwater, if not then not. Use it for weapons that
  cannot fire underwater but can hit underwater targets. Works even for
  torpedoes.
- Starburst missiles now obey turnrate for the turn at the peak of their flight
  (if supplied, otherwise the old value is used).
- All weapons (save for the Rifle which noone uses anyway) can now attack
  underwater targets if they have waterweapon=1 set.
- Bombs can use manually defined burst and burstrate values instead of
  autogenerated ones by using the new manualBombSettings tag (bool). Keep in
  mind that (roughly) burst*burstrate defines the area in which the bomber is
  willing to drop the bomb so if you make it too small the bomber might miss
  the drop area and not drop any bomb.
- Added myGravity tag (float) for ballistic weapons (Cannon and Bomb), it
  overrides the map gravity if used. Regular map gravity is around 0.2. 
- Bombs now obey Accuracy and SprayAngle.
- Added ShieldStartingPower tag (float) for shields, if set the shield starts
  with this much power instead of 0.
- Renamed flareEfficency -> flareEfficiency.
- Added the weaponDef 'cameraShake' tag.
- Added the dance tag for missilelaunchers that makes the missile move around
  randomly. Unlike wobble it doesn't rotate the missile and it prevents the
  missile from going too far off course so a dancing swarm will remain coherent.
- Beamlasers ignore beamtime if new tag "beamburst" is set. (for emulating
  weapons that do damage in bursts)
- New weapon FBI tags:
    WaterBounce and GroundBounce: (default: false)
      Boolean to allow a projectile to bounce off of a surface.
    BounceSlip: (default: 1)
      Amount of lateral speed kept by the projectile after it bounces.
    BounceRebound: (default: 1)
      Amount of vertical speed keeps and reverses.
    NumBounce: (default: -1)
      The number of bounces a weapon will make. -1 indicates no limit.
- Added the ability to bounce for Torpedos, Missiles, Lasers, Cannons, and Emgs.
- Added bounceExplosionGenerator tag, which defines an explosion generator to
  run when a projectile bounces.
- Added the tag "hardStop" (bool, default 0) which, if used, makes the laser not
  fade if it doesn't hit before hitting its range limit and instead has the
  laser stop immediately and contract, as if it had hit something. This looks
  better with really long lasers, especially those that are longer than their range.
- Weapon projectiles can now spawn a CEG at their position every frame using
  the cegTag weapon tag.
- ProximityPriority tag - acts as a multiplier for the distance to the target
  in the priority calculation. Note that negative values make weapons prefer
  distant targets.
- Adds three opcodes to the CEG definitions:
 - m (modulo or sawtooth wave) returns the remainder of the running value
   divided by m's parameter (100 m24 returns 4),
 - s (sine) returns the sine of the running value with the parameter acting as
   the amplitude,
 - k (discrete) returns the running value floored to an integral multiple of
   the parameter.
- All weapon projectiles that have a TTL now supply their remaining ttl-value as
  the damage param to their trail CEG (Flame projectiles use curTime instead).
- Added alwaysVisible weapon tag, makes the projectile visible, even without LOS.
- Added the weapon tag leadLimit that limits the maximum distance a unit will
  lead a target (default is -1 which means infinite).
- Added the weapon tag leadbonus which is multiplied with the unit's experience
  and added to the lead limit.
- Added the weapon tag predictBoost (default 0 for non-burnblow, 0.5 for
  burnblow weapons).


Bugfixes:

- Fixed cannons not able to shoot as far from high ground as they should.
- Fixed infinite lower cylinder when cylindertargetting is active.
- Loaded air transports no longer land on stop command .
- Fixes in glBallisticCircle. (use heightmod also in drawing range circles.)
- Spring now returns 0 when started with -V, -h or -p.
- Fix random start positions. (positions are handed out before gaia team is added)
- CMD_REMOVE also works for idle factories (with move/patrol queues) 
- Changed Cannon::GetRange2D so it uses something closer to real-world physics.
- Fixed Melee weapon always aiming west.
- Do not allow commands with out-of-map destinations.
- "Connecting to server" message now does not pop up when starting without startscript.
- Commandline is now parsed before the filesystemhandler starts up (speedup
  starting with arguments like -V or -h).
- Fixed builders with area reclaim sometimes going out of their designated circle 
- Bombs now obey Accuracy and SprayAngle.
- Fixed lightning weapons having a hardcoded inaccuracy, made it obey accuracy
  and sprayangle tag instead.
- Fixed Lightning weapons not doing damage to shields.
- Possible fix for the disappearing healthbars.
- Fixed crashbug when exiting the GroupAI, sharing and quit boxes in an unusual way.
- Fixed starburst missiles so they stop their engines after they travel out of range.
- Fixed a possible load/save bug.
- Fixed crash in DamageArray() copying constructor.
- Don't say 'content error' if modrules.tdf isn't found.
- Improved error reporting in GetTDFName and LoadMap.
- Fixed replays.
- Fixed savefiles on non-Windows OSes.
- Fixed the run-time Spring.MakeFont() call-out.
- Fixed beamlasers so they don't ignore CollideFriendly.
- Fixed both CollideFeature and CollideFriendly for weapontype=Rifle.
- Fixed unloading of aircraft.
- Fixed crash when sharing units with a GroupAI other player doesn't have.
- Fixed .team, .setminspeed and .setmaxspeed when playing a demo locally.
- Fix groundscars turning white after using LOS overlays or enabling shadows.
- Better error reporting in case of global AI version mismatch.
- Fix SM3 when resizing windows.
- Don't profile the water renderer on voidwater maps.
- Weapons now use AimFromWeapon to determine the part to aim from, this prevents
  waggling and failing to aim at close ranges. To simulate the old behaviour
  make AimFromWeapon return the same piece as QueryWeapon does.
- Melee weapon now reports a proper angle to AimWeapon.
- Made starburst missiles obey startvelocity and weaponacceleration.
- Try to minimize damage caused by LuaUI crashes until cause is found by
  disabling LuaUI after several errors happen.
- Hackish fix for units sometimes not going to factory designated rally point
- Install the game/fonts/*.ttf files to fonts/.
- Handle a missing argument to .skip a little better.
- Fix error message for missing font.
- Take screenshot of entire window (rather than left half only) in dual-screen mode.
- Lua stack was changed to fix some segfaults.
- Prohibit spectators (except for the host) from changing the gamespeed unless
  cheating is enabled.
- Fix an exploit where partially reclaimed corpses that are turned into wreckage
  end up being worth more than the remaining value of the corpse itself.
- Fix weaponAcceleration typo causing major bugs with nukes and vlaunch weapons et al.
- Fix two "unknown net msg" errors in CPreGame when playing certain demos.
- Fixed a crash bug  (lastColWarning == NULL) in TAAirMoveType.
- Fixed a crash in AirMoveType.cpp.
- Removed the automatic 'userInputPrefix' tracking for incoming messages 
- Fixed the unitsync GetUnitFullName().
- Ignore used writing keypresses  (for bindings like:  'bind a+u edit_next_word')
- fixes a bug in LuaUnsyncedRead::TraceScreenRay() when using dualscreen mode
  and minimap is on left.
- Unit pieces inherit alpha threshold from owner.
- Fixed jittery falling units.
- Fix timeout while loading / pathing 
- CommandFallback was broken wrt return values, fixed.
- Improved dgun responsiveness. (still not perfect, but at least shoots through
  features now)
- Construct a proper orthonormal basis for muzzle-flame bitmaps.
- Gracefully handle missing script failure.
- Fixed speed and pause in replay.
- Fix for teleporting units when area-unloading out of map.
- Fix for uadded tracking of PushMatrix and PopMatrix Lua call-ins to reduce
  number of gl errors.
- Fix ghosted buildings always being drawn with default facing.
- Fixed weapon TDF 'fireStarter' tag, for all weapon types.
- Units, when they are within range, but unable to hit the target of an attack
  command, will move sideways.
- Fixed the bug where laserprojectiles had weird garbage on the front if the
  projectile was within lod distance.
- Fixed set HEADING COB variable so it updates unit direction.
- Fixed giving commands while recording a video.
- Fixed bug where after load all moving ground units stops with message
  "Can't reach destination".
- Fix for patrolling builders repairing stuff that's being reclaimed 
- In the tooltip displayed on mouseover, deconstructing nanoframes didn't show
  how much metal they are producing on mouseover.
- Don't set the default shareTeam to a dead team ever.
- Fixed random mod.
- Made glPrintOutlined() almost 50% faster by lowering quality.
- Reclaimers list is now saved.
- Now error messages are broadcast to all clients.
- Paralyzers no longer damage features.
- Fixed the wait/teleport factory bug.
- Fix flying/underground units bug.
- Unhide the gaia team, and colorize by allegiance.
- Made demo not found / demo corrupt / format outdated exceptions instead of logOutput-warnings 
- /quit will now quit immediately if you are the only active player.
- Fixed a 'bad team' segv in Spring.CreateUnit().
- Added the ScopedMapLoader helper to unitsync.
- Paralyzers no longer shake the camera.
- Fixed the missile and starburst texture2 only applying to the first segment of
  the smoketrail (the segment that's still part of the projectile, not a
  CSmokeTrailProjectile). Now the entire trail uses the texture.
- Fix possible segmentation faults after loading a shared object failed.
- Fixed bug where server dont send remaining data (including NETMSG_QUIT) to server 
- Set ACTIVATION issues CMD_ONOFF instead of activating/deactivating, fixing
  issues with on/off not showing correct state.
- Added a check for weapon 'slavedTo' values  (content_error).
- Fixed some bugs in gl.TexEnv / gl.MultiTexEnv / gl.TexGen / gl.MultiTexGen 
- Used the decoyDef ghost building models when appropriate.
- Fixed CAirMoveType planes not rotating on factory pads.
- Fixed CTAAirMoveType planes always taking off from labs facing south.
- Fixed missile-gunships from being unable to force-attack ground.
- Fixed CTRL-MOVE group orders causing units to move at snail's pace.
- Fixed mid-air explosions that occur over water triggering a water splash effect.
- Fixed the isAttackCapable() check.
- Prevent CMissileProjectile weapons with trajectoryHeight from over- or
  undershooting when firing at targets below or above attack position.
  Based the angular correction factor on missile speed.
- Not being able to lock the config file on linux is not a fatal error anymore.
- Remove the (bestDist < radius) bugs.
- Make sure the (paralyzeDamageTime >= 0).
- Added bestDist method for all area searches.
- Added a check for immobile builders that will stop internal.
  commands for when the unit has moved out of the build range.
- Fixed FlareProjectile. (flare projectile was always removed after one Update.) 
- Allow for "non-decloakable" units.
- CGameHelper::GetClosestEnemyUnitNoLosTest() now includes the target's radius
  for spherical tests.
- Stunned factories don't open, build, or close.
- Players from demo once again can't change speed / pause.
- Factored out some glGetDoublev() calls (may be faster on certain GPU architectures)
- Fixed issue that some people can only get sound when hosting.
- Fixed bug in map damage loading from savegame.
- Fixed possible bug in explosions map damage.
- Fixed crash with saving after nuke was intercepted.
- Fixed ground-transports being unable to unload units on certain maps.
- Units that are still inside a non-firebase transport do not destun.
- Fixed units whose state is floating but are not in water taking water-damage.
- Print "spectator <name> left" rather than "player <name> left" if the guy
  leaving is a spectator.
- Added serializing for InMapDraw.
- Fixed bug with saving builders that terraform ground.
- Fixed stunned units being unhittable if pushed.
- Made a seperate update thread while the game loads to prevent network timeouts
  on slow computers. (thread is joined when loading finished.)
- CCobInstance::RealCall now checks if stack is big enough before getting
  arguments from stack.
- made StartBuilding measure the pitch from the center of the unit instead of
  the base to deal with units with large vertical offset.
- Put CMinimap always on back so it does not draw over the user interface.
- Moved the QueryNanoPiece COB call into synced code to hopefully fix a desync.
- Fixed the bug where a repair order on a construction whose terraforming is
  incomplete will start construction anyway.
- Fixed units terraforming the ground under units being built by factories.
- Added some protection against .wav's whose headers contain a garbage datalen.
  (was causing SEGV's with XTA 9.2)
- Change lots of printf calls to logOutput.Print().
- Don't send NETMSG_GAMEOVER when watching a demo with only 1 allyteam left.
- Throw content_error if a mod/map archive can not be found instead of only
  printing a warning in the log.  This should stop the 'missing default cursor'
  message actually meaning 'missing a mod archive'.
- Added minimap ping on game start and set lastMsgPos to something meaningful.
  Notably this fixes F3 zooming to top left corner before something interesting
  happens.
- Fixed crash when singlestep was executed in client mode.
- Spring and ArchiveMover.exe requires administrative privileges now on Windows,
  as a workaround until user directories can be specified as data directories.
- "Can't reach destination" message spam should be reduced a bit.

Lua:
- Added call-in gl.Smoothing(point, line, polygon).
- Added Spring.GetViewSizes() to LuaOpenGL.
- Added the SetLosViewColors()    call-in.
- Added the StockpileChanged()    call-in.
- Added the DefaultCommand()      call-in.
- Added the LuaUI WorldTooltip()  call-in.
- Added the LuaUI GameSetup()     call-in.
- Added GetUnitHeight()           call-out.
- Added GetFeatureHeight()        call-out.
- Added GetFeatureRadius()        call-out.
- Added GetFeatureResurrect()     call-out.
- Added SetTeamColor()            call-out.
- Added GetTeamColor()            call-out.
- Added GetTeamOrigColor()        call-out.
- Added the Spring.SetDrawSky()   call-out.
- Added the Spring.SetDrawWater() call-out.
- Added the Spring.SetDrawGroud() call-out.
- Added the gl.UnitMultMatrix()   call-out.
- Added the GetLuaAIDesc() call.
- Added the Spring.AddUnitDamage(
   number unitID,
   number damage,
   number paralyzeTime,
   number attackerID,
   number weaponID,
   number impulseX, number impulseXY, number impulseZ) lua call-out.
- Added the gl.UnitPieceMultMatrix() lua call-out.
- Added the gl.EdgeFlag() lua call-out.
- Added the Spring.GetCameraFOV()       lua call-out.
- Added the Spring.GetCameraDirection() lua call-out.
- Added unit count protection to Spring.CreateUnit().
- Added the DrawUnit() LuaRules unsynced call-in.  (for SetUnitLuaDraw())
- Added the Spring.SetUnitLuaDraw() LuaRules call-out.
- Added the GameFrame() call-in to LuaUI.
- Added the AICallIn() LuaRules unsynced call-in.  (for CallLuaRules())
- Added the Spring.GetTeamLuaAI() lua call-out.
- Added LuaUI Spring.GetGatherMode().
- Added LuaUI Spring.GetInvertQueueKey().
- Added Spring.SetUnitLineage(unitID, teamID[, bool isRoot]).
- Added Spring.GetBuildFacing() for LuaUI.
- Added Spring.GetBuildSpacing() for LuaUI.
- Removed the color info from GetTeamInfo().
- Added GetHasLag(), returns true if currently lagging behind host.
- Added PlaySoundStream and StopSoundStream for OggVorbis audio.
- Added the rank parameter to GetPlayerInfo().  (arg 7)
- Added 'autoland' to GetUnitStates().
- Added the UnitCmdDone()   call-in.
- Added the UnitCloaked()   call-in.
- Added the UnitDecloaked() call-in.
- Adedd the MapDrawCmd()    call-in.  (only for LuaUI) 
- Added the unsynced Spring.GetVisibleUnits([teamID] [,radius] [,useIcons]) call-out 
- Added the following to both UnitDefs[] and FeatureDefs[]
    height, radius
    minx, midx, maxx
    miny, midy, maxy
    minz, midz, maxz
- Disabled the lua DrawScreen() call-in when the interface is hidden. (note that
  the DrawScreenEffects() call-in remains active.)
- The majority of mod files are now loaded via LuaParsers, which can be edited
  to load different types of files. The default LuaParsers simply load the
  normal style files with improved error checking and speed.
- Game.armorTypes[] was changed to a bidirectional map.
- WeaponDefs[x].damages.damages[] was replaced with WeaponDefs[x].damages[index]
  (starts at 0 for the default armorType) 
- Added the 'teamcolors.lua' local team recoloring LuaParser script.
- Added the gui_game_setup.lua GameSetup widget.
- Added 'ghostedBuildings' to Game[].
- Changed Game.modName to use the humanName value.
- UnitDef names are always lower case now.
- Added on-the-fly lua font texture / specfile generation.
- Added localization support in the lua tooltips and ctrlpanel.
- Generated local speed-ups for some of the installed widgets.
- Created FeatureDefNames and WeaponDefNames for LuaUI.
- Added Spring.SetUnitNeutral(unitID, bool) and Spring.GetUnitNeutral(unitID).
- Neutral units (mainly for gaia and fake features), will not be attacked.
  automatic when the attacker to be has its fireState set to "Fire At Will".
- Added a hidden fourth fireState level (3) that will shoot at neutrals.
- Added SetCustomCommandDrawData.
- Added 'extractorRadius' to the LUA Game table.
- Added Spring.IsGodModeEnabled() to LuaSyncedRead.
- Added the "gamedata/LockLuaUI.txt" check for LuaUI. If this file exists in
  the mod, then LuaUI can only load its gui.lua" file from the archive
  filesystem, thus putting the mod in full control of what LuaUI can be used
  to do  (including disabling all user widgets).
- LuaAI is now supported.
- Added custom mod / map options via Lua:
 - MapOptions.lua is to be used with LuaGaia, and belongs in the map archive,
 - ModOptions.lua is to be used with LuaRules, and belongs in the mod archive.
- Renamed cmdDesc  iconname  -> texture  for LuaUI LayoutButtons() input.
- Renamed cmdDesc  mouseicon -> cursor   for LuaUI LayoutButtons() input.
- Changed the cmdDesc double texture format to:
   '&<xscale>x<yscale>&<tex1>&<tex2>'
 (both textures can use either the named textures or '#<unitDefID>' format) 
- * Added the Spring.RequestPath() lua call-out
 - RequestPath(<number moveID | string moveName>,
     startX, startY, startZ, endX, endY, endZ [, goalRadius]) -> nil | path
 - it returns a lua userdata or nil
 - the userdata has the following calls:
   path:Next([currX, currY, currZ[, minDist]]) -> nil | x, y, z
   path:GetEstimatedPath() ->
                        {[1] = {x,y,z}, [2] = {x,y,z}, etc... }, -- waypoints
     {[1] = index,   [2] = index,   etc... }  -- resolution start points
- Added Spring.GetUnitEstimatedPath() -- same return as path:GetEstimatedPath()
- Added GetEstimatedPoints() to CPathManager
- Added the NETMSG_LUAMSG net packet type
- Added the following calls to LuaUI:
   Spring.SendLuaUIMsg(msg [,mode = ''|'a'|'allies'|'s'|'specs'])
   Spring.SendLuaCobMsg(msg)                    
   Spring.SendLuaGaiaMsg(msg)
   Spring.SendLuaRulesMsg(msg)
- Added the RecvLuaMsg(msg, playerID) call-in to all lua scripts 
- Added the weaponID to the lua UnitDamaged() for fullRead scripts 
- Removed imageSizeX and imageSizeY  (potential desync). The gl.TextureInfo() call can be used instead 
- Made decloakDistance a per-unit property, and made it accessible to
  synced lua scripts as the third parameter to SetUnitCloak().
- Added GetModOptions() and GetMapOptions()
- Added UnitSeismicPing()  (with a sound) 
- Added the ability to set the stockpile percent 
- Added the Spring.SetUnitTarget(unitID, targetID | <x,y,z>, bool userTarget) call-out 
- Added the Spring.SetExperienceGrade(number) call-out (sets the experience
  steps that will trigger the UnitExperience() call-in, based on the
  limExperience varible value  (exp / (exp + 1)))
- Added the UnitExperience() lua call-in 
- Added VFS.UseArchive(filename, function(...) ... end, ...)
 - allows for packaged widgets (source, textures, sounds, etc...)
 - currently only works for raw filesystem access (limited to LuaUI) 
- Added the following lua call-outs to allow unsynced read access to COB global variables:
   GetCOBUnitVar(unitID, varID)
   GetCOBTeamVar(teamID, varID)
   GetCOBAllyTeamVar(allyTeamID, varID)
   GetCOBGlobalVar(varID)
 (varIDs start at 0) 
- Added FBO objects to lua GL, with MRT (multiple render targets) capability, and blitting
- Added RBO objects to lua GL, which should allow for depth + stencil format   
- Added lua Scream objects, which can call a function when they are garbage collected
- Added VFS.SubDirs(), to get a list of subdirectories
- Spring.SendMessage() and friends can now be used by unsynced lua code
- added Lua SyncedCtrl function Spring.SetUnitMoveGoal(unitID, posX, posY, posZ[, radius[, speed]]), 
  this makes the unit move closer to the target location, to a distance of <radius> (default 0). 
  This is mostly for custom commands that should have the unit moving into range, 
  it doesn't affect the order queue. It's marked as unsafe.
- New Lua call-out (SyncedCtrl): Spring.SetUnitWeaponState(unitID, weaponNum, stateTable)
  StateTable is a table containing one or more of reloadstate, reloadtime (this time in seconds), 
  accuracy, sprayangle, range, projectilespeed. Obviously the values will be assigned to the 
  variables the keys refer to.
- Added the Spring.GetMapList() call-out to the mod ValidMaps.lua script 
- Added the Spring.GetMapInfo() call-out for the ValidMaps.lua script 
- Added mapSizeX and mapSizeZ to the lua Game table 
- Fix GetCmdDescIndex() 
- Added a seventh parameter to AllowCommand, "synced". It's a bool that is true 
  when the command was sent by either a Spring-internal action or synced Lua and 
  it's false if the command came from the user or LuaUI. This should facilitate
  preventing user commands to a unit while allowing LuaRules commands.
- Removed the third return value of Spring.GetTeamInfo (active) since it was broken.

COB
- Give a COB error instead of crashing for invalid explosion generator indices
  or weapon indices in emit-sfx. #
- Added COB call to "ShotX" that happens shortly before weaponX uses
  QueryWeaponX, use this for switching firepoints in bursts or when using
  multiple projectiles. 
- StartBuilding now supplies the pitch as the second parameter to help with
  custom build FX. 
- Fixed cob bitwise not operator (was logical not.)
- Added a MOD COB opcode for modulo division
- Introduces the COB get/set variable 103, ALPHA_THRESHOLD. It ranges from 0-255
  and changes the glAlphaFunc to use that alpha value as its minimum. In
  practice this allows disintegration-style effects or the reverse for build animations.
- Transport AI now calls the cob function 'StartUnload' which is called once
  when transport starts to lower during land flood method. 
- Dropped units call the cob functions 'falling' and 'landed' so that you may
  start and stop a parachute animation. 
- Added the 'cobID' unitDef tag, and the COB_ID (100) COB GET type 
- Added the BlockShot#(unitID, block) COB call-in  - set block to non-zero to
  block the unit firing at unitID
- Added the cob GET/SET STEALTH command  (96) 
- Added CRASHING (97) get/set constant to COB. Can be used to get/set whether an
  aircraft is crashing. Is ignored for non-CAirMoveType units.
  (including CTAAirMoveType aircraft)
- Added global, team, and ally GET/SET variables to COB scripts
    1024 - 2047:  1024 global variables
    2048 - 2175:  128  variables per team      (the COB script unit's team)
    2176 - 2303:  128  variables per allyteam  (the COB script unit's allyteam)
- Added 8 shared per-unit variables   (example: GET UNIT_VAR_START -unitID value)
- Added the SET_WEAPON_UNIT_TARGET (106) and SET_WEAPON_GROUND_TARGET (107)
  COB GET codes  (used GET because of its extra parameters)
   -  GET  SET_WEAPON_UNIT_TARGET    weaponID  unitID          userTarget
   -  GET  SET_WEAPON_GROUND_TARGET  weaponID  xzCoord yCoord  userTarget 
- Added TargetWeightX COB call-in and CHANGE_TARGET cob set var.
  COB call-in TargetWeightX(targetID, weight), weight defaults to 65536 which
  represents 1.0 and is multiplied with the target's value to determine priorities.
  Set CHANGE_TARGET to Y makes weaponY pick a new target.
- Adds the COB set constant CEG_DAMAGE (99), which defines the damage value for
  all CEGs triggered by emit-sfx 1024 + x to allow for some variability in the
  emitted effects (to e.g. make a charging energy ball grow larger or have smoke
  get progressively darker as the unit's HP decreases).
- Added a new get call, PLAY_SOUND, to play a sound that can be heard only by
  allies, enemy, in los, etc. GET PLAY_SOUND(sound number, volume,
  who hears the sound, where to play the sound) (see r4974 for full docs)
- Get health now allows a unit ID to be passed.
- Added COB and Lua access to some more weapon variables.
  New COB constants, all get-only (but not read-only):
  WEAPON_RELOADSTATE 125 (frame number of the next shot/burst)
  WEAPON_RELOADTIME 126 (in frames)
  WEAPON_ACCURACY 127
  WEAPON_SPRAY 128
  WEAPON_RANGE 129
  WEAPON_PROJECTILESPEED 130
  All of these use the first param (starting at 1) as the weapon index whereby positive 
  means read and negative means write the second param to the value. In the latter case
  the previous value is returned.
- New COB GET/SETS
    FLANK_B_MODE         120 // set or get
    FLANK_B_DIR          121 // set or get, set is through get for multiple args
    FLANK_B_MOBILITY_ADD 122 // set or get
    FLANK_B_MAX_DAMAGE   123 // set or get
    FLANK_B_MIN_DAMAGE   124 // set or get


0.75b2

- Fixed possible crash while waiting for connection to the host.
- Fixed unknown net msg in read ahead bugs when large UDP packets were received.
- Fixed a crash when empty network packets where destructed.

- Fixed rapier like units being unable to attack enemy units.
- TargetBorder now takes the correct vertical distance into account.
- ".kick" and ".kickbynum" now just kick the given player instead of kicking
  everyone including the host himself.
- Game end condition is now fixed to check allyteams instead of teams.

- Added gui_xray_shader.lua widget
- Added gui_team_platter.lua widget
- Added camera_smooth_move.lua widget

0.75b1

Uncategorized:
- Added LuaCob, LuaGaia, LuaRules synchronized scripting:
  - LuaCob:   (mod)  provides access to lua functions for COB scripts
  - LuaGaia:  (map)  controls the Gaia team
  - LuaRules: (mod)  gives full read/ctrl to setup custom mod game rules
- Added LuaRules Spring.UnitRendering (LuaMaterials, unfinished).
- Merged the LuaUI code with the new lua library setup.
- Made LuaUI mod widgets possible.
- Added support for the Gaia team.
- Added SimpleGroundFlash to explosion generator.
- Added 'dds' and 'png' as default buildpic formats.
- Load/save now uses the creg serializer.
- Netcode has been refactored to be more readable.

AI:
- Added Load/Save interface for AIs.
- Load/save support for EconomyAI and MexUpgraderAI.
- Added GetStartPos to IAICallback.
- Fixed CCommandQueue in AI interface.
- Added AIVAL_UNITLIMIT enabling AIs to query the maximum number of units.
- Added the ability to unload a specific unit using the UNLOAD_UNIT command
  (the unitID should be added as the fourth parameter)
- Added AIVAL_STOCKPILED to query the amount of stockpiled ammo.
- Added AIVAL_STOCKPILE_QUED to query the amount of queued stockpile ammo.

Behavorial:
- Allow up to 16 pads per air base.
- Units can not build stuff on top of cloaked stuff anymore.
- Units guarding other units now properly repair the other unit if it's damaged.
- Units guarding factories prioritize repairing the factory instead of building
  new units.
- Stunned (and transported) units can not build anymore.
- Units (that are still paralyzed) are not un-stunned anymore during unloading.
- Changed the unit resource updates so that they occur even while stunned.
- Transporters can carry hovers and ships now.
- Transporters now check ground slope before unloading.
- Units on a slope steeper than their max slope will now skid down it.
- Disabled the ground flattening when building mobile units.
- Added paralyzed unit skipping for paralyzers.
  (use ALT to disable skipping, same modifier as for permanent area commands)
- Made a unit's ablity to slow itself relative to the angle of the slope.
- Improved aiming of Cannon type weapons. They will no longer over/under shoot
  due to large height differences.
- Weapons don't target dead and crashing units anymore.
- Mobile units under hold position in a temporary attack order don't move away
  from their patrol route anymore.
- Added ScriptMoveType (incomplete, but functional).
- Commander doesn't randomly D-gun buildings anymore when FPS mode is disabled.
- Missiles now honour SprayAngle weapon TDF tag.

Bugfixes:
- Removed the maximum 8 sides limit.
- Fixed incorrect searching order in the virtual file system.
- Fixed teamcolor for S3O and 3DO features.
- Fixed cloaked S3O units losing their texture.
- Fixed teamcolor rendering for MissileProjectile and WeaponProjectile.
- Fixed handling of .give so team unitlimit is respected.
- Dynamic and refractive water are now reinitialized after window resize.
- Fixed rendering of shadows of S3O models with transparency.
- Fixed rendering of underwater grass.
- Made LuaUI compatible with VFS access.
- Fixed SM3 shader for ATI x1* series.
- Fixed incorrect cancelling of rotated buildings build orders.
- And many more

Chat commands:
- Added an optional [0|1] parameter to the pause command.
- Added an optional [0|1] parameter to the showHealthBars command.
- Added an optional [0|1] parameter to the updatefov command.
- Added an optional [0|1] parameter to the drawtrees command.
- Added an optional [0|1] parameter to the dynamicsky command.
- Added an optional [0|1] parameter to the hideinterface command.
- Added ".editdefs [0|1]" to allow lua based UnitDef editing.
- Added ".reloadcob <unitName>" to reload cob scripts.
- Added ".skip <[+|f]seconds>" for in-game and replay fast-forwarding.
- Added "/safegl [0|1]" command for testing lua rendering overhead.
- Added "/buffertext <text>", copies text into the console history.
- Added dynamic "/vsync" control.
- Added the "/fpshud [0|1]" action.
- Added "endgraph [0|1]" action.
- Changed ".take" so that cheating must be enabled for spectators to use it.
- Added the ability to give features using ".give"
  (only if the unit name doesn't match, player's team is used)
- Added input text editing
  - backspace & delete
  - home & end  (or ALT+{left|right})
  - CTRL+{left|right} for word skipping
- Added the '//' -> '/' command prefix conversion syntax
- Added the following LuaUI widget handler commands:
   "/luaui togglewidget  <widgetname>"
   "/luaui enablewidget  <widgetname>"
   "/luaui disablewidget <widgetname>"
- Added the '/lodscale [shadow|reflection|refraction] <scale>' command.

COB:
- HitByWeaponId(z,x,id,damage) will be called instead of HitByWeapon if it exist
  in script.
- Implemented COB get/set constant STANDINGMOVEORDER (2)
- Implemented COB get/set constant STANDINGFIREORDER (3)
- Added a new COB query call, "QueryLandingPadCount".
  - if not defined, Spring will assume 16 as the maximum number of pads
  - it takes one argument, which is initially set to 16, the number
    returned in arg0 will be used as the maximum number of pads.
- Fixed logical XOR,AND,OR (they were implemented as binary XOR,AND,OR)
- Added COB get/set constant UPRIGHT (79)
- Added COB get constant POW (80) with 2 arguments x and y: it returns x^y.
- Added COB get constant PRINT (81) which prints it's 4 arguments to infolog.
- Added COB get constant HEADING (82)
- Added COB get constant TARGET_ID (83)
- Added COB get constant LAST_ATTACKER_ID (84)
- Added COB get/set constant LOS_RADIUS (85)
- Added COB get/set constant AIR_LOS_RADIUS (86)
- Added COB get/set constant RADAR_RADIUS (87)
- Added COB get/set constant JAMMER_RADIUS (88)
- Added COB get/set constant SONAR_RADIUS (89)
- Added COB get/set constant SONAR_JAM_RADIUS (90)
- Added COB get/set constant SEISMIC_RADIUS (91)
- Added COB get constant DO_SEISMIC_PING (92)
- Added COB get/set constant CURRENT_FUEL (93)
- Added COB get constant TRANSPORT_ID (94)
- Added COB get/set constant SHIELD_POWER (95)
- Added COB get/set constants LUA0-LUA9 (110-119)

Config:
- Added "SMFTexAniso" config parameter (default = 0, disabled)
  (application controlled anisotropic texture filtering for SMF maps)
- Removed "SM3MaxTextureStages", it's confusing and the fallback mode isnt
  really useful (still slow).
- Added config parameter MaximumTransmissionUnit. This can be used to control
  the maximum UDP packet size Spring uses. The default is 512, which should keep
  all UDP packets below the required minimum MTU of 576 bytes (512 payload).
  If the hypothese that many player drops are because of too big UDP packets is
  correct, then this may solve it.

Feature TDF tags:
- Added boolean feature TDF tag NoSelect. (default: 0)

Fixed exploits:
- Fixed exploit: UnitRestricted could be circumvented by making multiple
  factories and starting a build of the restricted unit in all factories at
  the same time.
- Fixed exploit: CanAssist could be circumvented if multiple builders were
  ordered an identical build at the same time out of their immediate range.
- Fixed exploit: Aircraft can not cross map boundaries anymore in FPS mode.

Game Setup:
- Added 'lineage' game mode (2). If the commander dies, all units directly or
  indirectly built by him die, regardless of the current owner of the unit.
- Added player 'CountryCode' tag for the gameSetup script.
- Added game setup script parameter 'Savefile'.
- SaveGame can also be loaded by command line: 'spring QuickSave.ssf' or
  'spring C:\Spring\Saves\QuickSave.ssf'
- Added NoHelperAIs tag: determines whether helper AIs are allowed.
- Added LuaGaia tag: is LuaGaia enabled this game?
- Added LuaRules tag: is LuaRules enabled this game?

GUI:
- Added land at 80% for aircraft.
- Better handling and display of widgets which are enabled, but not active.
- Disable unit tracking when using middle mouse button scrolling.
- Disable unit tracking when the viewport is set via the minimap.
- New unit selection filter "in hotkey group".
- Units being transported can not be selected anymore unless the transporter
  isfireplatform.
- Mobile units can be loaded onto a transport by clicking on the transport with
  the mobile unit selected.
- Added Free camera mode (to help make better videos). It's primarily intended
  to be used with keyboard input (CTRL/ALT/SHIFT/META behave differently then
  the normal camera modes). It's is not in the toggle list by default.
- Added CTRL+F5 default keybinding for free camera mode.
- Added text coloring for ally and spec message input.
- Changed unit sharing so that allied units do not clear their command
  queue, and cleaned up some more state for enemy transfers.
- Allowed build command descriptions to use text in the 4 corners of a button
  (0 = SW, 1 = NE, 2 = NW, 3 = SE)
- Added the "hotspot" command for the *.txt mouse cursor spec file
- Added side preference prefix for start pictures.
- Allow "allside_" start pictures to always be used (regardless of side).
- FPS mode now shows weapon names instead of numbers.
- Area build now builds every second row in the opposite direction.
- Perimeter build now builds everything in clockwise or counterclockwise order.
- Circle build now builds everything in clockwise or counterclockwise order.
- Circle build now works correctly when trying to use non-square buildings for
  circling anything.
- Improved QuitBox player selection visibility.
- Gunships and air builders now have a repair level switch.

Mapping:
- New ocean.jpg (public domain) comes from golgotha texture set and tiles better
  then original ocean.jpg.
- Changed default repeat settings so the new texture fits better (wrt. scale)
- Added "MAP\WATER\WaterRepeatX" and "MAP\WATER\WaterRepeatY" SMD tags, defining
  the amount of times the water texture should be repeated in X and Y direction.
- Aspect ratio of water texture is taken into account now.
- Added 'gamedata/resources_map.tdf' for gaia unit projectile textures.

Unit FBI tags:
- Added boolean FBI tag AirStrafe.  Only effective if HoverAttack=1.
  If AirStrafe=1, gunships and construction aircraft will strafe in a circle
  around the target. If AirStrafe=0, they will not strafe, they will sit
  stationary in the air firing their weapons. If set to 0 they sit at one place.
- Added string FBI tag Gaia.
- Added string FBI tag DecoyFor: the name of the unit this one is a decoy for.
- Added boolean FBI tag CanBeAssisted. (default: 1)
  - Disabling assists to factories should work well.
  - Builders have to die to release their hold on a unit being built,
    and once the unit is released, multiple builders can repair the unit.
- Added boolean FBI tag CanSelfRepair. (default: 0)
- Added boolean FBI tag TransportByEnemy. (default: 1)
- Added boolean FBI tag HoldSteady, causes transports to hold units such that
  their updirs are always aligned.
- Added boolean FBI tag ReleaseHeld for transports. When set to 1, the units
  carried by the transport will survive the destruction of the transport itself.
- Added float FBI tag SlideTolerance, multiplies the the max slope for
  determining when skidding should begin, due to slope. Values less than 1 will
  cause the unit to never start skidding due to slope. (default: 0)
- Added float FBI tag MinCollisionSpeed, indicating the minimum net impact speed
  that will cause damage to a unit.
- Added vector FBI tag CollisionSphereOffset
- Added float FBI tag LoadingRadius
- Added boolean FBI tag FullHealthFactory, controls whether or not a unit can
  leave the factory if it is not at full health. (default: 0)
- Added float FBI tag RepairSpeed (default: WorkerTime)
- Added float FBI tag ReclaimSpeed (default: WorkerTime)
- Added float FBI tag ResurrectSpeed (default: WorkerTime)
- Added float FBI tag CaptureSpeed (default: WorkerTime)
- Added float FBI tag TerraformSpeed (default: WorkerTime)
- Added boolean FBI tag DecloakOnFire (default: 1)
- Up to 8 ok, select and arrived sounds can now be defined.
  (use tags ok1, ok2, etc.)
- Added float FBI tag CollisionSphereScale, this is a scaling factor for the
  unit's collision sphere. (default: 0.5 for aircraft, 1 for other units)

Weapon TDF tags:

- Added weapon tdf command SweepFire, if 1 (default 0) it will make the weapon
  continue firing while it aims for a new target. Only works on continous beam
  lasers currently.
- Added boolean weapon TDF tag CanAttackGround. (default: 1)
- Added float weapon TDF tag float TargetBorder: if nonzero, targetting units
  will TryTarget at the edge of collision sphere (radius*tag_value, [-1;1])
  instead of its centre. Defaults to 1 for Melee type weapons, 0 otherwise.
- Added float weapon TDF tag CylinderTargetting: if greater than 0, range will
  be checked in a cylinder (half height=unitradius*cylinderTargetting) instead
  of a sphere. Defaults to 1 for Melee type weapons, 0 otherwise.
- Added float weapon TDF tag MinIntensity: for beamlasers - always hit with some
  minimum intensity (a damage coeffcient normally dependent on distance).
- Added float weapon TDF tag SizeDecay: how much a plasma particle is smaller
  than the previous within the same plasma shot. (default: 0)
- Added float weapon TDF tag AlphaDecay: how much a plasma particle is more
  transparent than the previous particle. (default: 1)
- Added float weapon TDF tag Separation: distance between each plasma particle.
  (default: 1)
- Added int weapon TDF tag Stages: number of particles used in one plasma shot.
  (default: 5)
- Added boolean weapon TDF tag NoGap: if set to 1, the distance between plasma
  particles is proportional to the size of the two particles. If set to 0, the
  distance between plasma particles will be proportional to the size of the
  first particle. (default: 1)
- Added the weapons TDF tag 'visibleShieldHitFrames' (defaults to 0 frames)
  - can be used along with  'visibleShieldHit'
  - the alpha value fades after the hit
- Added colormap for ballistic ('cannon' type) weapons.
- Added boolean weapon TDF tag AvoidFeature, this makes the weapon avoid
  features while targetting. (default: 1)
- Added float weapon TDF tag FallOffRate: rate at which the beamweapon fades out
  after it goes past its maximum range. 0 is never fade out, 1 is finish fading
  out exactly at max range, the default 0.5 is the previous behaviour.
- Added float weapon TDF tag LodDistance: minimum camera distance at which the
  default beamweapon projectile is simplified to rectangle. (default: 1000)
- Added float weapon TDF tag DynDamageExp: exponent of the damage formula, 0
  (the default) disables dynamic damage. 1 means linear scaling.
- Added float weapon TDF tag DynDamageMin: minimum damage value. (default: 0)
- Added boolean weapon TDF tag DynDamageInverted: inverts the damage curve.
- Added float weapon TDF tag DynDamageRange: if set it will use this value
  instead of the range value from the weapon in the calculation.

New projectile handler textures:
- sbtrailtexture         - default first section of starburst missile trail texture
- missiletrailtexture    - default first section of missile trail texture
- muzzleflametexture     - default muzzle flame texture
- repulsetexture         - texture of impact on repulsor
- dguntexture            - dgun texture
- flareprojectiletexture - texture used by flares that trick missiles
- sbflaretexture         - default first section of starburst missile trail texture
- missileflaretexture    - default first section of missile trail texture
- beamlaserflaretexture  - default beam laser flare texture
- bubbletexture          - torpedo trail texture
- gfxtexture             - nanospray texture
- projectiletexture      - appears to be unused
- repulsegfxtexture      - used by repulsor
- sphereparttexture      - sphere explosion texture
- wrecktexture           - smoking explosion part texture
- plasmatexture          - default plasma texture

Scons build system:
- Added debugdefines configure option: true by default, if it's set to false
  (debugdefines=no) then a debug build will be made with release preprocessor
  defines. This can be used to generate debugging symbols for release builds.
- Added dc_allowed configure option to enable/disable direct control.

Unitsync:
- Added GetSpringVersion() function to unitsync. This returns the Spring version.
- Deprecated InitArchiveScanner() unitsync function.
- Added java bindings to unitsync.
- Unitsync is now installed to libdir on Linux. It can be assumed this is
  either /usr/local/lib/spring/unitsync.so or /usr/lib/spring/unitsync.so.



0.74b3

- Added LuaUI v0.1  (with widget management code, somewhat experimental)
  (requires the LuaUI setting to be on to be autoloaded,
   "/luaui disable"      to disable in-game
   "/luaui reload"       to load in-game
   "/luaui reload fresh" to load in-game, but with fresh state)

- Renamed docs/lua_ui_interface.txt to LuaUI/API.txt

- Added "/minimap slavemode [0|1]" and "/minimap draw" for use with LuaUI

- Added "/specfullview 2" spectator mode, where you can both view and select all units

- Added "/volume <fraction>" command  (0.0 to 1.0 range)

- Added "group <int> [ "set" | "add" | "selectadd" | "selectclear" | "selecttoggle" ]"
  action as an alternative to the group[0|9] commands  (note that the key modifiers can
  be setup differently from the default)

- Fixed FBI tag floater for planes,
- Added FBI tag canSubmerge for planes. The following rules apply:
    1) If a plane only has the 'floater' tag set to 1, it will land on the ocean surface.
    2) If a plane only has the 'canSubmerge' tag set to 1, it will land on the ocean floor.
    3) If a plane has both tags set to 1, it will obey rule 2.

- Fixed the factory cancelled-build delay bug.
- Fixed units get stuck while guarding factories bug.
- Fixed planes can't find landing pad on large maps bug.
- Fixed in game video creation (default binding F10).
- Fixed a bug causing much metal/energy to be lost instead of shared to allies.

- Smoothed LOS / Radar view.

0.74b2

- Planes can land on water surface if FBI tag floater is set to true.

- Added GROUND_WATER_HEIGHT (78) to get in cob script.
  Same as GROUND_HEIGHT (16) but in water it returns negative water depth instead of 0.

- Units don't slowdown on intermediate waypoints anymore.

- Added mingw compatible crashhandler.

- Fixed sharebox and quitbox for 16 players.
- Fixed FPS mode aiming to the northwest.
- Fixed FPU control word assertion that made spring unplayable with some sound drivers.

- Added sorting options to "/info", you can use names or numbers:
  0 - "off",   disable display
  1 - "ally",  allies  (you, your team, your allyteam, your enemies, then spectators)
  2 - "team",  player team id
  3 - "name",  player name alphabetic sort
  4 - "cpu",   player cpu usage
  5 - "ping",  player ping time

- Added the "maxparticles <value>"       action
- Added the "minimap simplecolors [0|1]" action
- Added the "specfullview [0|1]"         action
  (setting it to 0 gives the same minimap and viewport visibility as the selected team)

- Added "OverheadTiltSpeed" config parameter

- Fixed the unit-limit vs. sharing bug

- Shadow mapping works for SM3

0.74b1

- Linux vs Windows is now synced if binaries are built using gcc 4.0 or higher.

- Games with more then 10 players now work properly.
- Several improvements and fixes for autohosting, including a .kickbynum command.

- Added minimap commands (two modes, see the MiniMapFullProxy config param)

- Added "MiniMapGeometry" config parameter
- Added "TooltipGeometry" config parameter
- Added "TooltipOutlineFont" config parameter
- Added "InfoConsoleGeometry" config parameter

- Added "/resbar [0|1]" action
- Added "/tooltip [0|1]" action
- Added "/specteam <number>" action  (sets the spectator team)

- Added "newAttackMode" and friends to "ctrlpanel.txt"

- Added animated line stippling for queue rendering  (see cmdcolors.txt)

- Cursors can now use TGA and PNG file formats
- Added an optional cursor control file for easier timing/frame control

- Renamed the /layout command to /luaui
- Renamed the "ctrlpanel.lua" file to "gui.lua"

- Added "timewait [seconds] ["queued"]" action
- Added "deathwait ["queued"]" action
- Added "squadwait [count] ["queued"]" action
- Added "gatherwait" action
- Added "gathermode [0|1]" action

- Added a number of features to the LuaUI
  (see Documentation/lua_ui_interface.txt)

- Improved the outline font rendering speed

- numbers in .info list are now team numbers, so they match with '.team X' commands.
- names are now prefixed with 's:' 'a:' or 'e:' for respectively spectators, allies and enemies.
- if spectating, an arrow is displayed in front of the team you are currently watching.

- added Shift and Alt/Meta group selection modifier features
  (Shift adds members to current selection, Alt/Meta toggles them)

- added the  "viewsave <name>"  and  "viewload <name>"  actions
- added GetCameraState() and SetCameraState() to the lua GUI interface

- added "selectcycle [restore]" action 

- fixed queue build rendering (GL_DEPTH_TEST)

- added GetUnitHealth(), GetTeamResources(), and GetCommandQueue() to the lua GUI interface
- enabled loading the "ctrlpanel.lua" file from the VFS

- added "wait queued" and "selfd queued" to the default key bindings
- fixed WAIT behaviour for factories
- enabled queuing of Self Destruction commands
- added a pathetic SELFD cursor

- added "alwaysDrawQueue" and "buildBoxesOnShift" to cmdcolors.txt

- added the "invqueuekey [0|1]" action, and [InvertQueueKey=0] config parameter
- added mouse rocker gestures for immediate mode access when using inverted queue keying

- AIs can query a unit current fuelstorage via GetProperty() with property AIVAL_CURRENT_FUEL (2).
- AIs receive seismic pings via HandleEvent() function with message AI_EVENT_SEISMIC_PING (5).
- The icontype of enemy units is remembered if they are under continuous radar coverage.
- Ghosted buildings under continuous radar coverage don't have an error vector in their position anymore.
- Ghosted buildings also turn into unit icons when far away.

- Improved clickability of unit icons.

- Calling emit-sfx 2048 from a script will now allways fire the weapon. Emit-sfx 4096 will now take over the previous behavior of detonating the weapon at the piece position.

- Added unit FBI tag UnitRestricted to limit the number of a unit type allowed in a game.

- Added CLOAKED (76) and WANT_CLOAK (77) to get/set in cob script.

0.73b1

- added the ability to layout the control panel widget layout with a LUA script
  (uses a file called "ctrlpanel.lua")
- added the "/layout" command for direct interaction with the layout lua script

- Map packs (ie. multiple maps in one archive) are officially unsupported now because of technical reasons.

- Added keyword "dir" to explosiongenerator, this is a vector and can be diferent depending on what created the explosion.
  If created at a weapon impac it is the direction of the impact.

- Added the abillity to call explosiongenerators and weaponfire from within script via emit-sfx command.
  Explosiongenerators to be called via script are defined in the unit TDF file in a section called SFXTypes, with tags explosiongenerator+n=some_explosion
  and then called via emit-sfx 1024+n.  
  Weaponfire are called via emit-sfx 2048+weapon_to_fire.

- added "ctrlpanel.txt" configuration file to control how the Control Panel
  is rendered (x/y icons counts, sizes, positions, prev/next menu icon
  locations, etc...)
- added an option in "ctrlpanel.txt" to render some of the screen text with
  an outlined font. This is a hack, and can cause FPS decreases on slower
  computers (main factor is blended fill-rate)

- added an outline around the minimap

- fixed reclaim exploit where extra metal was gained if you destroyed the building just before it would finish reclaiming.

- added "cmdcolors.txt" settings file to configure control indicator rendering
  (this includes command queue lines and ranges, highlighted unit ranges, the
   mouse selection box, and the selected unit boxes)
- added line width specification for items in "cmdcolors.txt"
- added blending mode specification for items in "cmdcolors.txt"

- removed "NoSound" config parameter in favour of "MaxSounds=0"
- passthru to the NullSound driver if there is a sound driver error

- added a page number to the control panel
- added "buildiconsfirst" command to toggle the order of control panel icons
  (also set the control panel page number to the cmdcolors.txt build color
   when the build icons are being placed first)

- added build range circles for immobile builders when holding shift over them

- added the techLevel variable to UserDef, with automatic detection of the
  tech levels in a mod based on the information in the sidedata.tdf file
- added the "techlevels" action, to save the tech levels to techlevels.txt
  (as well as sending them to stdout)
- display a unit's TechLevel in the tooltip window when cheats are enabled

- key commands now work while the GUI interface is hidden, and the default
  command cursor icon is updated as well
- change the control panel page when a key command accesses an off-page icon
- change the tooltip to reflect the unit being built rather then the builder
  while selecting the build position
- added cycling for command actions when more then one is available
- added "iconpos <#>" action, for positional access to control panel icons
- added "firstmenu" action  (resets the control panel to its first page)

- added "keyset" command for named keysets
- added "keysym" command for custom key symbols
- added "fakemeta" key binding command to provide another modifier

- added SmoothLines and SmoothPoints config parameters  (anti-aliasing)
  (0 = off,  1 = fastest,  2 = don't care,  3 = nicest)

- changed GameInfo so that it always displays map name and mod name

- group AI code now permits multiple AIs per dll/so. This is handled by
  identifying group AIs by a new datatype, 'AIKey', rather than using just
  the dll name. Group AI dlls should now implement GetAiNameList to return an
  array of available AI names in string (const char*) form, terminated by NULL. 
  The existing group AI interface functions GetNewAi, ReleaseAi, and 
  IsUnitSuited now take an unsigned aiNumber as their first parameter: this
  is a zero-based AI index, matching the array returned by GetAiNameList.

- improved default command selection

- added "/water   [0-3]" to control water rendering in-game
  (the optional number is the mode; without the number, it cycles through the modes)
- added "/shadows [0-1]" to control shadow rendering in-game
  (the optional number means off/on; without the number, it toggles)

- Fix mouse-drag-move to make units spread across the front if it's big enough, also somewhat take into account unit sizes. Added CTRL-Move, CTRL-Mouse-Drag(front) move to make units move at the speed of slowest unit.  
- [bugfix] Resource expendature now shows correct pull when economy is stalling.

- - Added transparency suport from texture2 in s3o drawing, requires advanced shading.
- added DualScreenMode and DualScreenMiniMapOnLeft configuration flags. 
    This causes the game view width to be one half of the screen width, so the minimap can take the other half. 
    You will need to spread your spring window across the 2 screens.
    Specifying DualScreenMiniMapOnLeft will place the minimap on the left hand screen, rather than the right (the default)
- geothermal vents with a geothermal unit on top will not create smoke.

- Added the following Unit FBI tags:
	canPatrol=1; Can the unit go on patrol
	canGuard=1; Can the unit guard things
	canAttack=1; Can the unit attack other units
	Reclaimable=1; Determines if a unit can be reclaimed by other units
	noAutoFire=0; (if set to 1, unit will fire once then switch to next target, and needs to be told to fire manually)
	canBuild (can the unit start new construction projects)
	canRepair (can the unit repair other things)
	canRestore (can the unit restore deformed ground)
	canReclaim (can the unit reclaim other things)
	canAssist (can the unit assist construction projects already started)

- added support for teamcolored nanospray (user option). Can be forced off by modder using gamedata/particles.tdf.
- new fbi tag shownanoframe: set to 0 to disable nanoframe while the unit is being built.
- new fbi tag shownanospray: set to 0 to disable nanospray.
- new fbi tag nanocolor: color of the nanospray and the nanoframe in red green blue format (white = 1 1 1).
  (These three fbi tags apply to the unit itself; not to the unit it's building.)

- linux vs linux is now synced, independently of the distribution & gcc version
- if host finishes loading before client executable is started spring no longer loses connection

- added the "say" action  (does work with the .give command)

- changed .clock and .info to local commands (/clock and /info now work as well)

- replaced key binding code with a more flexible solution:
  * can specify key for almost all commands (including unit builds)
  * can specify modifiers (Alt, Ctrl, Meta, Shift)
  * can bind the same key to more then one action
    (first available action is used, handy for build orders)

- added internal default bindings  (see rts/Game/UI/KeyBindings.cpp)
- added "unbindall"                command
- added "unbindKeyset    <keyset>" command
- added "unbindAction    <action>" command
- added "unbind <keyset> <action>" command
- added "bindbuildtype ..."        command  (aka: auto-binder)

- added "hotbind"   action for the control panel icons  (Ctrl+insert)
- added "hotunbind" action for the control panel icons  (Ctrl+delete)

- added /keysave and /keyload commands
  (keysave saves to "uikeys.tmp", not "uikeys.txt")
- added /keyprint, /keydebug, /keysyms, and /keycodes commands
  (these commands send information to stdout)

- added ability to specify item in icon mode buttons via its binding
  (ex:  "firestate 0" binding will set firestate to hold fire)

- added ability to specify item in combo box buttons via its binding
  (ex:  "aiselect Radar AI" binding will assign the selected units to the Radar AI)

- pseudo mouse actions now discard key repeats

- added command queue icons
- added build command queue directional lines
- added AreaAttack command queue area display

- added game info panel (with "gameinfo" and "gameinfoclose" actions)  (i)

- versionned the "archivecache.txt" filename (ex: "ArchiveCacheV4.txt")

- Quit and Share menus close when they receive ESC

- added "drawlabel" action  (avoid the double-click, and key repeats)

- added "screenshot png" action

- added "chatAll"        action
- added "chatSwitchAll"  action
- added "chatAlly"       action
- added "chatSwitchAlly" action
- added "chatSpec"       action
- added "chatSwitchSpec" action

- added tracked unit rotation
- added Average and Extents tracking modes
- added "trackoff"  action
- added "trackmode" action

- added "viewfps" action     (Ctrl+f1)
- added "viewta"  action     (Ctrl+f2)
- added "viewtw"  action     (Ctrl+f3)
- added "viewrot" action     (Ctrl+f4)

- added "firestate" action
- added "movestate" action   
- added "prevmenu"  action   (,)
- added "nextmenu"  action   (.)
- added "buildunit_<name>" action
- added "deselect" action
- added "select <selection criteria>" action  (redundant)

- added new water rendering mode, refracting+reflecting but without the heavy dynamic simulation.
- Added '--quit=T', '/quit T' commandline option to auto-quit spring on game over or after T seconds.
- Added '--minimise', '/minimise' commandline option to start spring minimised.
- added gradual feature reclaiming, see mantis #262
- support for rotating buildings by 90 degrees, bind to "incbuildfacing" and "decbuildfacing" (bound to ']' and '[' by default)
- modified the ground attack command for queued attack and area attack patterns
  (the last queued attack position is repeated for backwards compatibility)
- removed the height factor from AirCAI ground attack command drawing
- added word completion, with dot commands, player names, and unit names
  (does partial match reporting, and the unit names are only active for .give commands)
	-> "/<tab>" will show local commands
	-> ".<tab>" will show remote commands
- added console input history buffer
- added [DoubleClickTime=200] config parameter
- added [WindowEdgeMove=1], for folks who run windowed with fullscreen size
  (ex: good with X11/icewm to allow moving between virtual screens,
       and to avoid display lockups during crashes)
- disabled rendering while inactive (minimized)
- added a null sound driver [NoSound=1]
- merged global synced/unsynced "drawdebug" variables
- added vsync for GLX
- windows users can use [VSync=-1] to use system default
- allow selection of vsync rate

- [feature] A new group AI, "MexUpgrader AI" has been added. See http://taspring.clan-sy.com/wiki/MexUpgrader_AI for more info.
- [feature] Custom unit icons are supported. See http://taspring.clan-sy.com/wiki/CustomUnitIcons for more info.
- [bugfix] 'Quit and Resign' dialog now also appears when you're hosting, and stays hidden when the game is over.
- [bugfix] Commands on enemy units (attack, reclaim) get canceled automatically when the unit leaves LOS / radar.
- [change] 'Quit and Resign' dialog now only gives everything to allies (and not enemies) if they are still alive.
- [change] The LOS drawing mode is remembered when you switch back and forth to others (e.g. metalmap, heightmap).
- [change] Radar and jammer range is shown by default if you press 'L'.
- [change] Radar and jammer toggle ';' happens instantly.

- New weapon tdf tag ColorMap, used for some weapon to define the color shift during their lifetime
	Used in flamethrower.
	Tag specify either a bitmap file, ex: "colormap = mycolormap.tga;"
	or defines the color directly in the weapon file in rgba order where 1 is full brightnes, 
	ex: "colormap=1 0 0 1 0 0 0 1" start with red color and shift to black at the end.

- New weapon tdf tag rgbcolor2, used to make laser weapon have different color at the center, defaults to white.
- New weapon tdf tag corethickness, how thick the inner color of a laser is, this is a percentage value, default is 0.25
- New weapon tdf tag laserflaresize, size of the flare for laser weapons, multiplier for thickness, default 15.
- New weapon tdf tag LargeBeamLaser, if set to 1 a beamlaser uses an alternate graphics effect.
	New tags usable for a LargeBeamLaser is:
		tilelength: defines the length before the texture used is repeated (tiled).
		scrollspeed: how fast the beam apears to be moving towards it target.
		pulseSpeed: how fast the pulsating effect at the beam start is.

- Texture tag added to the explosiongenerator for HeatCloud and Dirt
- New weapon FBI tags, texture1, texture2, texture3, texture4, the texture must be defined in resources.tdf in the projectile section.
	MissileProjectile (standar rockets and guided missiles):
		texture1 = flare
		texture2 = smoke
	LaserProjectile:
		texture1 = laserbeam
		texture2 = Start and end of the beam (half of the texture used at either end.)
	BeamLaserProjectile:
		texture1 = laserbeam
		texture2 = Start and end of the beam (half of the texture used at either end.)
		texture3 = muzzle flare
	LargeBeamLaserProjectile:
		texture1 = laserbeam
		texture2 = Start and end of the beam (half of the texture used at either end.)
		texture3 = Extra graphical effect at the start of the beam.
		texture4 = muzzle flare
	StarBurstProjectile (starburst weaponry, like nukes):
		texture1 = flare
		texture2 = smoke
		texture3 = flame
	EmgProjectile
		texture1 = texture for the projectile
	LightningProjectile
		texture1 = texture for the lightning
	ExplosiveProjectile (used in most plasma cannons)
		texture1 = texture of the projectile, will be blended multiple times.


- tdf tag duration is used for laser weapons.
- tdf tag rgbcolor is used for EmgProjectile and ExplosiveProjectile.
- tdf tag intensity is used for EmgProjectile and ExplosiveProjectile.
- New weapon tdf tag soundstartvolume and soundhitvolume.
- New weapon tdf tag size, defines the visible size of projectiles.
- New weapon tdf tag CollisionSize, defines the physical size of projectiles, percentage of size for flamethrower and absolute value emg, plasma and laser.
- New weapon tdf tag sizegrowth, defines how fast flame projectiles will grow in size.
- New weapon tdf tag flamegfxtime, this makes the flame projectile stay alive as a graphical effect (doesnt do any damage) after it has reached maxrange.
	Default is 1.2 which makes it stay alive 20% beyond maxrange.
- New weapon tdf tag AvoidFriendly, if set to 0 units will not try to avoid friendly units in their line of fire.
- New weapon tdf tag CollideFriendly, if set to 0 this weapon will not hit friendly units.
- New weapon tdf tag ExplosionSpeed
- edgeEffectivness added for weapons

- Added limited fuel settings for units (only work for aircrafts so far, need a good mechanism for refueling other stuff)
-  New fbi tag MaxFuel, max fuel in seconds that the unit can carry, default 0 = unlimited
-  New fbi tag RefuelTime, how long time it takes to fully refuel the unit, default 5
-  New fbi tag MinAirBasePower, minimum build power an airbase unit must have for the aircraft to land on it, default 0
-  New fbi tag WeaponFuelUsage<1-16>, how much fuel in seconds that firing the weapon takes from the owning unit, default 0
-  New fbi tag SeismicDistance, give the unit a seismic sensor for detecting movement through the ground.
-  New fbi tag SeismicSignature, The magnitude of seismic disturbance when this unit is moving, default sqrt(mass/100).
- New COB "get"/"set" constant: 75 MAX_SPEED get/sets the max speed of the unit (multiplied with 64k)

- New archive format (for map/mod development): *.sdd. It is a directory, but it is treated as an archive just like *.sdz and *.sd7.
- New map format SM3, currently supported for testing purposes.


0.72b1

- Bos/Cob script for units can now animate the death of the unit. Just have the Kill function return after a while instead of directly and return wreck level in return value instead of in function argument.
- Fixed the com dies, game ends exploit: sharing your com now kills you
- Fixed a bug causing clients not to quit when server quits
- Fixed crash bug normally resulting in dialog with "no rtti data"
- ".give" cheat command doesn't desync the game anymore
- Made "Team0() is no more" message customizable by modders (see XTA for an example).
- Added weapontag "paralyzetime", controls how long a unit can maximaly be paralyzed after being hit by this weapon, default 10
- Adds some new options in the settings program for scroll speeds
- Added new fbi tag "levelground" set this to 0 to prevent a building from leveling ground beneth it. Make sure that the model continue some way below ground so that they dont look like they float in air.
- Fixed torpedo aircrafts not being able to attack subs
- Added support for decals on ground below buildings
-  New fbi tag UseBuildingGroundDecal, set to 1 to enable decals for building
-  New fbi tag BuildingGroundDecalType, name of a bitmap in unittextures folder
-  New fbi tag BuildingGroundDecalSizeX,BuildingGroundDecalSizeY, size of decal (same scale as footprint for unit)
-  New fbi tag BuildingGroundDecalDecaySpeed, how fast the decal will fade out after the building has died, default 0.1 (fades out in 10s)
- New fbi tag ShowPlayerName, if set to 1 the tooltip shows the player name instead of the unit description
- Fbi tag HideDamage now actually works: set it to 1 to hide most details in the unit's tooltip from enemies
- New weapon tag "rgbcolor", overrides the old color1 and color2 tags if it exists, gives the color in red green blue format (1 1 1 = white).
- Removed old plasmarepulser system and replaced it with a more generalized shield system
-  New weapon tdf tag IsShield, if 1 mean the weapon is a shield and now a weapon
-  New weapon tdf tag shieldrepulser, 0=destroy projectile,1=repulse (bounce) projectile
-  New weapon tdf tag smartshield, 1=shield doesnt affect allies weapons
-  New weapon tdf tag exteriorshield, 1=shield doesnt affect weapons fired from within shield
-  New weapon tdf tag visibleshield, 1=see a visible shell representing the shield
-  New weapon tdf tag visibleshieldrepulse, 1=see a beam showing when shield repulses something
-  New weapon tdf tag shieldenergyuse, how much energy the shield use when repulsing/destroying something
-  New weapon tdf tag shieldforce, how hard shield can accelerate some sort of projectiles away
-  New weapon tdf tag shieldradius, size of shield effect
-  New weapon tdf tag shieldmaxspeed, maximum speed the shield can push some sort of projectiles away
-  New weapon tdf tag shieldpower, how much power the shield can store, power is drained by the affected weapons damage, 0=infinite
-  New weapon tdf tag shieldpowerregen, how fast the shield regenerates power
-  New weapon tdf tag shieldpowerregenenergy, how much energy the shield uses when regenerating power
-  New weapon tdf tag shieldintercepttype, which types of weapon the shield can affect (bitfield)
-  New weapon tdf tag interceptedbyshieldtype, which types of shields can affect this weapon, if (shieldInterceptType & interceptedByShieldType) is not zero the shield can affect the weapon, default 1 for plasma, 2 for laser, 4 for missiles, 0 for other
-  New weapon tdf tag shieldgoodcolor, color of shield when power is full
-  New weapon tdf tag shieldbadcolor, color of shield when power is empty
-  New weapon tdf tag shieldalpha, how visible the shield shell is with visibleshield=1
- Added auto zooming using scroll + Left ALT key  (patch from colorblind)
- Added simplified LOS drawing (patch from colorblind)
- Fixed mouse speed problems in windows with holding shift.
- Demo filenames with spaces in them work again.
- Changed non-positional sound behavior: only selected units give non-positional sound
- Missile weapons no longer tracks to exact position of non flying units (make missile units weaker against radar targets)
- Stun damage units now receives 1/10 of normal experience and no experience for attacking already stunned units
- Units no longer receive experience for "overkill" damage 
- Adds support for using arbitary team colors, teamcolor textures for 3do need to be slightly changed to accomendate this (see the base texture archive to see how its done)
- Increased max camera zoom out (zooming to far can cause slowdowns/graphical glitches)
- Added Radar group AI from colorblind: It notifies the player of incoming enemy units.
- Added custom explosion generator: It can be enabled using "explosiongenerator=custom:SomeExplosionGeneratorName" in the weapon TDF. See the wiki page http://spring.clan-sy.com/wiki/CustomExplosionGenerators for more info.
- Tab will now bring zoom out to show all map in any camera mode, tab again zooms back to the mouse cursor.
- Added GetGravity(), GetUnitDefHeight() and GetUnitDefRadius() to AI interface
- Mod can now be selected in the single player menu.
- Checksums of the map and mod are checked on game start.
- Mod can be selected when starting the spring exe directly.
- Various other small changes.

0.71b1

- Added new water renderer
- Fixed lasers firing two projectiles at once, efficiently doing double damage.
- Fixed several exploits with FPS mode.
- Added new fbi variable CanLoopbackAttack, only affects fighter aircrafts, if 1 this will enable the player to set the aircraft to do an immelman turn after firing instead of overflying the target.
- Changed so units in maneuver mode will abort anything that moves them further than a certain distance from the patrol path
- Added statistics to the end game dialog
- Units with S3O models can explode into pieces.
- Added a " all" option to .give to give all units in loaded mod
- Fixed autoheal being about 4x to fast (or measuring heal per 0.25s depending on how one sees it)
- Improved exception handling and crashreport handling in windows.
- Added DateTime to the [VERSION] block in the demo recorder file
- Removes los from units being transported
- To disable terrain deformation: 
   Mapmakers: Put 'NotDeformable=1' in the .smd.
   script.txt: Put 'DisableMapDamage=1' in with the other properties.
- VSync can be disabled with the settings application.
- Several other smaller fixes and improvements.
- Unit reply sounds are non-positional and have a seperate volume setting in the config application. Their volume is also affected by the global volume.

0.70b3

- Shift/ctrl do not change rotation speed in rotating camera mode anymore.
- Submarines work again.
- Fixed attack claxxon.
- Fixed units getting stuck in buildings.
- Added possibility to bind mouse1, mouse2 and mouse3 to keyboard.
- Fixed shift+letter bug.
- Fixed Pathing Map (F2 view) bug.

0.70b2

- Fixed some (debug) message colors.
- Fixed keyboard layout problems.
- Fixed repeat orders/high trajectory etc not indicating their current state correctly
- Fixed problem with reading hpi archives
- Added custom SDL.dll (1.2.9) with refresh rate patch from SDL CVS, should help with the 60hz issue
- Fixed right shift/ctrl while scrolling.
- Fixed shift/ctrl while middle click drag scrolling.
- Fixed map loading by less strict tdf parser.
- Don't crash on parse errors, but show an error message instead.

0.70b1

- First use of crossplatform code! This required a lot of bugfixing and changes, which are not mentioned here.
  Among these changes are switches to using boost, SDL, freetype, instead of Win32 SDK + DirectX. For a full list of changes, see the subversion log.

- XTA Pimped Edition Version 3, a version of XTA with high detail models, is used as the default mod now.
- Binding for mouse button 4/5 added (defaults to Z and X), so you can set build spacing.
- You can enable advanced unit rendering without enabling shadow mapping (in the settings app).
- Various resource files are now read from gamedata/resources.tdf instead of hardcoded into the game exe.
- Added "dontland" unit tag, to specify aircraft that should not land. Don't use this on transport units!
- std::sort related bug fixed in projectile handler
- Fixed flipped features, they are now rendered exactly the same as units.
- A few new COB "get" constants:
   70 MAX_ID             returns maximum number of units - 1
   71 MY_ID              returns ID of current unit
   72 UNIT_TEAM	         returns team of unit given with parameter
   73 UNIT_BUILD_PERCENT_LEFT   basically BUILD_PERCENT_LEFT, but comes with a unit parameter
   74 UNIT_ALLIED        is unit given with parameter allied to the unit of the current COB script. 1=allied, 0=not allied
- Fixed login packets being sent every frame instead of once a second when trying to connect
- Fixed ghosted buildings option.
- Fixed isairbase=1 unit tag.

0.67b3

-AI dll's can be used with startscripts again

0.67b2

-Fixed black map bug
-Impulsefactor now affects ground damage

-- Lobby changes

- battle hosts can now use /ring <username> command on players participating in their battles
- fixed problem with notification dialog switching focus back to application
- added /rename command which will rename your account (so that people who wish to add clan tags
  in front of their names don't have to reregister and lose their ranks). Player names may now also 
  contain "[" and "]" characters.
- fixed small bug in demo script parser
- added /mute, /unmute and /mutelist commands for admins/mods
- clients behind same NAT now get local IPs instead of external one (from the server).
  Note that some issues still exist with currently implemented nat traversal method,
  so players hosting battles are advised to forward their port nonetheless.

0.67b1

-Catching AI exceptions can be disabled with the settings app.
-Fixed access-violation bug when creating sky.
-Fixed numerous division by zero bugs.
-Fixed default cursor for indestructible features.
-Beamlaser uses thickness value.
-COB support for Getting/Setting veteran level and unit speed.
	The returned veteran level is unit experience multiplied by 100
	Unit speed can be set to something nonzero only when the current speed is nonzero, it can always be set to zero.
-Overhead camera can be tilted with control key + mousewheel now.
-Debug message verbose level can now be set with the settings application. (Modified update by Alantai)
	This will only affect AI console messages.
-Ghosted buildings can now be disabled by the lobby. They are enabled by default.

0.66b1

-Fixed transport units being able to load themself.
-Fixed gunship like aircraft always having the same altitude
-Fixed torpedo aircrafts now being able to attack underwater targets
-Support for upright, flammable and indestructible feature tags
-Fixed division-by-zero bug in bomb-dropper.
-Fixed access-violation bug in pathfinder.

-Added new s3o unit format


-Added new tags to .fbi file
	autoHeal	-	health per second that a unit allways will be autohealed for (default 0)
	idleAutoHeal	-	health per second that a unit will be autohealed for whenever its idling (default 10)
	idleTime	-	time in ticks without any action before a unit is considered idling (default 600)
-Added new tags to weaponfile file
	NoSelfDamage	-	Units take no splash damage from its own weapon
	impulsefactor	- 	Explosion impulse will be multiplied by this


-Added read access to the virtual filesystem for the AI
-Further AI interface updates will now be backwards compatible (old AI's will not break on a new spring release)
-Added user input functions from Alik to the AI interface
-The global AI will now be notified if a unit changes team.
-UnitDestroyed/EnemyDestroyed get the attacker unit id if any (by submarine)


0.65b2

-Fixed crash with factories closing at the moment they die

-Fixed sync error on water maps
-Increased max players/teams to 32/16

-Added support for selecting which globalai-dll to use when starting spring.exe directly
-Added support for having more than one lua startscript. Put them in subfolder "startscripts".

-Added UnitMoveFailed to global AI interface. Called when ground units fail to move to their destination.

0.65b1

-Fixed crash bug involving radars on non square maps
-Fixed crash bug involving gunships landing on repairpads that get destroyed
-Fixed crash bug involving large units exploding

-Fixed resurrected building not having a footprint
-Increased time to reclaim wreckages
-Fixed acceleration for units not being correctly set from fbi file
-Fixed slope of map not getting updated properly for craters
-Fixed sonar jamming
-Can now switch viewed team when spectating using keys 1-9
-Added faster reload speed for experienced units
-Added support for multiplayer replays where several players can watch a reply at once
-Added option for minimap to show colors only based on owned(green),ally(blue),enemy(red)

-Added new FBI tag TransportMass, this is the maximum weight a tranporter can transport, default 100000
-Added new FBI tag Mass, this is the weight of the unit, default is metalcost of unit
-Added new FBI tags to set the control variables for aircrafts
-Added new FBI tag OnlyTargetCategory<weaponnum>, sort of like badtargetcategory but the weapon can only target units with these categories,toairweapon in weaponfile is the same as OnlyTargetCategory=VTOL; default is all categories
-Added bindings for creating startscripts in lua. See testscript.lua for an example. Note that you can only have one script (must be called testscript.lua), and that it is possible that the interface will change.

-Fixed bugs in the AI interface GetMetal* and GetEnergy* functions, they returned the values of the human player.
-Moved shared functions in the GroupAI callback and GlobalAI callback to a new AICallback interface. For AI developers: This means a small adjustment of your current code will be required to get it compiled again.

0.64b1

-Solved troublesome crash bug involving several pointers to a single object
-Fixed crash when calls such as get PIECE_XZ were used in the Create function of a unit

-SetSfxOccupy now updates correctly when unit is being transported
-Added support for aircrafts auto landing to repair when health gets low
-Removed autorepair while unit is flying
-When a unit has finished firing a burst the script function EndBurst<weaponnum> will now be called, use this instead of Fire<weaponnum> to switch pod/barrel etc to fire from to lessen friendly fire incidents
-Removed warning message when using transports

-New map smd tag map/voidwater, creates a void where there would normally be water, this is a purely graphical effect,default 0
-New command .give, .give <num> <unitname> gives you num units of type unitname, requires cheats to be on, only use in singleplayer
-Added support for aircrafts auto landing to repair when health gets low
-Added command .kick <playername> that server can use to kick out players from game
-Updated global AI interface with GetNumUnitDefs() and GetUnitDefList()

0.63b2
-Fixed crash when using new formation move commands
-Script interpreter now warns about incorrect piecenames in scripts instead of crashing

0.63b1

-Fixed multi delete error in LosHandler
-Fixed crash with features defined in mapfile

-Fixed problem with having more than one map in the same archive
-Pathmap display (F2) can now also show where selected building can be built (slow though, esp with large maps and buildings)
-Spring now remember the last a: etc prefix used in chat msgs
-Resurrecting a unit now cost half the energy of building it
-Changed so spring can keep several different path precalcs on disk for a single map, this will save recalculations for ppl switching mods a lot

-Added CMD_WAIT command to have units wait for a transport. Can be issued with the W key, can also be used to que up stuff and then releasing the unit to do it.
-Added tag "LIGHT\\SpecularSunColor" to smd file, modifies the color of the specular highlights on units, defaults to LIGHT\\UnitSunColor
-Added tag "isAirBase" to unit FBI file, sets if the units that are being transported will be stunned or not, defaults to 0.
-Spring can now use up to 16 weapons, use Weapon<1-16> and BadTargetCategory<1-16> in fbi file and QueryWeapon<1-16> AimWeapon<1-16> AimFromWeapon<1-16> FireWeapon<1-16> functions in scripts. Primary,secondary etc is aliased to weapon 1-3 but try not to mix old and new names in the same unit.
-Added new fbi tag WeaponSlaveTo<x>=y, this will force the weapon x to use the same target as weapon y (y must be a lower numbered weapon than x). Might be usefull for say a mech like unit with many different weapons that should target in the same direction.
-Added new fbi tags WeaponMainDir<1-16> and MaxAngleDif<1-16>. WeaponMainDir is a vector and defines the center direction of a cone in which the weapon can aim while MaxAngleDif defines how broad the cone is. Default WeaponMainDir = 0 0 1; (forward) and MaxAngleDif=360; (can fire everywhere)
-Added support for loading TA:K COB files and implemented the TA:K-specific opcode play-sound.
-Added some simple formation handling to the standard groups, hold alt on move to make them form an aproximate square and drag mouse to make them form up behind a front
-Added missile tdf tag wobble, this is in the same as turnrate except that it will turn in random directions instead of toward the target,default 0
-Added missile tdf tag trajectoryHeight, this sets in how high an arc the missile will move toward the target,0 = straight, 1=45 degree above, can be anything>=0, default 0
-New start file tag LimitDgun, if 1 it restricts dgunning to a radius around your startpos, size depending on mapsize, default 0
-New start file tags AllyTeam<x>/StartRect<Top.Bottom,Left,Right>, allows host to define where different allyteams might start on the map, given in the range 0-1 and scaled with map size
 
0.62b1

-Fixed crash when units exploded

-Mines no longer block terrain and can be overun (and if you are crazy built on top of :) ), removed ability for mines to hold fire since they would be completly undetectable.
-Heightmap view (F1) now updates correctly when terrain changes
-Pathcost view (F2) now works in non cheating mode but will then only show terrain modifiers
-Fixed gunships being able to fly below ground when comming in on step slopes
-Auto sharing now starts at 99% instead of 100% at startup meaning that there is less chance of the team losing resources because someone forgets to set it

-Installer associates .sdf files with spring.exe
-Spring.exe now accepts a demo filename on the commandline and starts playing it directly
-Added tag "MAP\\DetailTex" to smd file to specifiy map specific detail texture, default is bitmap\detailtex2.bmp, map specific textures should be placed in maps directory.
-Added possibility for surface of units to be shiny/reflective by using the alpha channel of the textures
-Addded command .take, will take the units from all teams allied with you that is missing a player (due to disconnect etc) and transfer them to your team

0.61b2

-Added tag "WATER\\WaterTexture" to smd file to specify another texture for the map than the default ocean.jpg (mapspecific water textures should be in the maps directory)
-Added tag "WATER\\WaterSurfaceColor" to smd file, changes the surface color of the water when using reflective water (default is 0.75 0.8 0.85 ).
-Fixed error msg while loading certain jpeg files
-Fixed spawn.txt not being readable from archives
-Fixed problem with reading large files from sd7 archives (such as skyboxes)

0.61b1

-Fixed crash in weapon aiming
-Fixed some other crashes
-Fixes some memory errors

-Fixed aircrafts landing outside map
-Fixed infinitly rotating starburst missiles
-Fixed different tracks getting superimposed on each other
-Plasma cannons should now detect mountains in the fire path better
-The generated path information for maps is now stored zipped in the subdirectory "paths"

-Added scar marks on map to explosions
-Can now control spacing when rowbuilding using the forward/back buttons (xButtons) on mouse
-Spring now attempts to find bmp or jpg files in bitmaps\loadpictures to use as background while loading
-Some messages now show their location on the minimap
-Moved spawn.txt into xta archive by default to allow replacements by other mods, and replaced it with "Storm Easy AI v1.0"
-New weapon tdf value, TargetMoveError, makes the weapon worse at hitting moving targets, default 0
-New weapon tdf value, MovingAccuracy, replaces the normal accuracy value while the unit is moving, defaults to normal accuracy of weapon
-New weapon tdf value, thickness, controls the thickensess of lasers, default 2
-New weapon tdf value, intensity, controls the alpha value of lasers, default 0.9
-New smd terraintype value, receivetracks, if this is 0 there wont be any tracks from units on this terrain type, default 1

0.60b1
-Added tag SmoothAnim=0/1 to the fbi. If it is 1, unis will use animation interpolation
-Added MAP\\WATER\\WaterPlaneColor tag to maps to set the color of the waterplane beneath the ground
-Added MAP\\ATMOSPHERE\\SkyBox tag to maps to use a dds cubemap as a sky instead of the cloud rendering
-Added an optional BuildPic tag to the units so they can use other than pcx buildpics
-Fixed crash when unit closed in on their destination

-Slopes are now calculated differently
-Random start order should now be more random
-Fixed commiting delayed animations before using getunitval
-Radar now jams everyones radar including your own. We will see how this turns out.
-New map format, adds ability to read texture from external (shared) files and a new terrain type overlay map
-Made ballistic weapons range somewhat more dependent on relative height of weapon and target
-Paralyzer tag for weapons now work
-CanCapture tag for units now works
-HighTrajectory now requires a HighTrajectory tag in the unit file (0=only low, 1=only high,2=choose)
-Ground under DT/FW get same kind of protection as under buildings, we will see how it works out
-"Slow" explosions, stuff far away from big explosions will have their damage delayed a bit

-Added globalai interface and changed groupai interface a bit
-Added resurrection capability
-Added support for regular zip archives. Using extension "sdz" to avoid confusion.
-Added support for 7zip archives. (http://www.7-zip.org/). Using extension "sd7" to avoid confusion. Note that it is probably not a good idea to use solid archives since Spring does not access the files sequentially.
-Added beamlaser type weapon
-Added possibility of units leaving tracks on map
-Added some new options to the game start file
-Added new camera mode rotatable overhead camera
-Added Flare capability to units to decoy incoming missiles

-Added boot option for battleroom host
-Hopefully fixed unit sync and some other bugs in battleroom

0.51b1
-Fixed a cob animation related crash
-Fixed crash using "simple formation ai"

-Fixed auto resource sharing, could share to enemies or not at all before
-Floating features now works
-Con air now stay within radius of build object better
-Spectators can no longer select start pos
-Yet more pathfinding/movement fixes
-Fixed timeout when host calculating paths
-New ingame command for host .nopause , prevents player from pausing game. Also harder to spam log with changespeed msgs now.
-Changed targeting calculations, now switch from badtargetcategory targets faster and never switch to them from other sort of targets even if those go out of los/radar
-Changed so several units cant reclaim a feature at once
-Flakker like units can now target fast units better

0.50b2

-Changed default DamageModifier to be 1 instead of 0
-Fixed so units no longer can dip slightly into lava and explode
-Adds a random enemies script for those that really want to test in single player. The enemies are read from spawn.txt (frame/enemyname pairs) and spawns at startpos 1-3 randomly

0.50b1

-Added support for set/get of unit variable ACTIVATION (allowing solars to close under attack for example)
-Added call to cob function SetMaxReloadTime for better ta unit compatibility
-Added stack boundary checking to cob interpreter
-Fixed buffer overrun problems in the sunparser
-Fixed threads contending over single global netbuf (hopefully no more netmsg errors)
-Now connects from the same udp port as connecting to (semi random before)

-Units can no longer move over infinite sloops
-Improved the pathfinder/movesystem
-Contruction units can no longer repair themselves
-Repair/Build/Reclaim now turn of cloak
-Unit paths are now only visible when cheats are enabled in debug mode
-F2 now shows the map from a pathfinding perspective if cheats are enabled
-Fixed grass not being drawn
-Previously visible buildings now stays on the map in a ghost state

-Added support for larger maps
-Added some more range circles
-Added keyboard bindings for mousewheel (pageup/down as default)
-Added guard order to aircrafts
-New .smd command MAP/WATER/WaterDamage. Indicates the amount of damage per second units take for being in "water". Make it >1000 to prevent ground units from entering water entirely, >10000 prevents hovers from moving over water.
-New in game commands for host .setmaxspeed .setminspeed sets the maximum and minimum game speeds

0.41b1

-Removed log spam with Use of GetPieceDir..
-Fixed "Error looking up server from ip" errors when trying to connect
-Fixed zero size units bug
-Can no longer overflow network buffer with large build orders
-Non square maps no longer crash
-Fixed some random crash bugs
-Added more filtering to the server and clients to filter out invalid net msgs

-Host can now force start the game with ctrl+return if not everyone show up
-Fixed repeat order for factories
-Units can no longer move onto terrain they cant move off (boats on land etc)
-Units can no longer die due to getting outside map
-Changed the alignment on buildings, fixes two buildings qued beside each other ending up blocking each other
-Buildings no longer decay when builder has slow animation
-Radar/jammer units now correctly updated when changing team

-New .smd value, MAP/AutoShowMetal. Set it to 0 if you dont want players to switch to metalmap view when selecting an extractor. (because you have created visible metal deposits on the map)
-New .smd value, MAP/MapHardness. Set how hard it is to create craters in map, default 100.
-Made it slightly easier to build buildings on slopes
-Made it somewhat harder to dig deep holes

-- Lobby changes

-Added extended ascii support in chatrooms.  Can now use accent characters
-Added test button to battle host menu. It will tell the server to try and conncet to you on the port you specified, letting you know if others will be able to as well.
-Now can tell which battles are in progress, and which are still open
-Fixed bug that allowed more than the max number of players into a room
-Added ability to launch a browser when links are sent in a chatroom
-Added unit syncing.  Now if users have different units, the differences are disabled
-Fixed a bug that allowed invalid log in names to be submitted

0.40b2

First public release
