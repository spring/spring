# -*- python -*-
# vim: syntax=python
import sys,os

### basis for the revision string
base_rev_major = "0."
base_rev = base_rev_major
master_repo = 'git://github.com/spring/spring.git'

c = BuildmasterConfig = {}
c['slaves'] = []
c['builders'] = []
c['schedulers'] = []
c['status'] = []

toolchain_location = '../../buildbot/slave/win32.cmake'
mingwlibs_location = '/slave/mingwlibs'

####### build properties

c['properties'] = {
	'branch': 'master',    #default branch name
	'config': 'default',   #default build config
}

def WithConfig(fmt):
	assert fmt.count('%s') == 1
	return WithProperties(fmt, 'config')

def WithBranch(fmt):
	assert fmt.count('%s') == 1
	return WithProperties(fmt, 'branch')

####### build configs
common_win_opts = ' -DCMAKE_TOOLCHAIN_FILE:STRING=%s -DMINGWLIBS=%s' % (toolchain_location, mingwlibs_location)

build_configs = {
	'debug2'    : '-DCMAKE_BUILD_TYPE=DEBUG2',
	'default'   : '-DCMAKE_BUILD_TYPE=RELWITHDEBINFO',
	'profiling' : '-DCMAKE_BUILD_TYPE=PROFILE',
	'syncdebug' : '-DCMAKE_BUILD_TYPE=DEBUG2 -DTRACE_SYNC=true -DSYNCDEBUG=true',
}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
#from spring import SpringNotifier

# import the pw vars from another file. this way we can keep config in git
import passwords

# the `jobs' property is the -j argument to make on this slave
c['slaves'].append(BuildSlave("testslave", passwords.testslave, max_builds=1, properties={'jobs': 4, 'load': 6}))
c['slaves'].append(BuildSlave("macosx1", passwords.macosx1, max_builds=1, properties={'jobs': 1}))
c['slaves'].append(BuildSlave("koshi1", passwords.koshi1, max_builds=1, properties={'jobs': 2 }))
c['slaves'].append(BuildSlave("abma1", passwords.abma1, max_builds=1, properties={'jobs': 1}))
c['slavePortnum'] = 9989
win_linux_slaves = ["koshi1"]

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()


####### SCHEDULERS

def changeIsImportant(change):
	for name in change.files:
		if (name.endswith('.cpp') or name.endswith('.c') or
		    name.endswith('.hpp') or name.endswith('.h') or
		    name.endswith('CMakeLists.txt')):
			return True
	return False

from buildbot.scheduler import Scheduler, Nightly
c['schedulers'].append(Scheduler(
	name="full-sched",
	branch="master",
	treeStableTimer=60,
	fileIsImportant=changeIsImportant,
	builderNames=["full-windows", "full-linux", "full-macosx"]))

c['schedulers'].append(Nightly(
	name='nightly',
	branch='master',
	onlyIfChanged=True,
	fileIsImportant=changeIsImportant,
	builderNames=['cppcheck', 'doxygen'], hour=6, minute=0))

####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import Compile, ShellCommand, WarningCountingShellCommand, WithProperties
from buildbot.status.builder import SUCCESS, FAILURE, WARNINGS

class BuildDocs(ShellCommand) :
	name = "execute doxygen"
	description = ["generating doxygen documentation"]
	descriptionDone = ["docs generated"]
	command = ["/bin/sh","./buildbot/slave/update-docs.sh"]

# common build config steps ---------------------------------------------@

class BuildConfig(Compile):
	name = 'buildConfig'
	warnOnWarnings  = True
	description = [WithConfig('building %s config')]
	descriptionDone = [WithConfig('built %s config')]
	command = ['make', '--no-print-directory', '-k', WithProperties('-j%(jobs:-1)s'), WithProperties('-l%(load:-)s'), '-C', WithConfig('build/%s')]

class CreateBuildDir(ShellCommand) :
	name = "build dir create"
	haltOnFailure = True
	description = [WithConfig('creating dir %s')]
	descriptionDone = [WithConfig('%s dir created')]
	command = ['./buildbot/slave/create-build-dirs.sh', WithConfig('%s'), WithBranch('%s'), None]

	def __init__(self, extra_opts = '', **kwargs):
		self.extra_opts = extra_opts
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(extra_opts = extra_opts)

	def start(self):
		#substitute the correct (cmake) arguments for the configuration
		self.command[-1] = build_configs[self.getProperty('config')] + self.extra_opts
		ShellCommand.start(self)

class CreateInstaller(ShellCommand) :
	name = "create installer"
	description = [WithConfig('creating installer %s')]
	descriptionDone = [WithConfig('%s installer created')]
	command = ['./buildbot/slave/make_installer.sh', WithConfig('%s'), WithBranch('%s'), mingwlibs_location]

class RsyncStuff(ShellCommand) :
	name = "rsync"
	description = [WithConfig('rsyncing %s')]
	descriptionDone = [WithConfig('rsync %s done')]
	command = ['./buildbot/slave/rsync.sh', WithConfig('%s'), WithBranch('%s')]

class UpdateVersion(ShellCommand) :
	name = "update version"
	description = [WithConfig('updating version %s')]
	descriptionDone = [WithConfig('%s version updated')]
	command = ['./buildbot/slave/update-version.sh', WithConfig('%s'), WithBranch('%s')]

class SyncSubmodules(ShellCommand) :
	name = "syncsubmodules"
	description = 'sync .gitmodules with .git/config'
	descriptionDone = 'submodule paths synced'
	command = ['git', 'submodule', 'sync']

class InitSubmodules(ShellCommand) :
	name = "submodules"
	description = 'updating submodules'
	descriptionDone = 'submodules updated'
	command = ['git', 'submodule', 'update', '--init']

class CppCheck(WarningCountingShellCommand) :
	name = "cppcheck"
	description = "running cppcheck"
	descriptionDone = "cppcheck ran"
	warningPattern='\[[^:]+\:[0-9]+\].*'
	command = ['./buildbot/slave/cppcheck.sh', WithProperties('-j%(jobs:-1)s')]

class CreateDoxygen(ShellCommand) :
	name = "doxygen"
	description = "creating docs"
	descriptionDone = "docs created"
	command = ['./buildbot/slave/update-docs.sh', WithProperties('-j%(jobs:-1)s')]

# end common build config steps -----------------------------------------@

class WindowsFullBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir(extra_opts=common_win_opts) )
		self.addStep( UpdateVersion() )
		self.addStep( BuildConfig() )
		self.addStep( CreateInstaller() )
		self.addStep( RsyncStuff() )

class LinuxFullBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( BuildConfig() )

class MacOSXFullBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( BuildConfig() )

class CppCheckBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CppCheck() )

class DoxygenBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( BuildConfig() )
		self.addStep( CreateDoxygen() )

windows_builder = {
	'name': 'full-windows',
	'slavenames': win_linux_slaves,
	'builddir': 'full-windows',
	'factory': WindowsFullBuildFactory()
}

linux_builder = {
	'name': 'full-linux',
	'slavenames': win_linux_slaves,
	'builddir': 'full-linux',
	'factory': LinuxFullBuildFactory(),
	'properties': {'config': 'debug2'}
}

macosx_builder = {
	'name': 'full-macosx',
	'slavenames': ['macosx1'],
	'builddir': 'full-macosx',
	'factory': MacOSXFullBuildFactory()
}

cppcheck_builder = {
	'name': 'cppcheck',
	'slavenames': win_linux_slaves,
	'builddir': 'cppcheck',
	'slavebuilddir': 'full-linux',
	'factory': CppCheckBuildFactory()
}

doxygen_builder = {
	'name': 'doxygen',
	'slavenames': ['abma1'],
	'builddir': 'doxygen',
	'slavebuilddir': 'full-linux',
	'factory': DoxygenBuildFactory()
}

c['builders'].append(windows_builder)
c['builders'].append(linux_builder)
c['builders'].append(macosx_builder)
c['builders'].append(cppcheck_builder)
c['builders'].append(doxygen_builder)

####### STATUS TARGETS

from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth
authz = Authz(
	auth = HTPasswdAuth('htpasswd'),
	forceBuild = 'auth',
	forceAllBuilds = 'auth',
	stopBuild = 'auth',
	stopAllBuilds = 'auth',
	stopChange = 'auth',
	cancelPendingBuild = 'auth'
)
c['status'].append(WebStatus(http_port=7778, authz=authz))

from buildbot.status import words
irc = words.IRC("irc.freenode.net", "MrBuild",
	channels=["taspring"],
	password=passwords.freenode,
	notify_events={
		'successToFailure': 1,
		'failureToSuccess': 1,
	})
c['status'].append(irc)

from buildbot.status import client
c['status'].append(client.PBListener(9988))

####### DEBUGGING OPTIONS

#c['debugPassword'] = "debugpassword"
#c['manhole'] = buildbot.manhole.PasswordManhole("tcp:9999:interface=127.0.0.1", "admin", "password")

####### PROJECT IDENTITY

c['projectName'] = "Spring"
c['projectURL'] = "http://springrts.com"
c['buildbotURL'] = "http://springrts.com:7778/"
