# -*- python -*-
# vim: syntax=python
import sys,os

master_repo = 'git://github.com/spring/spring.git'
mingwlibs_repo = 'git://github.com/spring/mingwlibs.git'

c = BuildmasterConfig = {}
c['slaves'] = []
c['builders'] = []
c['schedulers'] = []
c['status'] = []


# Potential workaround for 'database is locked' errors.
# See http://trac.buildbot.net/ticket/2005
c['db_url'] = 'sqlite:///state.sqlite?serialize_access=1'

####### build properties

c['properties'] = {
	'default-branch': 'develop',
	'default-config': 'default',
}

def determine(props, key, defKey, defVal):
	if props.hasProperty(key) and props[key]:
		return props[key]
	elif props.hasProperty(defKey):
		return props[defKey]
	return defVal

def determine_branch(props):
	return determine(props, 'branch', 'default-branch', 'develop')

def determine_config(props):
	return determine(props, 'config', 'default-config', 'default')

def WithProps(fmt):
	fmt = fmt.replace('%(bc)s', '%(branch)s / %(config)s')
	return WithProperties(fmt, branch=determine_branch, config=determine_config)

def WithConfig(fmt = '%s'):
	return WithProps(fmt.replace('%s', '%(config)s'))

def WithBranch(fmt = '%s'):
	return WithProps(fmt.replace('%s', '%(branch)s'))

####### build configs

build_configs = {
	'validation': '-DSIGNAL_NANS=TRUE -DCMAKE_BUILD_TYPE=DEBUG2',
	'debug2'    : '-DCMAKE_BUILD_TYPE=DEBUG2',
	'default'   : '-DCMAKE_BUILD_TYPE=RELWITHDEBINFO',
	'fast'      : '-DCMAKE_BUILD_TYPE=RELEASE',
	'profiling' : '-DCMAKE_BUILD_TYPE=PROFILE',
	'syncdebug' : '-DCMAKE_BUILD_TYPE=DEBUG2 -DTRACE_SYNC=true -DSYNCDEBUG=true',
}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

# import the passwords from another file. this way we can keep config in git
import passwords

# the `jobs' property is the -j argument to make on this slave
c['slaves'].append(BuildSlave("abma1",   passwords.abma1,   max_builds=1, properties={'jobs': 1}))
c['slaves'].append(BuildSlave("abma2",   passwords.abma2,   max_builds=1, properties={'jobs': 8}))
c['slaves'].append(BuildSlave("koshi1",  passwords.koshi1,  max_builds=1, properties={'jobs': 2}))
c['slaves'].append(BuildSlave("macosx1", passwords.macosx1, max_builds=1, properties={'jobs': 1}))
c['slaves'].append(BuildSlave("zydox1",  passwords.zydox1,  max_builds=1, properties={'jobs': 2}))
c['slaves'].append(BuildSlave("jk1",     passwords.jk1,     max_builds=1, properties={'jobs': 4}))
c['slavePortnum'] = 9989
win_linux_slaves = ["koshi1"]

####### SCHEDULERS

def changeIsImportant(change):
	for name in change.files:
		if (name.endswith('.cpp') or name.endswith('.c') or
		    name.endswith('.hpp') or name.endswith('.h') or
		    name.endswith('.inl') or name.endswith('CMakeLists.txt')):
			return True
	return False

from buildbot.changes.filter import ChangeFilter
from buildbot.schedulers import basic, timed

c['schedulers'].append(basic.AnyBranchScheduler(
	name="full-sched",
	treeStableTimer=60,
	fileIsImportant=changeIsImportant,
	change_filter=ChangeFilter(branch_re='master|develop|release|post_release'),
	builderNames=["full-windows-test", "full-linux", "quick-macosx", "validationtests", "linux-static-x32"]))

c['schedulers'].append(timed.Nightly(
	name='nightly',
	branch='develop',
	fileIsImportant=changeIsImportant,
	onlyIfChanged=True,
	builderNames=["cppcheck", "doxygen", "full-macosx", "latest-boost", "linux-static-x64"], hour=6, minute=0))

####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import Compile, Test, ShellCommand, WarningCountingShellCommand, WithProperties
from buildbot.status.builder import WARNINGS, FAILURE, SUCCESS

# common build config steps ---------------------------------------------@

# description / descritionDone style : doing X / done X

class LocalPreScript(ShellCommand):
	name = 'local pre script'
	description = "executing local pre script"
	descriptionDone = "executed local pre script"
	command = ['buildbot/slave/safe-exec.sh', '../../local.start', WithBranch()]
	haltOnFailure = False
	hideStepIf = lambda s, result: result==SUCCESS
	alwaysRun = True

class LocalPostScript(ShellCommand):
	name = 'local post script'
	description = "executing local post script"
	descriptionDone = "executed local post script"
	command = ['buildbot/slave/safe-exec.sh', '../../local.stop', WithBranch()]
	haltOnFailure = False
	hideStepIf = lambda s, result: result==SUCCESS
	alwaysRun = True

class GitRenameLocalBranch1(ShellCommand):
	name = 'gitRenameLocalBranch1'
	description = [WithBranch('renaming local git branch to temp')]
	descriptionDone = [WithBranch('renamed local git branch to temp')]
	command = ['git', 'branch', '-M', 'temp']
	haltOnFailure = True

class GitRenameLocalBranch2(ShellCommand):
	name = 'gitRenameLocalBranch2'
	description = [WithBranch('renaming local git branch to %s')]
	descriptionDone = [WithBranch('renamed local git branch to %s')]
	command = ['git', 'branch', '-M', WithBranch()]
	haltOnFailure = True

class BuildConfig(Compile):
	name = 'buildConfig'
	warnOnWarnings  = True
	description = [WithProps('building %(bc)s config')]
	descriptionDone = [WithProps('built %(bc)s config')]
	command = ['make', '--no-print-directory', '-k', WithProps('-j%(jobs:-1)s'), WithProps('-l%(load:-)s'), '-C', WithConfig('build/%s')]

class BuildConfigNinja(Compile):
	name = 'buildConfigNinja'
	warnOnWarnings  = True
	description = [WithProps('building %(bc)s config')]
	descriptionDone = [WithProps('built %(bc)s config')]
	command = ['ninja', '-k 10', WithProps('-j%(jobs:-1)s'), '-C', WithConfig('build/%s')]

class TestConfig(Test):
	name = 'testConfig'
	description = [WithProps('testing %(bc)s config')]
	descriptionDone = [WithProps('tested %(bc)s config')]
	command = ['make', '--no-print-directory', '-k', WithProps('-j%(jobs:-1)s'), WithProps('-l%(load:-)s'), '-C', WithConfig('build/%s'), 'check']

class TestConfigNinja(Test):
	name = 'testConfig'
	description = [WithProps('testing %(bc)s config')]
	descriptionDone = [WithProps('tested %(bc)s config')]
	command = ['ninja', '-k 10', WithProps('-j%(jobs:-1)s'), '-C', WithConfig('build/%s'), 'check']

class CreateBuildDir(ShellCommand) :
	name = "build dir create"
	haltOnFailure = True
	description = [WithProps('creating %(bc)s dir')]
	descriptionDone = [WithProps('created %(bc)s dir')]
	command = ['./buildbot/slave/create-build-dirs.sh', WithConfig(), WithBranch(), None]

	def __init__(self, extra_opts = '', **kwargs):
		self.extra_opts = extra_opts
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(extra_opts = extra_opts)

	def start(self):
		#substitute the correct (cmake) arguments for the configuration
		config = determine_config(self.getProperties())
		self.command[-1] = build_configs[config] + self.extra_opts
		ShellCommand.start(self)

class CreateInstaller(ShellCommand) :
	name = "create installer"
	description = [WithProps('creating %(bc)s installer')]
	descriptionDone = [WithProps('created %(bc)s installer')]
	# last argument is max number of threads (e.g., for 7z)
	command = ['./buildbot/slave/win/make_installer.sh', WithConfig(), WithBranch(), WithProps('%(jobs:-on)s')]

class CreateMacBundle(ShellCommand) :
	name = "create Mac .app bundle"
	description = [WithProps('creating %(bc)s Mac bundle')]
	descriptionDone = [WithProps('created %(bc)s Mac bundle')]
	command = ['./buildbot/slave/osx/create_Mac_bundle.sh', WithConfig(), WithBranch()]

class CreateLinuxStaticBundle(ShellCommand) :
	name = "create linux bundle"
	description = [WithProps('creating %(bc)s bundle')]
	descriptionDone = [WithProps('created %(bc)s bundle')]
	command = ['./buildbot/slave/linux/create_linux_static_bundle.sh', WithConfig(), WithBranch()]

class CreateSourceBundle(ShellCommand) :
	name = "create source bundle"
	description = [WithProps('creating %(bc)s bundle')]
	descriptionDone = [WithProps('created %(bc)s bundle')]
	command = ['./buildbot/slave/source/make_source_package.sh', WithConfig(), WithBranch()]

class RsyncStuff(ShellCommand) :
	name = "rsync"
	description = [WithProps('uploading %(bc)s')]
	descriptionDone = [WithProps('uploaded %(bc)s')]
	command = ['./buildbot/slave/rsync.sh', WithConfig(), WithBranch()]

class RsyncMac(ShellCommand) :
	name = "rsync"
	description = [WithProps('uploading %(bc)s')]
	descriptionDone = [WithProps('uploaded %(bc)s')]
	command = ['./buildbot/slave/osx/rsync-mac.sh', WithConfig(), WithBranch()]

class SyncSubmodules(ShellCommand) :
	name = "syncsubmodules"
	description = 'syncing .gitmodules with .git/config'
	descriptionDone = 'synced submodule paths'
	command = ['git', 'submodule', 'sync']

class InitSubmodules(ShellCommand) :
	name = "submodules"
	description = 'updating submodules'
	descriptionDone = 'updated submodules'
	command = ['git', 'submodule', 'update', '--init']

class CppCheck(WarningCountingShellCommand) :
	name = "cppcheck"
	description = "running cppcheck"
	descriptionDone = "ran cppcheck"
	warnOnWarnings = True
	warningPattern = '\[[^:]+\:[0-9]+\].*'
	command = ['./buildbot/slave/cppcheck/cppcheck.sh', WithProps('-j%(jobs:-1)s')]

	def __init__(self, **kwargs):
		# cppcheck --quiet may be quiet for a long while...
		kwargs.update({'timeout': 10800})
		WarningCountingShellCommand.__init__(self, **kwargs)

class GenerateSources(WarningCountingShellCommand) :
	name = "generatesources"
	description = "creating source files"
	descriptionDone = "created source files"
	warnOnWarnings = True
	command = ['make', 'generateSources', WithProps('-j%(jobs:-1)s'), '-C', WithConfig('build/%s')]

class BuildDocs(WarningCountingShellCommand) :
	name = "doxygen"
	description = "creating docs"
	descriptionDone = "created docs"
	warnOnWarnings = True
	command = ['./buildbot/slave/doxygen/update-docs.sh', WithProps('-j%(jobs:-1)s')]

class ValidationTestPrepare(WarningCountingShellCommand) :
	name = "validation test prepare"
	description = "preparing validation tests"
	descriptionDone = "prepared validation tests"
	warnOnWarnings = True
	command = ['./buildbot/slave/validation/tests-prepare.sh', WithConfig(), WithBranch()]

class ValidationTestRun(WarningCountingShellCommand) :
	name = "validation test"
	warnOnWarnings = True
	command = ['./buildbot/slave/validation/tests-run.sh', WithConfig(), WithBranch()]
	warningPattern = "(.*Warning:|.*Error:|^#\d+ |^        ).*"
	def __init__(self, extra_opts = '', **kwargs):
		self.extra_opts = extra_opts
		WarningCountingShellCommand.__init__(self, **kwargs)
		self.addSuppression([(None,".*LuaRules::RunCallIn: error = 2, RecvFromSynced,.*", None, None)])
		self.description = ["testing %s" % (self.extra_opts)]
		self.descriptionDone = ["tested %s" % (self.extra_opts)]

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(extra_opts = extra_opts)

	def start(self):
		self.command.append(self.extra_opts)
		WarningCountingShellCommand.start(self)


class ValidationTestCleanup(WarningCountingShellCommand) :
	name = "validation test cleanup"
	description = "cleaning validation tests"
	descriptionDone = "cleaned validation tests"
	warnOnWarnings = True
	command = ['./buildbot/slave/validation/tests-cleanup.sh', WithConfig(), WithBranch()]

class ValidationTestAnalyze(WarningCountingShellCommand) :
	name = "analyze core dumps"
	warnOnWarnings = True
	command = ['./buildbot/slave/validation/tests-analyze.sh', WithConfig(), WithBranch()]
	alwaysRun = True

class UpdateMingwLibs(WarningCountingShellCommand) :
	name = "update mingwlibs"
	description = "updating mingwlibs"
	descriptionDone = "updated mingwlibs"
	warnOnWarnings = True
	command = ['./buildbot/slave/win/update-mingwlibs.sh', WithConfig(), WithBranch()]

class TestIfStaticLinked(ShellCommand) :
	name = "static link test"
	warnOnWarnings = True
	hideStepIf = lambda s, result: result==SUCCESS
	command = ['./buildbot/slave/linux/static-test-if-shared-linked.sh', WithConfig('build/%s/spring')]
	def __init__(self, libname = '', name = '', **kwargs):
		if not name:
			name = libname
		self.name = name
		self.libname = libname
		ShellCommand.__init__(self, **kwargs)
		self.description = ["testing %s" % (self.name)]
		self.descriptionDone = ["tested %s" % (self.name)]

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(libname = libname, name = name)

	def start(self):
		self.command.append(self.libname)
		ShellCommand.start(self)

	def evaluateCommand(self, cmd):
		if cmd.rc == 0:
			return SUCCESS
		if cmd.rc == 1:
			return WARNINGS
		return FAILURE

class ShowSharedLinkedLibraries(ShellCommand) :
	name = "ldd"
	description = "running ldd"
	descriptionDone = "remaining libraries"
	warnOnWarnings = True
	command = ['./buildbot/slave/linux/static-show-used-dynamic-libraries.sh', WithConfig('build/%s/spring')]

class ShowSharedLinkedLibrariesUnitsync(ShellCommand) :
	name = "ldd"
	description = "running ldd on unitsync"
	descriptionDone = "remaining libraries"
	warnOnWarnings = True
	command = ['./buildbot/slave/linux/static-show-used-dynamic-libraries.sh', WithConfig('build/%s/libunitsync.so')]

class SwitchToLatestBoost(ShellCommand):
	name = 'latest boost script'
	description = "switching to latest boost"
	descriptionDone = "switched to latest boost"
	command = ['sudo', '/usr/local/bin/switch_to_latest_boost']
	haltOnFailure = False
	alwaysRun = True

class SwitchToStableBoost(ShellCommand):
	name = 'stable boost script'
	description = "switching to stable boost"
	descriptionDone = "switched to stable boost"
	command = ['sudo', '/usr/local/bin/switch_to_stable_boost']
	haltOnFailure = False
	alwaysRun = True

class BuildMingwBoost(WarningCountingShellCommand) :
	name = "build boost"
	description = "building boost"
	descriptionDone = "build boost"
	warnOnWarnings = True
	command = ['./buildbot/mingwlibs_boost.sh', WithConfig(), WithBranch()]


# end common build config steps -----------------------------------------@


class WindowsFullBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( GitRenameLocalBranch1() )
		self.addStep( GitRenameLocalBranch2() )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( UpdateMingwLibs() )
		self.addStep( CreateBuildDir() )
		self.addStep( BuildConfigNinja() )
		self.addStep( CreateInstaller() )
		self.addStep( TestConfig() )
		self.addStep( RsyncStuff() )

class LinuxFullBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( GitRenameLocalBranch1() )
		self.addStep( GitRenameLocalBranch2() )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( BuildConfig() )
		self.addStep( TestConfig() )

class MacOSXFullBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( GitRenameLocalBranch1() )
		self.addStep( GitRenameLocalBranch2() )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( BuildConfig() )
		self.addStep( TestConfig() )
		self.addStep( CreateMacBundle() )
		self.addStep( RsyncMac() )

class LinuxStaticBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( LocalPreScript() )
		self.addStep( GitRenameLocalBranch1() )
		self.addStep( GitRenameLocalBranch2() )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( BuildConfigNinja() )
		self.addStep( TestConfigNinja() )
		self.addStep( TestIfStaticLinked(libname="boost") )
		self.addStep( TestIfStaticLinked(libname="minizip") )
		self.addStep( TestIfStaticLinked(libname="libz.", name="zlib") )
		self.addStep( TestIfStaticLinked(libname="SDL") )
		self.addStep( TestIfStaticLinked(libname="glew") )
		self.addStep( TestIfStaticLinked(libname="libIL", name="devil") )
		self.addStep( TestIfStaticLinked(libname="jpeg") )
		self.addStep( TestIfStaticLinked(libname="png") )
		self.addStep( TestIfStaticLinked(libname="freetype") )
		self.addStep( TestIfStaticLinked(libname="vorbis") )
		self.addStep( TestIfStaticLinked(libname="ogg") )
		self.addStep( TestIfStaticLinked(libname="Xcursor") )
		self.addStep( TestIfStaticLinked(libname="libstdc", name="stdc++") )
		self.addStep( TestIfStaticLinked(libname="libgcc") )
		self.addStep( TestIfStaticLinked(libname="libgomp", name="openmp") )
		self.addStep( TestIfStaticLinked(libname="libc", name="glibc") )
		self.addStep( TestIfStaticLinked(libname="libm", name="math") )
		self.addStep( TestIfStaticLinked(libname="libpthread", name="pthread") )
		self.addStep( ShowSharedLinkedLibraries() )
		self.addStep( ShowSharedLinkedLibrariesUnitsync() )
		self.addStep( CreateLinuxStaticBundle() )
		self.addStep( RsyncStuff() )
		self.addStep( LocalPostScript() )

class MacOSXQuickBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( GitRenameLocalBranch1() )
		self.addStep( GitRenameLocalBranch2() )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( BuildConfig() )

class LatestBoostBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( LocalPreScript() )
		self.addStep( SwitchToLatestBoost() )
		self.addStep( GitRenameLocalBranch1() )
		self.addStep( GitRenameLocalBranch2() )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( BuildConfig() )
		self.addStep( TestConfigNinja() )
		self.addStep( SwitchToStableBoost() )
		self.addStep( LocalPostScript() )

class CppCheckBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CppCheck() )

class DoxygenBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( GenerateSources() )
		self.addStep( BuildDocs() )

class SourceFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateSourceBundle() )
		self.addStep( RsyncStuff() )

class ValidationBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( GitRenameLocalBranch1() )
		self.addStep( GitRenameLocalBranch2() )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		#self.addStep( BuildConfig() )
		self.addStep( ValidationTestCleanup() )
		self.addStep( ValidationTestPrepare() )
		self.addStep( ValidationTestRun(extra_opts="CAI.script.txt") )
		self.addStep( ValidationTestRun(extra_opts="KAIK.script.txt") )
		self.addStep( ValidationTestRun(extra_opts="RAI.script.txt") )
		self.addStep( ValidationTestRun(extra_opts="AAI.script.txt") )
		self.addStep( ValidationTestRun(extra_opts="E323AI.script.txt") )
		self.addStep( ValidationTestRun(extra_opts="Shard.script.txt") )
		self.addStep( ValidationTestAnalyze() )
		self.addStep( RsyncStuff() )

class MingwLibsBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=mingwlibs_repo) )
		self.addStep( BuildMingwBoost() )


windows_builder = {
	'name': 'full-windows',
	'slavenames': win_linux_slaves,
	'builddir': 'full-windows',
	'factory': WindowsFullBuildFactory(),
	'env': {
		'OUTPUTDIR' : 'win32-old',
		'CMAKEPARAM' : '-DCMAKE_TOOLCHAIN_FILE:PATH=../../buildbot/slave/win/win32.cmake -DMINGWLIBS:PATH=/slave/mingwlibs',
		'MINGWLIBS_PATH' : '/slave/mingwlibs'
	}
}

windows_builder_test = {
	'name': 'full-windows-test',
	'slavenames': ['abma2'],
	'builddir': 'full-windows-test',
	'factory': WindowsFullBuildFactory(),
	'env': {
		'MINGW_HOST': 'i686-mingw32-',
		'CHOST' : 'i686-mingw32',
		'ROOT' : '/usr/i686-mingw32',
		'OUTPUTDIR' : 'win32',
		'CMAKEPARAM' :
				' -DMINGWLIBS:PATH=/slave/mingwlibs'
				' -DCMAKE_FIND_ROOT_PATH:PATH=/usr/lib/gcc/i686-mingw32;/usr/i686-mingw32'
				' -DWINDRES:STRING=i686-mingw32-windres'
				' -DCMAKE_SYSTEM_NAME:STRING=Windows'
				' -G Ninja',
		'CXX' : 'i686-mingw32-g++',
		'CC' : 'i686-mingw32-gcc',
		'MINGWLIBS_PATH' : '/slave/mingwlibs'
	}
}

ubuntu_builder = {
	'name': 'full-linux',
	'slavenames': win_linux_slaves,
	'builddir': 'full-linux',
	'factory': LinuxFullBuildFactory(),
	'properties': {'default-config': 'debug2'}
}

macosx_builder = {
	'name': 'full-macosx',
	'slavenames': ['macosx1'],
	'builddir': 'full-macosx',
	'factory': MacOSXFullBuildFactory(),
	'env': {
		'OUTPUTDIR' : 'osx64'
	}
}

linux_static_builder_x64 = {
	'name': 'linux-static-x64',
	'slavenames': ['abma2'],
	'builddir': 'linux-static-x64',
	'factory': LinuxStaticBuildFactory(),
	'env': {
		'OUTPUTDIR' : 'linux64',
		'CMAKEPARAM':
				' -DCMAKE_TOOLCHAIN_FILE:PATH=../../buildbot/slave/linux/linuxStatic.cmake'
				' -G Ninja'
	}
}

linux_static_builder_x32 = {
	'name': 'linux-static-x32',
	'slavenames': ['jk1','abma2'],
	'builddir': 'linux-static-x32',
	'factory': LinuxStaticBuildFactory(),
	'env': {
		'OUTPUTDIR' : 'linux32',
		'CXX' : 'i686-pc-linux-gnu-g++',
		'CC' : 'i686-pc-linux-gnu-gcc',
		'CFLAGS' : '-m32',
		'CXXFLAGS': '-m32',
		'LDFLAGS': '-Wl,-rpath /usr/lib/gcc/i686-pc-linux-gnu/4.7.2',
		'LD_LIBRARY_PATH': '/lib32:/usr/i686-pc-linux-gnu/lib:/usr/i686-pc-linux-gnu/usr/lib:/usr/lib/gcc/i686-pc-linux-gnu/4.7.2',
		'CMAKEPARAM':
				' -DCMAKE_TOOLCHAIN_FILE:PATH=../../buildbot/slave/linux/linuxStatic.cmake'
				' -DCMAKE_SYSTEM_NAME:STRING=Linux'
				' -DCMAKE_FIND_ROOT_PATH:PATH=/usr/i686-pc-linux-gnu;/usr/lib/gcc/i686-pc-linux-gnu'
				' -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM:STRING=NEVER'
				' -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY:STRING=ONLY'
				' -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE:STRING=ONLY'
				' -G Ninja'

	}
}

macosx_quick_builder = {
	'name': 'quick-macosx',
	'slavenames': ['macosx1'],
	'builddir': 'quick-macosx',
	'factory': MacOSXQuickBuildFactory(),
	'properties': {'default-config': 'fast'}
}

latest_boost_builder = {
	'name': 'latest-boost',
	'slavenames': ['jk1'],
	'builddir': 'latest-boost',
	'factory': LatestBoostBuildFactory(),
	'properties': {'default-config': 'fast'}
}

cppcheck_builder = {
	'name': 'cppcheck',
	'slavenames': ['zydox1'],
	'builddir': 'cppcheck',
	'slavebuilddir': 'full-linux',
	'factory': CppCheckBuildFactory()
}

source_builder = {
	'name': 'sourcebuilder',
	'slavenames': ['abma2'],
	'builddir': 'source',
	'factory' : SourceFactory()
}

doxygen_builder = {
	'name': 'doxygen',
	'slavenames': ['zydox1'],
	'builddir': 'doxygen',
	'factory': DoxygenBuildFactory()
}

validation_builder = {
	'name': 'validationtests',
	'slavenames': ['zydox1', 'abma1'],
	'builddir': 'zydox-fedora',
	'factory': ValidationBuildFactory(),
	'properties': {'default-config': 'validation'},
	'env': {
		'CMAKEPARAM':
				'-G Ninja'
	}
}

mingwlibs_builder = {
	'name': 'mingwlibs',
	'slavenames': ['abma2'],
	'builddir': 'mingwlibs',
	'factory': MingwLibsBuildFactory(),
	'properties': {'branch': 'master'}
}


#order of these lines are the same as on waterfall
c['builders'].append(windows_builder)
c['builders'].append(windows_builder_test)
c['builders'].append(ubuntu_builder)
c['builders'].append(linux_static_builder_x32)
c['builders'].append(linux_static_builder_x64)
c['builders'].append(macosx_quick_builder)
c['builders'].append(validation_builder)
c['builders'].append(latest_boost_builder)
c['builders'].append(macosx_builder)
c['builders'].append(cppcheck_builder)
c['builders'].append(source_builder)
c['builders'].append(doxygen_builder)
c['builders'].append(mingwlibs_builder)

####### STATUS TARGETS

from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth
authz = Authz(
	auth = HTPasswdAuth('htpasswd'),
	forceBuild = 'auth',
	forceAllBuilds = 'auth',
	stopBuild = 'auth',
	stopAllBuilds = 'auth',
	stopChange = 'auth',
	cancelPendingBuild = 'auth'
)
web = WebStatus(
	http_port='tcp:7778:interface=127.0.0.1',
	authz=authz,
	change_hook_dialects={ 'github' : True }
)
c['status'].append(web)

from buildbot.status import words
irc = words.IRC("irc.freenode.net", "MrBuild",
	channels=["taspring"],
	password=passwords.freenode,
	notify_events={
		'successToFailure': 1,
		'warningsToFailure': 1,
		'failureToSuccess': 1,
		'failureToWarnings': 1,
	})
c['status'].append(irc)

####### DEBUGGING OPTIONS

#c['debugPassword'] = "debugpassword"
#c['manhole'] = buildbot.manhole.PasswordManhole("tcp:9999:interface=127.0.0.1", "admin", "password")

####### PROJECT IDENTITY

c['projectName'] = "Spring"
c['projectURL'] = "http://springrts.com"
c['buildbotURL'] = "http://buildbot.springrts.com/"
