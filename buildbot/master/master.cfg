# -*- python -*-
# vim: syntax=python
import sys,os

master_repo = 'git://github.com/spring/spring.git'

c = BuildmasterConfig = {}
c['slaves'] = []
c['builders'] = []
c['schedulers'] = []
c['status'] = []

toolchain_location = '../../buildbot/slave/win32.cmake'
mingwlibs_location = '/slave/mingwlibs'

# Potential workaround for 'database is locked' errors.
# See http://trac.buildbot.net/ticket/2005
c['db_url'] = 'sqlite:///state.sqlite?serialize_access=1'

####### build properties

c['properties'] = {
	'branch': 'develop',   #default branch name
	'config': 'default',   #default build config
}

def WithConfig(fmt):
	assert fmt.count('%s') == 1
	return WithProperties(fmt, 'config')

def WithBranch(fmt):
	assert fmt.count('%s') == 1
	return WithProperties(fmt, 'branch')

####### build configs
common_win_opts = ' -DCMAKE_TOOLCHAIN_FILE:STRING=%s -DMINGWLIBS=%s' % (toolchain_location, mingwlibs_location)

build_configs = {
	'debug2'    : '-DCMAKE_BUILD_TYPE=DEBUG2',
	'default'   : '-DCMAKE_BUILD_TYPE=RELWITHDEBINFO',
	'profiling' : '-DCMAKE_BUILD_TYPE=PROFILE',
	'syncdebug' : '-DCMAKE_BUILD_TYPE=DEBUG2 -DTRACE_SYNC=true -DSYNCDEBUG=true',
}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

# import the passwords from another file. this way we can keep config in git
import passwords

# the `jobs' property is the -j argument to make on this slave
c['slaves'].append(BuildSlave("abma1",   passwords.abma1,   max_builds=1, properties={'jobs': 2}))
c['slaves'].append(BuildSlave("koshi1",  passwords.koshi1,  max_builds=1, properties={'jobs': 2}))
c['slaves'].append(BuildSlave("macosx1", passwords.macosx1, max_builds=1, properties={'jobs': 1}))
c['slaves'].append(BuildSlave("zydox1",  passwords.zydox1,  max_builds=1, properties={'jobs': 2}))
c['slavePortnum'] = 9989
win_linux_slaves = ["koshi1"]

####### SCHEDULERS

def changeIsImportant(change):
	for name in change.files:
		if (name.endswith('.cpp') or name.endswith('.c') or
		    name.endswith('.hpp') or name.endswith('.h') or
		    name.endswith('.inl') or name.endswith('CMakeLists.txt')):
			return True
	return False

from buildbot.changes.filter import ChangeFilter
from buildbot.schedulers import basic, timed

c['schedulers'].append(basic.AnyBranchScheduler(
	name="full-sched",
	treeStableTimer=60,
	fileIsImportant=changeIsImportant,
	change_filter=ChangeFilter(branch_re='master|develop'),
	builderNames=["full-windows", "full-linux", "quick-macosx", "validationtests"]))

c['schedulers'].append(timed.Nightly(
	name='nightly',
	branch='develop',
	fileIsImportant=changeIsImportant,
	onlyIfChanged=True,
	builderNames=["cppcheck", "doxygen", "full-macosx" ], hour=6, minute=0))

####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import Compile, Test, ShellCommand, WarningCountingShellCommand, WithProperties

# common build config steps ---------------------------------------------@

class BuildConfig(Compile):
	name = 'buildConfig'
	warnOnWarnings  = True
	description = [WithConfig('building %s config')]
	descriptionDone = [WithConfig('built %s config')]
	command = ['make', '--no-print-directory', '-k', WithProperties('-j%(jobs:-1)s'), WithProperties('-l%(load:-)s'), '-C', WithConfig('build/%s')]

class TestConfig(Test):
	name = 'testConfig'
	description = [WithConfig('testing %s config')]
	descriptionDone = [WithConfig('tested %s config')]
	command = ['make', '--no-print-directory', '-k', WithProperties('-j%(jobs:-1)s'), WithProperties('-l%(load:-)s'), '-C', WithConfig('build/%s'), 'test']

class CreateBuildDir(ShellCommand) :
	name = "build dir create"
	haltOnFailure = True
	description = [WithConfig('creating dir %s')]
	descriptionDone = [WithConfig('%s dir created')]
	command = ['./buildbot/slave/create-build-dirs.sh', WithConfig('%s'), WithBranch('%s'), None]

	def __init__(self, extra_opts = '', **kwargs):
		self.extra_opts = extra_opts
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(extra_opts = extra_opts)

	def start(self):
		#substitute the correct (cmake) arguments for the configuration
		self.command[-1] = build_configs[self.getProperty('config')] + self.extra_opts
		ShellCommand.start(self)

class CreateInstaller(ShellCommand) :
	name = "create installer"
	description = [WithConfig('creating installer %s')]
	descriptionDone = [WithConfig('%s installer created')]
	command = ['./buildbot/slave/make_installer.sh', WithConfig('%s'), WithBranch('%s'), mingwlibs_location]

class CreateMacBundle(ShellCommand) :
	name = "create Mac .app bundle"
	description = [WithConfig('creating Mac bundle %s')]
	descriptionDone = [WithConfig('%s Mac bundle created')]
	command = ['./buildbot/slave/create_Mac_bundle.sh', WithConfig('%s'), WithBranch('%s')]

class RsyncStuff(ShellCommand) :
	name = "rsync"
	description = [WithConfig('rsyncing %s')]
	descriptionDone = [WithConfig('rsync %s done')]
	command = ['./buildbot/slave/rsync.sh', WithConfig('%s'), WithBranch('%s')]

class RsyncMac(ShellCommand) :
	name = "rsync"
	description = [WithConfig('rsyncing %s')]
	descriptionDone = [WithConfig('rsync %s done')]
	command = ['./buildbot/slave/rsync-mac.sh', WithConfig('%s'), WithBranch('%s')]

class RsyncDocs(ShellCommand) :
	name = "rsync docs"
	description = [WithConfig('rsyncing docs %s')]
	descriptionDone = [WithConfig('rsync docs %s done')]
	command = ['./buildbot/slave/rsync-docs.sh', WithConfig('%s'), WithBranch('%s')]

class UpdateVersion(ShellCommand) :
	name = "update version"
	description = [WithConfig('updating version %s')]
	descriptionDone = [WithConfig('%s version updated')]
	command = ['./buildbot/slave/update-version.sh', WithConfig('%s'), WithBranch('%s')]

class SyncSubmodules(ShellCommand) :
	name = "syncsubmodules"
	description = 'sync .gitmodules with .git/config'
	descriptionDone = 'submodule paths synced'
	command = ['git', 'submodule', 'sync']

class InitSubmodules(ShellCommand) :
	name = "submodules"
	description = 'updating submodules'
	descriptionDone = 'submodules updated'
	command = ['git', 'submodule', 'update', '--init']

class CppCheck(WarningCountingShellCommand) :
	name = "cppcheck"
	description = "running cppcheck"
	descriptionDone = "cppcheck ran"
	warnOnWarnings = True
	warningPattern = '\[[^:]+\:[0-9]+\].*'
	command = ['./buildbot/slave/cppcheck.sh', WithProperties('-j%(jobs:-1)s')]

	def __init__(self, **kwargs):
		# cppcheck --quiet may be quiet for a long while...
		kwargs.update({'timeout': 10800})
		WarningCountingShellCommand.__init__(self, **kwargs)

class GenerateSources(WarningCountingShellCommand) :
	name = "generatesources"
	description = "creates source files"
	descriptionDone = "source files created"
	warnOnWarnings = True
	command = ['make', 'generateSources', WithProperties('-j%(jobs:-1)s'), '-C', WithConfig('build/%s')]

class BuildDocs(WarningCountingShellCommand) :
	name = "doxygen"
	description = "creating docs"
	descriptionDone = "docs created"
	warnOnWarnings = True
	command = ['./buildbot/slave/update-docs.sh', WithProperties('-j%(jobs:-1)s')]

class ValidationTestPrepare(WarningCountingShellCommand) :
	name = "validationtests"
	description = "validation tests"
	descriptionDone = "validation tests prepared"
	warnOnWarnings = True
	command = ['./buildbot/slave/tests-prepare.sh', WithConfig('%s'), WithBranch('%s')]

class ValidationTestRun(ShellCommand) :
	name = "validationtests"
	warnOnWarnings = True
	command = ['./buildbot/slave/tests-run.sh', WithConfig('%s'), WithBranch('%s')]
	def __init__(self, extra_opts = '', **kwargs):
		self.extra_opts = extra_opts
		ShellCommand.__init__(self, **kwargs)

		self.descriptionDone = ["test %s" % (self.extra_opts)]
		self.description = ["validation test %s" % (self.extra_opts)]

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(extra_opts = extra_opts)

	def start(self):
		self.command.append(self.extra_opts)
		ShellCommand.start(self)


class ValidationTestCleanup(WarningCountingShellCommand) :
	name = "validationtests"
	description = "validation tests clean"
	descriptionDone = "cleaned"
	warnOnWarnings = True
	command = ['./buildbot/slave/tests-cleanup.sh', WithConfig('%s'), WithBranch('%s')]

# end common build config steps -----------------------------------------@

class WindowsFullBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir(extra_opts=common_win_opts) )
		self.addStep( UpdateVersion() )
		self.addStep( BuildConfig() )
		self.addStep( CreateInstaller() )
		self.addStep( RsyncStuff() )

class LinuxFullBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( BuildConfig() )
		self.addStep( TestConfig() )

class MacOSXFullBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( UpdateVersion() )
		self.addStep( BuildConfig() )
		self.addStep( TestConfig() )
		self.addStep( CreateMacBundle() )
		self.addStep( RsyncMac() )

class MacOSXQuickBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( BuildConfig() )

class CppCheckBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CppCheck() )

class DoxygenBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( GenerateSources() )
		self.addStep( BuildDocs() )
		self.addStep( RsyncDocs() )

class ValidationBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.useProgress = False
		self.addStep( Git(repourl=master_repo) )
		self.addStep( SyncSubmodules() )
		self.addStep( InitSubmodules() )
		self.addStep( CreateBuildDir() )
		self.addStep( BuildConfig() )
		self.addStep( ValidationTestPrepare() )
		self.addStep( ValidationTestRun(extra_opts="test1.script.txt") )
		self.addStep( ValidationTestRun(extra_opts="test2.script.txt") )
		self.addStep( ValidationTestRun(extra_opts="test3.script.txt") )
		self.addStep( ValidationTestRun(extra_opts="test4.script.txt") )
		self.addStep( ValidationTestRun(extra_opts="test5.script.txt") )
		self.addStep( ValidationTestCleanup() )


windows_builder = {
	'name': 'full-windows',
	'slavenames': win_linux_slaves,
	'builddir': 'full-windows',
	'factory': WindowsFullBuildFactory()
}

ubuntu_builder = {
	'name': 'full-linux',
	'slavenames': win_linux_slaves,
	'builddir': 'full-linux',
	'factory': LinuxFullBuildFactory(),
	'properties': {'config': 'debug2'}
}

macosx_builder = {
	'name': 'full-macosx',
	'slavenames': ['macosx1'],
	'builddir': 'full-macosx',
	'factory': MacOSXFullBuildFactory()
}

macosx_quick_builder = {
	'name': 'quick-macosx',
	'slavenames': ['macosx1'],
	'builddir': 'quick-macosx',
	'factory': MacOSXQuickBuildFactory()
}

cppcheck_builder = {
	'name': 'cppcheck',
	'slavenames': win_linux_slaves,
	'builddir': 'cppcheck',
	'slavebuilddir': 'full-linux',
	'factory': CppCheckBuildFactory()
}

doxygen_builder = {
	'name': 'doxygen',
	'slavenames': ['zydox1'],
	'builddir': 'doxygen',
	'slavebuilddir': 'full-linux',
	'factory': DoxygenBuildFactory()
}

validation_builder = {
	'name': 'validationtests',
	'slavenames': ['zydox1'],
	'builddir': 'zydox-fedora',
	'slavebuilddir': 'full-linux',
	'factory': ValidationBuildFactory(),
	'properties': {'config': 'debug2'}
}

#order of these lines are the same as on waterfall
c['builders'].append(windows_builder)
c['builders'].append(ubuntu_builder)
c['builders'].append(macosx_quick_builder)
c['builders'].append(validation_builder)
c['builders'].append(macosx_builder)
c['builders'].append(cppcheck_builder)
c['builders'].append(doxygen_builder)

####### STATUS TARGETS

from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth
authz = Authz(
	auth = HTPasswdAuth('htpasswd'),
	forceBuild = 'auth',
	forceAllBuilds = 'auth',
	stopBuild = 'auth',
	stopAllBuilds = 'auth',
	stopChange = 'auth',
	cancelPendingBuild = 'auth'
)
web = WebStatus(
	http_port=7778,
	authz=authz,
	change_hook_dialects={ 'github' : True }
)
c['status'].append(web)

from buildbot.status import words
irc = words.IRC("irc.freenode.net", "MrBuild",
	channels=["taspring"],
	password=passwords.freenode,
	notify_events={
		'successToFailure': 1,
		'warningsToFailure': 1,
		'failureToSuccess': 1,
		'failureToWarnings': 1,
	})
c['status'].append(irc)

####### DEBUGGING OPTIONS

#c['debugPassword'] = "debugpassword"
#c['manhole'] = buildbot.manhole.PasswordManhole("tcp:9999:interface=127.0.0.1", "admin", "password")

####### PROJECT IDENTITY

c['projectName'] = "Spring"
c['projectURL'] = "http://springrts.com"
c['buildbotURL'] = "http://springrts.com:7778/"
