# -*- python -*-
# vim: syntax=python
import sys,os
print 'my sys.path =>', sys.path

### basis for the revision string
base_rev_major = "0."
base_rev = base_rev_major
master_repo = 'git://github.com/spring/spring.git'

c = BuildmasterConfig = {}
c['slaves'] = []
c['builders'] = []
c['schedulers'] = []
c['status'] = []

toolchain_location = os.path.expanduser('~/win32.cmake')
mingwlibs_location = os.path.expanduser('~/mingwlibs')

####### build configs
common_win_opts = " -DCMAKE_TOOLCHAIN_FILE:STRING=%s -DMINGWLIBS=%s" % (toolchain_location, mingwlibs_location)
common_linux_opts = ""

# list of (name, option string, targets) 3-tuples
targ_all = ['all']
targ_all_gml = ['all', 'spring-gml', 'spring-hl']
common_build_configs = [
	('debug2',     "-DCMAKE_BUILD_TYPE=DEBUG2 -DUSE_GML_DEBUG=true", targ_all_gml),
	('default',    "-DCMAKE_BUILD_TYPE=RELWITHDEBINFO", targ_all_gml),
	('profiling',  "-DCMAKE_BUILD_TYPE=PROFILE", targ_all),
	('syncdebug',  "-DCMAKE_BUILD_TYPE=DEBUG2 -DTRACE_SYNC=true -DSYNCDEBUG=true", targ_all),
	('syncdebug2', "-DCMAKE_BUILD_TYPE=DEBUG2 -DSYNCDEBUG=true", targ_all),
]
windows_build_configs = [(name, opts + common_win_opts, targ) for (name, opts, targ) in common_build_configs]
linux_build_configs = [(name, opts + common_linux_opts, targ) for (name, opts, targ) in common_build_configs]

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
#from spring import SpringNotifier

#import the pw vars from another file. this way we can keep config in git
#sys.path.append("/home/buildbot/spring")
import passwords

#c['slaves'].append(BuildSlave("testbot", pw.my_pw, max_builds=1))
#c['slaves'].append(BuildSlave("release-slave", passwords.release_slave, max_builds=1))
c['slaves'].append(BuildSlave("testslave", passwords.testslave, max_builds=1))
c['slavePortnum'] = 9989

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()


####### SCHEDULERS

from buildbot.scheduler import Scheduler
c['schedulers'].append(Scheduler(
	name="full-sched",
	branch="master",
	treeStableTimer=60,
	builderNames=["full-windows", "full-linux"]))


####### BUILDERS

# TODO: git-remote add -f my-public /srv/git/buildbot/springlobby.git is done for the release slave manually

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import Compile, ShellCommand, WithProperties
from buildbot.status.builder import SUCCESS, FAILURE, WARNINGS

class BuildDocs(ShellCommand) :
	name = "execute doxygen"
	description = ["generating doxygen documentation"]
	descriptionDone = ["docs generated"]
	command = ["/bin/sh","./buildbot/update-docs.sh"]

class WindowsBinary(ShellCommand) :
	name = "windows binary"
	description = ["making windows binary"]
	descriptionDone = ["windows binary"]
	command = ["zip", "-jr", WithProperties("build-mingw-wx28/springlobby-"+base_rev+"%(buildnumber)s-win32.zip"), "build-mingw-wx28/wininst"]

class ReleaseTarball(ShellCommand) :
	name = "release tarball"
	description = ["releasing tarball"]
	descriptionDone = ["tarball release"]
	command = ["/usr/bin/install", "-t", "/usr/local/www/springlobby.info/tarballs/", WithProperties("build/springlobby-"+base_rev+"%(buildnumber)s.tar.gz"), WithProperties("build/springlobby-"+base_rev+"%(buildnumber)s.tar.bz2")]

class GitTag(ShellCommand) :
	name = "git tag"
	description = "git tagging"
	descriptionDone = "git tag"
	command = ["git","tag", "-a", "-m", WithProperties(base_rev+"%(buildnumber)s"),  WithProperties(base_rev+"%(buildnumber)s")]

class UpdateRPM(ShellCommand) :
	""" TODO osc needs user/pass for opensuse build service
		but of course we can't set them here, so you have to do it manually the first time"""
	name = "update rpm"
	description = "updating rpm"
	descriptionDone = "updated rpm"
	command = ["/bin/bash", "./tools/update-rpm.sh", WithProperties(base_rev+"%(buildnumber)s")]

class UploadTempBuild(ShellCommand) :
	name = "upload exe"
	description = "uploading exe"
	descriptionDone = "uploaded exe"
	command = ["/bin/bash", "./tools/upload-temp-win-build.sh", "build-mingw-wx28", WithProperties("%s","branch")]

# common build config steps ---------------------------------------------@
class BuildConfig(Compile):
	name = 'buildConfig'
	def __init__(self, configname='default', target='all', **kwargs):
		self.configname = configname
		Compile.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)
		self.addFactoryArguments(target = target)

		#self.name            = self.configname + ' build'
		self.description      = ['building %s config (%s)' % (self.configname, target)]
		self.descriptionDone  = ['built %s config (%s)' % (self.configname, target)]
		self.command          = ['make' ,'-k', '-j4', '-C', 'build-%s' % (self.configname), target]

# TODO fail and stop the build if this fails
class CreateBuildDir(ShellCommand) :
	name = "build dir create"

	def __init__(self, configname='default', configopts='', **kwargs):
		self.configname = configname
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)
		self.addFactoryArguments(configopts = configopts)

		self.description = ["creating dir %s"%(self.configname)]
		self.descriptionDone = ["%s dir created"%(self.configname)]
		self.command = ["/bin/bash", "./buildbot/create-build-dirs.sh", self.configname, configopts]

class CreateInstaller(ShellCommand) :
	name = "create installer"

	def __init__(self, configname='default',**kwargs):
		self.configname = configname
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)

		self.description = ["creating installer %s"%(self.configname)]
		self.descriptionDone = ["%s installer created"%(self.configname)]
		self.command = ["/bin/bash", "./buildbot/make_installer.sh", self.configname, WithProperties("%s","branch"), mingwlibs_location ]

class RsyncStuff(ShellCommand) :
	name = "rsync"

	def __init__(self, configname='default',**kwargs):
		self.configname = configname
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)

		self.description = ["rsyncing %s"%(self.configname)]
		self.descriptionDone = ["rsync %s done"%(self.configname)]
		self.command = ["/bin/bash", "./buildbot/rsync.sh", self.configname, WithProperties("%s","branch")]

class InitSubmodules(ShellCommand) :
	name = "Submodules"
	description = "updating submodules"
	descriptionDone = "submodules updated"
	command = ['git', 'submodule', 'update', '--init']
			

# end common build config steps -----------------------------------------@

#f1 = BuildFactory()
#f1.addStep(Git(repourl=master_repo))
#f1.addStep(BuildDocs())

#b1 = {'name': "docs",
#      'slavename': "testslave",
#      'builddir': "docs",
#      'factory': f1,
#      }
#c['builders'].append(b1)

class WindowsFullBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.addStep(Git(repourl=master_repo))
		self.addStep(InitSubmodules())
		for name, opts, targets in windows_build_configs:
			self.addStep( CreateBuildDir(name, opts) )
			for target in targets:
				self.addStep( BuildConfig(configname=name, target=target) )
			self.addStep( CreateInstaller(configname=name) )
			self.addStep( RsyncStuff(configname=name) )

class LinuxFullBuildFactory(BuildFactory):
	def __init__(self):
		BuildFactory.__init__(self)
		self.addStep(Git(repourl=master_repo))
		self.addStep(InitSubmodules())
		for name, opts, targets in linux_build_configs:
			self.addStep( CreateBuildDir(name, opts) )
			for target in targets:
				self.addStep( BuildConfig(configname=name, target=target) )

class WinBuildFactory(BuildFactory):
	def __init__(self, configname_, configopts_):
		BuildFactory.__init__(self)
		self.addStep(Git(repourl=master_repo))
		self.addStep(InitSubmodules())
		self.addStep( CreateBuildDir(configname=configname_, configopts=configopts_) )
		self.addStep( BuildConfig(configname=configname_) )
		self.addStep( CreateInstaller(configname=name) )
		self.addStep( RsyncStuff(configname=configname_) )

windows_builder = {
	'name': "full-windows",
	'slavenames': ["testslave"],
	'builddir': "full-windows",
	'factory': WindowsFullBuildFactory()
}

linux_builder = {
	'name': "full-linux",
	'slavenames': ["testslave"],
	'builddir': "full-linux",
	'factory': LinuxFullBuildFactory()
}

c['builders'].append(windows_builder)
c['builders'].append(linux_builder)

#for name, opts in windows_build_configs:
#	c['builders'].append({'name': name,
#      'slavenames': ["testslave"],
#      'builddir': name,
#      'factory': WinBuildFactory(name, opts)
#     })


####### STATUS TARGETS

#from buildbot.status.html import WebStatus
#c['status'].append(WebStatus(
#      http_port=8010))

#this is supposed to be in 0.80+
#from buildbot.status.web.authentication import *
#filen = '/usr/local/svn/svn.passwd' 
#from buildbot.status import html
#c['status'].append(html.WebStatus(http_port=8010, allowForce=True, auth=HTPasswdAuth(filen)))
#

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=7777, allowForce=True))
c['status'].append(html.WebStatus(http_port=7778, allowForce=False))

#from buildbot.status import words
#c['status'].append(words.IRC(host="orwell.freenode.net", nick="springlobby",
#                             channels=["#springlobby"]))

from buildbot.status import client
c['status'].append(client.PBListener(9988))

from buildbot.status.mail import MailNotifier
#mn = MailNotifier(fromaddr="koshi@springlobby.info",builders=['release'],
#                       sendToInterestedUsers=False,
#                       extraRecipients=['releases@www.springlobby.info'])
#bnames = ['koshi-win_dbg','dummy','tc','koshi','release','docs','BrainDamage','bd-win',
	#'tobi','olemars','koshi-win_dbg','koshi-full','koshi-win','olemars-win','tc-win']
#mn = SpringNotifier( builders=bnames,mode='all')
#c['status'].append(mn)

####### DEBUGGING OPTIONS

#c['debugPassword'] = "debugpassword"
#c['manhole'] = buildbot.manhole.PasswordManhole("tcp:9999:interface=127.0.0.1", "admin", "password")

####### PROJECT IDENTITY

c['projectName'] = "Spring"
c['projectURL'] = "http://springrts.com"
c['buildbotURL'] = "http://springrts.com:7777/"

