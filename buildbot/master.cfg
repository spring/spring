# -*- python -*-
# vim: syntax=python

### basis for the revision string
base_rev_major = "0."
base_rev = base_rev_major
#!TODO change back
master_repo = 'git://github.com/springlobby/spring.git'

c = BuildmasterConfig = {}
c['slaves'] = []
c['builders'] = []
c['schedulers'] = []
c['status'] = []

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
from spring import SpringNotifier

#import the pw vars from another file. this way we can keep config in git
import passwords

#c['slaves'].append(BuildSlave("testbot", pw.my_pw, max_builds=1))
#c['slaves'].append(BuildSlave("release-slave", passwords.release_slave, max_builds=1))
c['slaves'].append(BuildSlave("testslave", passwords.testslave, max_builds=2))
c['slavePortnum'] = 9989

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

####### SCHEDULERS

##FIXME
#from buildbot.scheduler import Scheduler
#c['schedulers'].append(Scheduler(
      #name="releaseScheduler",
      #branch=None,
      #treeStableTimer=60,
      #builderNames=["release"]))

####### BUILDERS

# TODO: git-remote add -f my-public /srv/git/buildbot/springlobby.git is done for the release slave manually

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import Compile, ShellCommand, WithProperties
from buildbot.status.builder import SUCCESS, FAILURE, WARNINGS

class BuildDocs(ShellCommand) :
	name = "execute doxygen"
	description = ["generating doxygen documentation"]
	descriptionDone = ["docs generated"]
	command = ["/bin/sh","./buildbot/update-docs.sh"]

class UploadTranslations(ShellCommand) :
	name = "UploadTranslations"
	description = ["Upload translations"]
	descriptionDone = ["translations uploaded"]
	command = ["sl-update-translations","po/springlobby.pot"]

class WindowsInstaller(ShellCommand) :
	name = "putting installer files"
	description = ["putting installer files"]
	descriptionDone = ["installer files copied"]
	command = ["cp", "-f","/var/lib/buildbot/slaves/springlobby/release/build/build-mingw-wx28/wininst/usr/local/bin/springsettings.exe" ,"/var/lib/buildbot/slaves/springlobby/release/build/build-mingw-wx28/wininst/usr/local/bin/springlobby.exe", "/usr/local/www/springlobby.info/installer/" ]

class WindowsBinary(ShellCommand) :
	name = "windows binary"
	description = ["making windows binary"]
	descriptionDone = ["windows binary"]
	command = ["zip", "-jr", WithProperties("build-mingw-wx28/springlobby-"+base_rev+"%(buildnumber)s-win32.zip"), "build-mingw-wx28/wininst"]

class WindowsLocales(ShellCommand) :
	name = "windows locale"
	description = ["adding locales to win zip"]
	descriptionDone = ["windows locale added"]
	command = ["/bin/sh", "./tools/buildbot-add-locale-win-zip.sh", WithProperties("springlobby-"+base_rev+"%(buildnumber)s-win32.zip")]

class ReleaseWin(ShellCommand) :
	name = "release windows binary"
	description = ["releasing windows binary"]
	descriptionDone = ["windows binary release"]
	command = ["/usr/bin/install","-t", "/usr/local/www/springlobby.info/windows/", WithProperties("build-mingw-wx28/springlobby-"+base_rev+"%(buildnumber)s-win32.zip")]

class ReleaseTarball(ShellCommand) :
	name = "release tarball"
	description = ["releasing tarball"]
	descriptionDone = ["tarball release"]
	command = ["/usr/bin/install", "-t", "/usr/local/www/springlobby.info/tarballs/", WithProperties("build/springlobby-"+base_rev+"%(buildnumber)s.tar.gz"), WithProperties("build/springlobby-"+base_rev+"%(buildnumber)s.tar.bz2")]

class RsyncStuff(ShellCommand) :
	name = "RSYNC stuff"
	description = ["rsycn tarball and windows zip"]
	descriptionDone = ["rsync done"]
	command =["rsync", "-lrvz", "/usr/local/www/springlobby.info/", "kosh@springlobby.info:/usr/local/www/springlobby.info/"]

class GitTag(ShellCommand) :
	name = "git tag"
	description = "git tagging"
	descriptionDone = "git tag"
	command = ["git","tag", "-a", "-m", WithProperties(base_rev+"%(buildnumber)s"),  WithProperties(base_rev+"%(buildnumber)s")]

class ReportNews(ShellCommand) :
	name = "report"
	description = "report"
	descriptionDone = "reported"
	command = ["/usr/bin/sl_report.py", WithProperties(base_rev+"%(buildnumber)s")]

class AnnounceBuild(ShellCommand) :
	name = "announce"
	description = "announce build in #springlobby"
	descriptionDone = "announced"
	command = ["/usr/bin/sl_announce.py"]

# TODO fail and stop the build if this fails
class CreateBuildDirs(ShellCommand) :
	name = "build dir create"
	description = "creating build dirs"
	descriptionDone = "build dirs created"
	command = ["/bin/bash", "./buildbot/create-build-dirs.sh", '/share/sources/spring-cross/win32/win32.cmake','/share/sources/spring-cross/win32/libs']

class PublishVersion(ShellCommand) :
	name = "publish version number"
	description = "publishing version"
	descriptionDone = "published version"
	command = ["/bin/bash", "-c", WithProperties("echo "+base_rev+"%(buildnumber)s > /usr/local/www/springlobby.info/version/latest.txt")]

class UpdateRPM(ShellCommand) :
	""" TODO osc needs user/pass for opensuse build service
		but of course we can't set them here, so you have to do it manually the first time"""
	name = "update rpm"
	description = "updating rpm"
	descriptionDone = "updated rpm"
	command = ["/bin/bash", "./tools/update-rpm.sh", WithProperties(base_rev+"%(buildnumber)s")]

class UploadTempBuild(ShellCommand) :
	name = "upload exe"
	description = "uploading exe"
	descriptionDone = "uploaded exe"
	command = ["/bin/bash", "./tools/upload-temp-win-build.sh", "build-mingw-wx28", WithProperties("%s","branch")]

class UploadTempDebugBuild(ShellCommand) :
	name = "upload exe"
	description = "uploading exe"
	descriptionDone = "uploaded exe"
	command = ["/bin/bash", "./tools/upload-temp-win-build_debug.sh", "build-mingw-wx28", WithProperties("%s","branch")]

# common build config steps ---------------------------------------------@
class buildConfig(Compile):
	name = 'buildConfig'
	def __init__(self, **kwargs):
		Compile.__init__(self, **kwargs)
		if 'configname' in kwargs:
			self.configname 		= kwargs['configname']
			print 'config found: ',self.configname
		else:
			self.configname 		= 'default'
			print 'no config found, using default'
		#self.name 			= self.configname + " build"
		self.description 	= ["building " + self.configname + " config"]
		self.descriptionDone	= ["built " + self.configname + " config"]
		self.command			= ['make' ,'-k', '-j4', '-C', 'build-%s'%(self.configname)]
# end common build config steps -----------------------------------------@

f2 = BuildFactory()
f2.addStep(Git(repourl=master_repo))
f2.addStep(BuildDocs())

b2 = {'name': "docs",
      'slavename': "testslave",
      'builddir': "docs",
      'factory': f2,
      }
c['builders'].append(b2)

class DeveloperBuildFactory(BuildFactory):
	def __init__(self, who):
		BuildFactory.__init__(self)
		self.addStep(Git(repourl=('git://github.com/%s/spring.git'%who)))
		self.addStep(CreateBuildDirs())
		self.addStep(buildConfig, configname='MT')
		self.addStep(buildConfig(configname='debug2'))
		self.addStep(buildConfig(configname='MTDEBUG'))
		self.addStep(buildConfig(configname='profiling'))
		self.addStep(buildConfig(configname='syncdebug'))
		self.addStep(buildConfig(configname='syncdebug2'))

# TODO refactor!
b2 = {'name': "springlobby",
      'slavenames': ["testslave"],
      'builddir': "springlobby",
      'factory': DeveloperBuildFactory("springlobby")
     }
c['builders'].append(b2)

####### STATUS TARGETS

#from buildbot.status.html import WebStatus
#c['status'].append(WebStatus(
#      http_port=8010))

#this is supposed to be in 0.80+
#from buildbot.status.web.authentication import *
#filen = '/usr/local/svn/svn.passwd' 
#from buildbot.status import html
#c['status'].append(html.WebStatus(http_port=8010, allowForce=True, auth=HTPasswdAuth(filen)))
#

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8080, allowForce=True))
c['status'].append(html.WebStatus(http_port=8081, allowForce=False))

#from buildbot.status import words
#c['status'].append(words.IRC(host="orwell.freenode.net", nick="springlobby",
#                             channels=["#springlobby"]))

from buildbot.status import client
c['status'].append(client.PBListener(9988))

from buildbot.status.mail import MailNotifier
#mn = MailNotifier(fromaddr="koshi@springlobby.info",builders=['release'],
#                       sendToInterestedUsers=False,
#                       extraRecipients=['releases@www.springlobby.info'])
#bnames = ['koshi-win_dbg','dummy','tc','koshi','release','docs','BrainDamage','bd-win',
	#'tobi','olemars','koshi-win_dbg','koshi-full','koshi-win','olemars-win','tc-win']
#mn = SpringNotifier( builders=bnames,mode='all')
#c['status'].append(mn)

####### DEBUGGING OPTIONS

#c['debugPassword'] = "debugpassword"
#c['manhole'] = buildbot.manhole.PasswordManhole("tcp:9999:interface=127.0.0.1", "admin", "password")

####### PROJECT IDENTITY

c['projectName'] = "Spring"
c['projectURL'] = "http://springrts.com"
c['buildbotURL'] = "http://kosh.homedns.org:8080/"

