/* File generated by extgen.cpp -- do not modify */
#ifdef GLH_EXT_SINGLE_FILE
	#define GLH_EXTERN
#else
	#define GLH_EXTERN extern
#endif

#ifdef GL_ARB_multitexture
    GLH_EXTERN PFNGLMULTITEXCOORD1DARBPROC glMultiTexCoord1dARB;
    GLH_EXTERN PFNGLMULTITEXCOORD1DVARBPROC glMultiTexCoord1dvARB;
    GLH_EXTERN PFNGLMULTITEXCOORD1FARBPROC glMultiTexCoord1fARB;
    GLH_EXTERN PFNGLMULTITEXCOORD1FVARBPROC glMultiTexCoord1fvARB;
    GLH_EXTERN PFNGLMULTITEXCOORD1IARBPROC glMultiTexCoord1iARB;
    GLH_EXTERN PFNGLMULTITEXCOORD1IVARBPROC glMultiTexCoord1ivARB;
    GLH_EXTERN PFNGLMULTITEXCOORD1SARBPROC glMultiTexCoord1sARB;
    GLH_EXTERN PFNGLMULTITEXCOORD1SVARBPROC glMultiTexCoord1svARB;
    GLH_EXTERN PFNGLMULTITEXCOORD2DARBPROC glMultiTexCoord2dARB;
    GLH_EXTERN PFNGLMULTITEXCOORD2DVARBPROC glMultiTexCoord2dvARB;
    GLH_EXTERN PFNGLMULTITEXCOORD2FARBPROC glMultiTexCoord2fARB;
    GLH_EXTERN PFNGLMULTITEXCOORD2FVARBPROC glMultiTexCoord2fvARB;
    GLH_EXTERN PFNGLMULTITEXCOORD2IARBPROC glMultiTexCoord2iARB;
    GLH_EXTERN PFNGLMULTITEXCOORD2IVARBPROC glMultiTexCoord2ivARB;
    GLH_EXTERN PFNGLMULTITEXCOORD2SARBPROC glMultiTexCoord2sARB;
    GLH_EXTERN PFNGLMULTITEXCOORD2SVARBPROC glMultiTexCoord2svARB;
    GLH_EXTERN PFNGLMULTITEXCOORD3DARBPROC glMultiTexCoord3dARB;
    GLH_EXTERN PFNGLMULTITEXCOORD3DVARBPROC glMultiTexCoord3dvARB;
    GLH_EXTERN PFNGLMULTITEXCOORD3FARBPROC glMultiTexCoord3fARB;
    GLH_EXTERN PFNGLMULTITEXCOORD3FVARBPROC glMultiTexCoord3fvARB;
    GLH_EXTERN PFNGLMULTITEXCOORD3IARBPROC glMultiTexCoord3iARB;
    GLH_EXTERN PFNGLMULTITEXCOORD3IVARBPROC glMultiTexCoord3ivARB;
    GLH_EXTERN PFNGLMULTITEXCOORD3SARBPROC glMultiTexCoord3sARB;
    GLH_EXTERN PFNGLMULTITEXCOORD3SVARBPROC glMultiTexCoord3svARB;
    GLH_EXTERN PFNGLMULTITEXCOORD4DARBPROC glMultiTexCoord4dARB;
    GLH_EXTERN PFNGLMULTITEXCOORD4DVARBPROC glMultiTexCoord4dvARB;
    GLH_EXTERN PFNGLMULTITEXCOORD4FARBPROC glMultiTexCoord4fARB;
    GLH_EXTERN PFNGLMULTITEXCOORD4FVARBPROC glMultiTexCoord4fvARB;
    GLH_EXTERN PFNGLMULTITEXCOORD4IARBPROC glMultiTexCoord4iARB;
    GLH_EXTERN PFNGLMULTITEXCOORD4IVARBPROC glMultiTexCoord4ivARB;
    GLH_EXTERN PFNGLMULTITEXCOORD4SARBPROC glMultiTexCoord4sARB;
    GLH_EXTERN PFNGLMULTITEXCOORD4SVARBPROC glMultiTexCoord4svARB;
    GLH_EXTERN PFNGLACTIVETEXTUREARBPROC glActiveTextureARB;
    GLH_EXTERN PFNGLCLIENTACTIVETEXTUREARBPROC glClientActiveTextureARB;
#endif

#ifdef GL_EXT_blend_color
    GLH_EXTERN PFNGLBLENDCOLOREXTPROC glBlendColorEXT;
#endif

#ifdef GL_EXT_blend_minmax
    GLH_EXTERN PFNGLBLENDEQUATIONEXTPROC glBlendEquationEXT;
#endif

#ifdef GL_EXT_fog_coord
    GLH_EXTERN PFNGLFOGCOORDDEXTPROC glFogCoorddEXT;
    GLH_EXTERN PFNGLFOGCOORDDVEXTPROC glFogCoorddvEXT;
    GLH_EXTERN PFNGLFOGCOORDFEXTPROC glFogCoordfEXT;
    GLH_EXTERN PFNGLFOGCOORDFVEXTPROC glFogCoordfvEXT;
    GLH_EXTERN PFNGLFOGCOORDPOINTEREXTPROC glFogCoordPointerEXT;
#endif

#ifdef GL_EXT_secondary_color
    GLH_EXTERN PFNGLSECONDARYCOLOR3BEXTPROC glSecondaryColor3bEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3BVEXTPROC glSecondaryColor3bvEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3DEXTPROC glSecondaryColor3dEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3DVEXTPROC glSecondaryColor3dvEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3FEXTPROC glSecondaryColor3fEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3FVEXTPROC glSecondaryColor3fvEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3IEXTPROC glSecondaryColor3iEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3IVEXTPROC glSecondaryColor3ivEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3SEXTPROC glSecondaryColor3sEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3SVEXTPROC glSecondaryColor3svEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UBEXTPROC glSecondaryColor3ubEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UBVEXTPROC glSecondaryColor3ubvEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UIEXTPROC glSecondaryColor3uiEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UIVEXTPROC glSecondaryColor3uivEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3USEXTPROC glSecondaryColor3usEXT;
    GLH_EXTERN PFNGLSECONDARYCOLOR3USVEXTPROC glSecondaryColor3usvEXT;
    GLH_EXTERN PFNGLSECONDARYCOLORPOINTEREXTPROC glSecondaryColorPointerEXT;
#endif

#ifdef GL_NV_fence
    GLH_EXTERN PFNGLGENFENCESNVPROC glGenFencesNV;
    GLH_EXTERN PFNGLDELETEFENCESNVPROC glDeleteFencesNV;
    GLH_EXTERN PFNGLSETFENCENVPROC glSetFenceNV;
    GLH_EXTERN PFNGLTESTFENCENVPROC glTestFenceNV;
    GLH_EXTERN PFNGLFINISHFENCENVPROC glFinishFenceNV;
    GLH_EXTERN PFNGLISFENCENVPROC glIsFenceNV;
    GLH_EXTERN PFNGLGETFENCEIVNVPROC glGetFenceivNV;
#endif

#ifdef GL_NV_register_combiners
    GLH_EXTERN PFNGLCOMBINERPARAMETERFVNVPROC glCombinerParameterfvNV;
    GLH_EXTERN PFNGLCOMBINERPARAMETERFNVPROC glCombinerParameterfNV;
    GLH_EXTERN PFNGLCOMBINERPARAMETERIVNVPROC glCombinerParameterivNV;
    GLH_EXTERN PFNGLCOMBINERPARAMETERINVPROC glCombinerParameteriNV;
    GLH_EXTERN PFNGLCOMBINERINPUTNVPROC glCombinerInputNV;
    GLH_EXTERN PFNGLCOMBINEROUTPUTNVPROC glCombinerOutputNV;
    GLH_EXTERN PFNGLFINALCOMBINERINPUTNVPROC glFinalCombinerInputNV;
    GLH_EXTERN PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glGetCombinerInputParameterfvNV;
    GLH_EXTERN PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glGetCombinerInputParameterivNV;
    GLH_EXTERN PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glGetCombinerOutputParameterfvNV;
    GLH_EXTERN PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glGetCombinerOutputParameterivNV;
    GLH_EXTERN PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glGetFinalCombinerInputParameterfvNV;
    GLH_EXTERN PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glGetFinalCombinerInputParameterivNV;
#endif

#ifdef GL_NV_vertex_array_range
    GLH_EXTERN PFNGLFLUSHVERTEXARRAYRANGENVPROC glFlushVertexArrayRangeNV;
    GLH_EXTERN PFNGLVERTEXARRAYRANGENVPROC glVertexArrayRangeNV;
    GLH_EXTERN PFNWGLALLOCATEMEMORYNVPROC wglAllocateMemoryNV;
    GLH_EXTERN PFNWGLFREEMEMORYNVPROC wglFreeMemoryNV;
#endif


#ifdef GLH_EXT_SINGLE_FILE
int InitExtension(const char* extension)
{
    if (NULL == extension) {
        return FALSE;
#ifdef GL_ARB_multitexture
    } else if (0 == strcmp(extension, "GL_ARB_multitexture")) {
        glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC)wglGetProcAddress("glMultiTexCoord1dARB");
        if (NULL == glMultiTexCoord1dARB)
            return FALSE;
        glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC)wglGetProcAddress("glMultiTexCoord1dvARB");
        if (NULL == glMultiTexCoord1dvARB)
            return FALSE;
        glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC)wglGetProcAddress("glMultiTexCoord1fARB");
        if (NULL == glMultiTexCoord1fARB)
            return FALSE;
        glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC)wglGetProcAddress("glMultiTexCoord1fvARB");
        if (NULL == glMultiTexCoord1fvARB)
            return FALSE;
        glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC)wglGetProcAddress("glMultiTexCoord1iARB");
        if (NULL == glMultiTexCoord1iARB)
            return FALSE;
        glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC)wglGetProcAddress("glMultiTexCoord1ivARB");
        if (NULL == glMultiTexCoord1ivARB)
            return FALSE;
        glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC)wglGetProcAddress("glMultiTexCoord1sARB");
        if (NULL == glMultiTexCoord1sARB)
            return FALSE;
        glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC)wglGetProcAddress("glMultiTexCoord1svARB");
        if (NULL == glMultiTexCoord1svARB)
            return FALSE;
        glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC)wglGetProcAddress("glMultiTexCoord2dARB");
        if (NULL == glMultiTexCoord2dARB)
            return FALSE;
        glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC)wglGetProcAddress("glMultiTexCoord2dvARB");
        if (NULL == glMultiTexCoord2dvARB)
            return FALSE;
        glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC)wglGetProcAddress("glMultiTexCoord2fARB");
        if (NULL == glMultiTexCoord2fARB)
            return FALSE;
        glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC)wglGetProcAddress("glMultiTexCoord2fvARB");
        if (NULL == glMultiTexCoord2fvARB)
            return FALSE;
        glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC)wglGetProcAddress("glMultiTexCoord2iARB");
        if (NULL == glMultiTexCoord2iARB)
            return FALSE;
        glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC)wglGetProcAddress("glMultiTexCoord2ivARB");
        if (NULL == glMultiTexCoord2ivARB)
            return FALSE;
        glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC)wglGetProcAddress("glMultiTexCoord2sARB");
        if (NULL == glMultiTexCoord2sARB)
            return FALSE;
        glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC)wglGetProcAddress("glMultiTexCoord2svARB");
        if (NULL == glMultiTexCoord2svARB)
            return FALSE;
        glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC)wglGetProcAddress("glMultiTexCoord3dARB");
        if (NULL == glMultiTexCoord3dARB)
            return FALSE;
        glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC)wglGetProcAddress("glMultiTexCoord3dvARB");
        if (NULL == glMultiTexCoord3dvARB)
            return FALSE;
        glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC)wglGetProcAddress("glMultiTexCoord3fARB");
        if (NULL == glMultiTexCoord3fARB)
            return FALSE;
        glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC)wglGetProcAddress("glMultiTexCoord3fvARB");
        if (NULL == glMultiTexCoord3fvARB)
            return FALSE;
        glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC)wglGetProcAddress("glMultiTexCoord3iARB");
        if (NULL == glMultiTexCoord3iARB)
            return FALSE;
        glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC)wglGetProcAddress("glMultiTexCoord3ivARB");
        if (NULL == glMultiTexCoord3ivARB)
            return FALSE;
        glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC)wglGetProcAddress("glMultiTexCoord3sARB");
        if (NULL == glMultiTexCoord3sARB)
            return FALSE;
        glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC)wglGetProcAddress("glMultiTexCoord3svARB");
        if (NULL == glMultiTexCoord3svARB)
            return FALSE;
        glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC)wglGetProcAddress("glMultiTexCoord4dARB");
        if (NULL == glMultiTexCoord4dARB)
            return FALSE;
        glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC)wglGetProcAddress("glMultiTexCoord4dvARB");
        if (NULL == glMultiTexCoord4dvARB)
            return FALSE;
        glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC)wglGetProcAddress("glMultiTexCoord4fARB");
        if (NULL == glMultiTexCoord4fARB)
            return FALSE;
        glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC)wglGetProcAddress("glMultiTexCoord4fvARB");
        if (NULL == glMultiTexCoord4fvARB)
            return FALSE;
        glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC)wglGetProcAddress("glMultiTexCoord4iARB");
        if (NULL == glMultiTexCoord4iARB)
            return FALSE;
        glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC)wglGetProcAddress("glMultiTexCoord4ivARB");
        if (NULL == glMultiTexCoord4ivARB)
            return FALSE;
        glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC)wglGetProcAddress("glMultiTexCoord4sARB");
        if (NULL == glMultiTexCoord4sARB)
            return FALSE;
        glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC)wglGetProcAddress("glMultiTexCoord4svARB");
        if (NULL == glMultiTexCoord4svARB)
            return FALSE;
        glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)wglGetProcAddress("glActiveTextureARB");
        if (NULL == glActiveTextureARB)
            return FALSE;
        glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC)wglGetProcAddress("glClientActiveTextureARB");
        if (NULL == glClientActiveTextureARB)
            return FALSE;
#endif

#ifdef GL_EXT_blend_color
    } else if (0 == strcmp(extension, "GL_EXT_blend_color")) {
        glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC)wglGetProcAddress("glBlendColorEXT");
        if (NULL == glBlendColorEXT)
            return FALSE;
#endif

#ifdef GL_EXT_blend_minmax
    } else if (0 == strcmp(extension, "GL_EXT_blend_minmax")) {
        glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)wglGetProcAddress("glBlendEquationEXT");
        if (NULL == glBlendEquationEXT)
            return FALSE;
#endif

#ifdef GL_EXT_fog_coord
    } else if (0 == strcmp(extension, "GL_EXT_fog_coord")) {
        glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC)wglGetProcAddress("glFogCoorddEXT");
        if (NULL == glFogCoorddEXT)
            return FALSE;
        glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC)wglGetProcAddress("glFogCoorddvEXT");
        if (NULL == glFogCoorddvEXT)
            return FALSE;
        glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC)wglGetProcAddress("glFogCoordfEXT");
        if (NULL == glFogCoordfEXT)
            return FALSE;
        glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC)wglGetProcAddress("glFogCoordfvEXT");
        if (NULL == glFogCoordfvEXT)
            return FALSE;
        glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC)wglGetProcAddress("glFogCoordPointerEXT");
        if (NULL == glFogCoordPointerEXT)
            return FALSE;
#endif

#ifdef GL_EXT_secondary_color
    } else if (0 == strcmp(extension, "GL_EXT_secondary_color")) {
        glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC)wglGetProcAddress("glSecondaryColor3bEXT");
        if (NULL == glSecondaryColor3bEXT)
            return FALSE;
        glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC)wglGetProcAddress("glSecondaryColor3bvEXT");
        if (NULL == glSecondaryColor3bvEXT)
            return FALSE;
        glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC)wglGetProcAddress("glSecondaryColor3dEXT");
        if (NULL == glSecondaryColor3dEXT)
            return FALSE;
        glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC)wglGetProcAddress("glSecondaryColor3dvEXT");
        if (NULL == glSecondaryColor3dvEXT)
            return FALSE;
        glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC)wglGetProcAddress("glSecondaryColor3fEXT");
        if (NULL == glSecondaryColor3fEXT)
            return FALSE;
        glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC)wglGetProcAddress("glSecondaryColor3fvEXT");
        if (NULL == glSecondaryColor3fvEXT)
            return FALSE;
        glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC)wglGetProcAddress("glSecondaryColor3iEXT");
        if (NULL == glSecondaryColor3iEXT)
            return FALSE;
        glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC)wglGetProcAddress("glSecondaryColor3ivEXT");
        if (NULL == glSecondaryColor3ivEXT)
            return FALSE;
        glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC)wglGetProcAddress("glSecondaryColor3sEXT");
        if (NULL == glSecondaryColor3sEXT)
            return FALSE;
        glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC)wglGetProcAddress("glSecondaryColor3svEXT");
        if (NULL == glSecondaryColor3svEXT)
            return FALSE;
        glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC)wglGetProcAddress("glSecondaryColor3ubEXT");
        if (NULL == glSecondaryColor3ubEXT)
            return FALSE;
        glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC)wglGetProcAddress("glSecondaryColor3ubvEXT");
        if (NULL == glSecondaryColor3ubvEXT)
            return FALSE;
        glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC)wglGetProcAddress("glSecondaryColor3uiEXT");
        if (NULL == glSecondaryColor3uiEXT)
            return FALSE;
        glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC)wglGetProcAddress("glSecondaryColor3uivEXT");
        if (NULL == glSecondaryColor3uivEXT)
            return FALSE;
        glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC)wglGetProcAddress("glSecondaryColor3usEXT");
        if (NULL == glSecondaryColor3usEXT)
            return FALSE;
        glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC)wglGetProcAddress("glSecondaryColor3usvEXT");
        if (NULL == glSecondaryColor3usvEXT)
            return FALSE;
        glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC)wglGetProcAddress("glSecondaryColorPointerEXT");
        if (NULL == glSecondaryColorPointerEXT)
            return FALSE;
#endif

#ifdef GL_NV_fence
    } else if (0 == strcmp(extension, "GL_NV_fence")) {
        glGenFencesNV = (PFNGLGENFENCESNVPROC)wglGetProcAddress("glGenFencesNV");
        if (NULL == glGenFencesNV)
            return FALSE;
        glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC)wglGetProcAddress("glDeleteFencesNV");
        if (NULL == glDeleteFencesNV)
            return FALSE;
        glSetFenceNV = (PFNGLSETFENCENVPROC)wglGetProcAddress("glSetFenceNV");
        if (NULL == glSetFenceNV)
            return FALSE;
        glTestFenceNV = (PFNGLTESTFENCENVPROC)wglGetProcAddress("glTestFenceNV");
        if (NULL == glTestFenceNV)
            return FALSE;
        glFinishFenceNV = (PFNGLFINISHFENCENVPROC)wglGetProcAddress("glFinishFenceNV");
        if (NULL == glFinishFenceNV)
            return FALSE;
        glIsFenceNV = (PFNGLISFENCENVPROC)wglGetProcAddress("glIsFenceNV");
        if (NULL == glIsFenceNV)
            return FALSE;
        glGetFenceivNV = (PFNGLGETFENCEIVNVPROC)wglGetProcAddress("glGetFenceivNV");
        if (NULL == glGetFenceivNV)
            return FALSE;
#endif

#ifdef GL_NV_register_combiners
    } else if (0 == strcmp(extension, "GL_NV_register_combiners")) {
        glCombinerParameterfvNV = (PFNGLCOMBINERPARAMETERFVNVPROC)wglGetProcAddress("glCombinerParameterfvNV");
        if (NULL == glCombinerParameterfvNV)
            return FALSE;
        glCombinerParameterfNV = (PFNGLCOMBINERPARAMETERFNVPROC)wglGetProcAddress("glCombinerParameterfNV");
        if (NULL == glCombinerParameterfNV)
            return FALSE;
        glCombinerParameterivNV = (PFNGLCOMBINERPARAMETERIVNVPROC)wglGetProcAddress("glCombinerParameterivNV");
        if (NULL == glCombinerParameterivNV)
            return FALSE;
        glCombinerParameteriNV = (PFNGLCOMBINERPARAMETERINVPROC)wglGetProcAddress("glCombinerParameteriNV");
        if (NULL == glCombinerParameteriNV)
            return FALSE;
        glCombinerInputNV = (PFNGLCOMBINERINPUTNVPROC)wglGetProcAddress("glCombinerInputNV");
        if (NULL == glCombinerInputNV)
            return FALSE;
        glCombinerOutputNV = (PFNGLCOMBINEROUTPUTNVPROC)wglGetProcAddress("glCombinerOutputNV");
        if (NULL == glCombinerOutputNV)
            return FALSE;
        glFinalCombinerInputNV = (PFNGLFINALCOMBINERINPUTNVPROC)wglGetProcAddress("glFinalCombinerInputNV");
        if (NULL == glFinalCombinerInputNV)
            return FALSE;
        glGetCombinerInputParameterfvNV = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)wglGetProcAddress("glGetCombinerInputParameterfvNV");
        if (NULL == glGetCombinerInputParameterfvNV)
            return FALSE;
        glGetCombinerInputParameterivNV = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)wglGetProcAddress("glGetCombinerInputParameterivNV");
        if (NULL == glGetCombinerInputParameterivNV)
            return FALSE;
        glGetCombinerOutputParameterfvNV = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)wglGetProcAddress("glGetCombinerOutputParameterfvNV");
        if (NULL == glGetCombinerOutputParameterfvNV)
            return FALSE;
        glGetCombinerOutputParameterivNV = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)wglGetProcAddress("glGetCombinerOutputParameterivNV");
        if (NULL == glGetCombinerOutputParameterivNV)
            return FALSE;
        glGetFinalCombinerInputParameterfvNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)wglGetProcAddress("glGetFinalCombinerInputParameterfvNV");
        if (NULL == glGetFinalCombinerInputParameterfvNV)
            return FALSE;
        glGetFinalCombinerInputParameterivNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)wglGetProcAddress("glGetFinalCombinerInputParameterivNV");
        if (NULL == glGetFinalCombinerInputParameterivNV)
            return FALSE;
#endif

#ifdef GL_NV_vertex_array_range
    } else if (0 == strcmp(extension, "GL_NV_vertex_array_range")) {
        glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC)wglGetProcAddress("glFlushVertexArrayRangeNV");
        if (NULL == glFlushVertexArrayRangeNV)
            return FALSE;
        glVertexArrayRangeNV = (PFNGLVERTEXARRAYRANGENVPROC)wglGetProcAddress("glVertexArrayRangeNV");
        if (NULL == glVertexArrayRangeNV)
            return FALSE;
        wglAllocateMemoryNV = (PFNWGLALLOCATEMEMORYNVPROC)wglGetProcAddress("wglAllocateMemoryNV");
        if (NULL == wglAllocateMemoryNV)
            return FALSE;
        wglFreeMemoryNV = (PFNWGLFREEMEMORYNVPROC)wglGetProcAddress("wglFreeMemoryNV");
        if (NULL == wglFreeMemoryNV)
            return FALSE;
#endif

    } else {
        return FALSE;
    }
    return TRUE;
}
#endif

