import os, re, sys


############################################
### files and directories used for build ###
############################################

directories=Split("""
ExternalAI
Game
Game/StartScripts
Game/UI
Game/UI/GUI
lib
lib/7zip
lib/ft
lib/hpiutil2
lib/libhpi
lib/minizip
Rendering
Rendering/Env
Rendering/GL
Rendering/Map
Rendering/Textures
Rendering/UnitModels
Sim
Sim/Map
Sim/Misc
Sim/MoveTypes
Sim/MoveTypes/MoveMath
Sim/Objects
Sim/Path
Sim/Projectiles
Sim/Units
Sim/Units/COB
Sim/Units/CommandAI
Sim/Units/UnitTypes
Sim/Weapons
System
System/FileSystem
System/Platform
System/Platform/Linux
System/Platform/Win
System/Script
""")

#generated with: cd rts && find . -name \*.c\* | grep -v "/\." | sed "s|\./||g" | sort
ExternalAI_files=Split("""
ExternalAI/AICallback.cpp
ExternalAI/AICheats.cpp
ExternalAI/GlobalAICallback.cpp
ExternalAI/GlobalAI.cpp
ExternalAI/GlobalAIHandler.cpp
ExternalAI/GroupAiCallback.cpp
ExternalAI/Group.cpp
ExternalAI/GroupHandler.cpp
""")
Game_files=Split("""
Game/CameraController.cpp
Game/Camera.cpp
Game/GameController.cpp
Game/Game.cpp
Game/GameHelper.cpp
Game/GameServer.cpp
Game/GameSetup.cpp
Game/Player.cpp
Game/PreGame.cpp
Game/SelectedUnitsAI.cpp
Game/SelectedUnits.cpp
Game/StartScripts/AirScript.cpp
Game/StartScripts/CommanderScript2.cpp
Game/StartScripts/CommanderScript.cpp
Game/StartScripts/EmptyScript.cpp
Game/StartScripts/GlobalAITestScript.cpp
Game/StartScripts/LoadScript.cpp
Game/StartScripts/Script.cpp
Game/StartScripts/ScriptHandler.cpp
Game/StartScripts/SpawnScript.cpp
Game/StartScripts/SWTATestScrip.cpp
Game/StartScripts/TestScript.cpp
Game/StartScripts/YehaTestScript.cpp
Game/Team.cpp
Game/UI/EndGameBox.cpp
Game/UI/GUI/GUIallyResourceBar.cpp
Game/UI/GUI/GUIbuildMenu.cpp
Game/UI/GUI/GUIbutton.cpp
Game/UI/GUI/GUIcenterBuildMenu.cpp
Game/UI/GUI/GUICommandPool.cpp
Game/UI/GUI/GUIconsole.cpp
Game/UI/GUI/GUIcontroller.cpp
Game/UI/GUI/GUIendgameDialog.cpp
Game/UI/GUI/GUIfont.cpp
Game/UI/GUI/GUIframe.cpp
Game/UI/GUI/GUIgame.cpp
Game/UI/GUI/GUIgraph.cpp
Game/UI/GUI/GUIimage.cpp
Game/UI/GUI/GUIinfoSelection.cpp
Game/UI/GUI/GUIinput.cpp
Game/UI/GUI/GUIlabel.cpp
Game/UI/GUI/GUImatrix.cpp
Game/UI/GUI/GUIminimap.cpp
Game/UI/GUI/GUIpane.cpp
Game/UI/GUI/GUIresourceBar.cpp
Game/UI/GUI/GUIscrollbar.cpp
Game/UI/GUI/GUIsharingDialog.cpp
Game/UI/GUI/GUIslider.cpp
Game/UI/GUI/GUIstateButton.cpp
Game/UI/GUI/GUIswitchBar.cpp
Game/UI/GUI/GUItab.cpp
Game/UI/GUI/GUItable.cpp
Game/UI/GuiHandler.cpp
Game/UI/GuiKeyReader.cpp
Game/UI/InfoConsole.cpp
Game/UI/InputReceiver.cpp
Game/UI/MiniMap.cpp
Game/UI/MouseCursor.cpp
Game/UI/MouseHandler.cpp
Game/UI/ResourceBar.cpp
Game/UI/SelectionKeyHandler.cpp
Game/UI/ShareBox.cpp
Game/UI/StartPosSelecter.cpp
Game/UI/TooltipConsole.cpp
""")
lzma_files=Split("""
lib/7zip/7zAlloc.c
lib/7zip/7zBuffer.c
lib/7zip/7zCrc.c
lib/7zip/7zDecode.c
lib/7zip/7zExtract.c
lib/7zip/7zHeader.c
lib/7zip/7zIn.c
lib/7zip/7zItem.c
lib/7zip/7zMethodID.c
lib/7zip/LzmaDecode.c
""")
#hpiutil2 is optional, enabled by default
hpiutil2_files=Split("""
lib/hpiutil2/hpientry.cpp
lib/hpiutil2/hpifile.cpp
lib/hpiutil2/hpiutil.cpp
lib/hpiutil2/scrambledfile.cpp
lib/hpiutil2/sqshstream.cpp
lib/hpiutil2/substream.cpp
""")
#libhpi_files is unused at the moment
libhpi_files=Split("""
lib/libhpi/HPIFile.cpp
""")
minizip_files=Split("""
lib/minizip/ioapi.c
lib/minizip/unzip.c
lib/minizip/zip.c
""")
minizip_windows_files=Split("""
lib/minizip/iowin32.c
""")
Rendering_files=Split("""
Rendering/Env/AdvSky.cpp
Rendering/Env/AdvTreeDrawer.cpp
Rendering/Env/AdvTreeGenerator.cpp
Rendering/Env/AdvWater.cpp
Rendering/Env/BaseSky.cpp
Rendering/Env/BaseTreeDrawer.cpp
Rendering/Env/BaseWater.cpp
Rendering/Env/BasicSky.cpp
Rendering/Env/BasicTreeDrawer.cpp
Rendering/Env/BasicWater.cpp
Rendering/Env/DynWater.cpp
Rendering/Env/GrassDrawer.cpp
Rendering/Env/SkyBox.cpp
Rendering/ExplosionGraphics.cpp
Rendering/FartextureHandler.cpp
Rendering/GL/FBO.cpp
Rendering/glFont.cpp
Rendering/GL/glExtra.cpp
Rendering/GL/glList.cpp
Rendering/GL/glTextBox.cpp
Rendering/GL/myGL.cpp
Rendering/GL/VertexArray.cpp
Rendering/GL/VertexArrayRange.cpp
Rendering/GroundDecalHandler.cpp
Rendering/GroundFlash.cpp
Rendering/InMapDraw.cpp
Rendering/Map/BaseGroundDrawer.cpp
Rendering/Map/BFGroundDrawer.cpp
Rendering/Map/BFGroundTextures.cpp
Rendering/RepulseGfx.cpp
Rendering/ShadowHandler.cpp
Rendering/Textures/nv_dds.cpp
Rendering/Textures/TAPalette.cpp
Rendering/Textures/TextureHandler.cpp
Rendering/UnitModels/3DModelParser.cpp
Rendering/UnitModels/3DOParser.cpp
Rendering/UnitModels/s3oParser.cpp
Rendering/UnitModels/Unit3DLoader.cpp
Rendering/UnitModels/UnitDrawer.cpp
""")
Sim_files=Split("""
Sim/Map/Ground.cpp
Sim/Map/MapDamage.cpp
Sim/Map/MetalMap.cpp
Sim/Map/ReadMap.cpp
Sim/Map/SmfReadMap.cpp
Sim/Misc/AirBaseHandler.cpp
Sim/Misc/CategoryHandler.cpp
Sim/Misc/DamageArrayHandler.cpp
Sim/Misc/Feature.cpp
Sim/Misc/FeatureHandler.cpp
Sim/Misc/GeometricObjects.cpp
Sim/Misc/InterceptHandler.cpp
Sim/Misc/LosHandler.cpp
Sim/Misc/QuadField.cpp
Sim/Misc/RadarHandler.cpp
Sim/Misc/Wind.cpp
Sim/MoveTypes/AirMoveType.cpp
Sim/MoveTypes/groundmovetype.cpp
Sim/MoveTypes/Mobility.cpp
Sim/MoveTypes/MoveInfo.cpp
Sim/MoveTypes/MoveMath/GroundMoveMath.cpp
Sim/MoveTypes/MoveMath/HoverMoveMath.cpp
Sim/MoveTypes/MoveMath/MoveMath.cpp
Sim/MoveTypes/MoveMath/ShipMoveMath.cpp
Sim/MoveTypes/MoveType.cpp
Sim/MoveTypes/TAAirMoveType.cpp
Sim/Objects/SolidObject.cpp
Sim/Objects/WorldObject.cpp
Sim/Path/PathCache.cpp
Sim/Path/PathEstimator.cpp
Sim/Path/PathFinder.cpp
Sim/Path/PathManager.cpp
Sim/Projectiles/BeamLaserProjectile.cpp
Sim/Projectiles/BubbleProjectile.cpp
Sim/Projectiles/DirtProjectile.cpp
Sim/Projectiles/EmgProjectile.cpp
Sim/Projectiles/ExplosiveProjectile.cpp
Sim/Projectiles/ExploSpikeProjectile.cpp
Sim/Projectiles/FireBallProjectile.cpp
Sim/Projectiles/FireProjectile.cpp
Sim/Projectiles/FlameProjectile.cpp
Sim/Projectiles/FlareProjectile.cpp
Sim/Projectiles/GeoSquareProjectile.cpp
Sim/Projectiles/GfxProjectile.cpp
Sim/Projectiles/HeatCloudProjectile.cpp
Sim/Projectiles/LaserProjectile.cpp
Sim/Projectiles/LightingProjectile.cpp
Sim/Projectiles/MissileProjectile.cpp
Sim/Projectiles/MuzzleFlame.cpp
Sim/Projectiles/PieceProjectile.cpp
Sim/Projectiles/Projectile.cpp
Sim/Projectiles/ProjectileHandler.cpp
Sim/Projectiles/SmokeProjectile2.cpp
Sim/Projectiles/SmokeProjectile.cpp
Sim/Projectiles/SmokeTrailProjectile.cpp
Sim/Projectiles/SpherePartProjectile.cpp
Sim/Projectiles/StarburstProjectile.cpp
Sim/Projectiles/TorpedoProjectile.cpp
Sim/Projectiles/TracerProjectile.cpp
Sim/Projectiles/WakeProjectile.cpp
Sim/Projectiles/WeaponProjectile.cpp
Sim/Projectiles/WreckProjectile.cpp
Sim/Units/COB/CobEngine.cpp
Sim/Units/COB/CobFile.cpp
Sim/Units/COB/CobInstance.cpp
Sim/Units/COB/CobThread.cpp
Sim/Units/CommandAI/AirCAI.cpp
Sim/Units/CommandAI/BuilderCAI.cpp
Sim/Units/CommandAI/CommandAI.cpp
Sim/Units/CommandAI/FactoryCAI.cpp
Sim/Units/CommandAI/MobileCAI.cpp
Sim/Units/CommandAI/TransportCAI.cpp
Sim/Units/Unit.cpp
Sim/Units/UnitDefHandler.cpp
Sim/Units/UnitHandler.cpp
Sim/Units/UnitLoader.cpp
Sim/Units/UnitTracker.cpp
Sim/Units/UnitTypes/Builder.cpp
Sim/Units/UnitTypes/Building.cpp
Sim/Units/UnitTypes/ExtractorBuilding.cpp
Sim/Units/UnitTypes/Factory.cpp
Sim/Units/UnitTypes/TransportUnit.cpp
Sim/Weapons/BeamLaser.cpp
Sim/Weapons/bombdropper.cpp
Sim/Weapons/Cannon.cpp
Sim/Weapons/DGunWeapon.cpp
Sim/Weapons/EmgCannon.cpp
Sim/Weapons/FlameThrower.cpp
Sim/Weapons/LaserCannon.cpp
Sim/Weapons/LightingCannon.cpp
Sim/Weapons/MeleeWeapon.cpp
Sim/Weapons/MissileLauncher.cpp
Sim/Weapons/NoWeapon.cpp
Sim/Weapons/PlasmaRepulser.cpp
Sim/Weapons/Rifle.cpp
Sim/Weapons/StarburstLauncher.cpp
Sim/Weapons/TorpedoLauncher.cpp
Sim/Weapons/Weapon.cpp
Sim/Weapons/WeaponDefHandler.cpp
""")
System_files=Split("""
System/bget.cpp
System/Bitmap.cpp
System/FileSystem/Archive7Zip.cpp
System/FileSystem/ArchiveBuffered.cpp
System/FileSystem/ArchiveFactory.cpp
System/FileSystem/ArchiveHPI.cpp
System/FileSystem/ArchiveScanner.cpp
System/FileSystem/ArchiveZip.cpp
System/FileSystem/FileHandler.cpp
System/FileSystem/VFSHandler.cpp
System/float3.cpp
System/GlobalStuff.cpp
System/Lesson2.cpp
System/LoadInterface.cpp
System/LoadSaveHandler.cpp
System/LoadSaveInterface.cpp
System/Matrix44f.cpp
System/MemPool.cpp
System/myMath.cpp
System/Net.cpp
System/Object.cpp
System/Platform/BaseCmd.cpp
System/Platform/ConfigHandler.cpp
System/Platform/SharedLib.cpp
System/SaveInterface.cpp
System/Sound.cpp
System/StdAfx.cpp
System/Syncify.cpp
System/SyncTracer.cpp
System/TdfParser.cpp
System/TimeProfiler.cpp
System/creg/ClassReg.cpp
System/creg/VarTypes.cpp
""")
System_windows_files=Split("""
System/mmgr.cpp
System/Platform/Win/DllLib.cpp
System/Platform/Win/RegHandler.cpp
System/Platform/Win/Win32Cmd.cpp
System/Platform/Win/Win32Support.cpp
System/wavread.cpp
""")
System_linux_files=Split("""
System/Platform/Linux/dotfileHandler.cpp
System/Platform/Linux/PosixCmd.cpp
System/Platform/Linux/SoLib.cpp
""")
#System_lua_files should be added to System_files if not disable_lua
System_lua_files=Split("""
System/Script/LuaBinder.cpp
System/Script/LuaFunctions.cpp
""")
#System_libaio_files should be added to System_files if we have libaio
System_libaio_files=Split("""
System/Platform/BackgroundReader.cpp
""")
#System_avi_files should be added to System_files if not disable_avi
System_avi_files=Split("""
System/Platform/Win/AVIGenerator.cpp
""")

common_files=ExternalAI_files+Game_files+lzma_files+minizip_files+Rendering_files+Sim_files+System_files
common_include_path=['.','System']
common_lib_path=[]

windows_files=minizip_windows_files+System_windows_files
windows_include_path=[]
windows_lib_path=[]

linux_files=System_linux_files
linux_include_path=['/usr/include','/usr/include/GL']
linux_lib_path=[]

freebsd_files=linux_files
freebsd_include_path=['/usr/local/include', '/usr/X11R6/include', '/usr/X11R6/include/GL']
freebsd_lib_path=['/usr/local/lib','/usr/X11R6/lib']



########################################
### platform/cpu detection functions ###
########################################

def detect_platform():
	if sys.platform == 'linux2' or sys.platform == 'linux-i386':
		print "Detected platform : linux"
		detected_platform='linux'
	elif sys.platform[:7] == 'freebsd':
		print "Detected platform : freebsd (%s)" % sys.platform
		print "WARNING: support is incomplete"
		detected_platform='freebsd'
	else:
		print "Platform not supported yet, please edit SConstruct file"
		detected_platform='unknown'
	return detected_platform


def detect_processor():
	#this function is unix,linux,freebsd only
	print "Detecting processor..."
	f = open('/proc/cpuinfo', 'r')
	str = f.readline()
	family=-1
	model=-1
	vendor=""
	while str:
		if str.startswith("vendor_id"):
			if str.find("GenuineTMx86") != -1:
				# Transmeta
				vendor="GenuineTMx86"
			elif str.find("GenuineIntel") != -1:
				# Intel
				vendor="GenuineIntel"
			elif str.find("AuthenticAMD"):
				# AMD
				vendor="AuthenticAMD"
		elif str.startswith("cpu "):
			family = re.sub('^[^0-9A-Za-z]*', '', str).strip()
		elif str.startswith("model") and str.find("name") == -1:
			model = re.sub('^[^0-9]*', '', str).strip()
		if vendor == "GenuineTMx86":
			if str.startswith("model name"):
				if str.find("Transmeta Efficeon") != -1:
					# Automatically reorders/realigns when
					# converting to VLIW, so no alignment
					# saves space without sacrificing speed
					print "  found Transmeta Efficeon"
					archflags=['-march=i686', '-mtune=pentium3', '-msse2', '-mfpmath=sse', '-falign-functions=0', '-falign-jumps=0', '-falign-loops=0']
		elif vendor == "GenuineIntel":
			if str.startswith("model name"):
				if str.find("Intel(R) Pentium(R) 4 CPU") != -1:
					print "  found Intel Pentium 4"
					archflags=['-march=pentium4']
				elif str.find("Coppermine") != -1:
					print "  found Intel Celeron (Coppermine)"
					archflags=['-march=pentium3']
				elif str.find("Pentium III") != -1:
					print "  found Intel Pentium III"
					archflags=['-march=pentium3']
				elif str.find("Pentium II") != -1:
					print "  found Intel Pentium II"
					archflags=['-march=pentium2']
				elif str.find("Intel(R) Celeron(R) CPU") != -1:
					print "  found Intel Celeron (Willamette)"
					archflags=['-march=pentium4']
				elif str.find("Celeron") != -1:
					print "  found Intel Celeron 1"
					archflags=['-march=pentium2']
				elif str.find("Intel(R) Pentium(R) M") != -1:
					print "  found Intel Pentium-M"
					archflags=['-march=pentium-m']
				elif str.find("Intel(R) Xeon(R) CPU") != -1:
					print "  found Intel Xeon w/EM64T"
					archflags=['-march=nocona', '-mmmx', '-msse3']
		elif vendor == "AuthenticAMD":
			if str.startswith("model name"):
				if str.find("Duron") != -1:
					if model == 7:
						print "  found AMD Duron Morgan"
						archflags=['-march=athlon-xp']
					elif model == 3:
						print "  found AMD Mobile Duron"
						archflags=['-march=athlon-tbird']
					else:
						print "  found AMD Duron"
						archflags=['-march=athlon-tbird']
				elif str.find("Athlon") != -1:
					if str.find("64") != -1:
						print "  found AMD Athlon 64"
						archflags=['-march=athlon64']
					elif family == 6 and model == 8:
						print "  found AMD Athlon Thunderbird XP"
						archflags=['-march=athlon-xp']
					else:
						print "  found AMD Athlon"
						archflags=['-march=athlon']
				elif str.find("Opteron") != -1:
					print "  found AMD Opteron"
					archflags=['-march=opteron']
		else:
			if str.find("Nehemiah") != -1:
				print "  found VIA Nehemiah"
				archflags=['-march=c3-2']
			elif str.find("Eden") != -1:
				print "  found VIA Eden C3"
				archflags=['-march=c3']
			elif str.find("Ezra") != -1:
				print "  found VIA Ezra"
				archflags=['-march=c3']


		str = f.readline()
	if not archflags:
		if vendor == "":
			if family.find("970"):
				print "  found PowerPC 970 (G5)"
				archflags=['-mtune=G5', '-maltivec', '-mabi=altivec']
			elif family.find("7450"):
				print "  found PowerPC 7450 (G4 v2)"
				archflags=['-mtune=7450', '-maltivec', '-mabi=altivec']
			elif family.find("7400"):
				print "  found PowerPC 7400 (G4)"
				archflags=['-mtune=7400', '-maltivec', '-mabi=altivec']
			elif family.find("750"):
				print "  found PowerPC 750 (G3)"
				archflags=['-mtune=750']
			elif family.find("604e"):
				archflags=['-mtune=604e']
		else:
			# unidentified x86
			archflags=['-march=i686']

	f.close()
	return archflags


#############################
### ./configure functions ###
#############################

def check_debian_powerpc(env, conf):
	if 'Debian' in sys.version:
		# Figure out if we're running on PowerPC
		# and which version of GCC we're dealing with.
		try:
			f = os.popen("echo '' | gcc -E -dM -")
			predefines = f.read()
		finally:
			f.close()
		if predefines:
			if '#define __powerpc__ 1' in predefines:
				if '#define __GNUC__ 4' in predefines:
					old_gpp = env['CXX']
					env['CXX'] = "g++-3.3"
					if not conf.TryCompile('int main(void) { return 0; } ', '.cpp'):
						env['CXX'] = old_gpp
						print "Warning: Compiling with GCC4 on Debian PowerPC. The resulting executable may corrupt the stack before main()."
					else:
						env['CC'] = "gcc-3.3"
						print "Note: Compiling on Debian PowerPC. Switched to GCC 3."


def check_freetype2(env, conf):
	print "Checking for Freetype2... "
	print "  Checking for pkg-config... ",
	lib = []
	freetype = False
	pkgcfg = env.WhereIs("pkg-config")
	cmd = ""
	fcmd = ""
	if pkgcfg:
		print pkgcfg
		print "  Checking for Freetype2 package... ",
		ret = conf.TryAction(pkgcfg+" --exists freetype2")
		if ret[0]:
			print "found"
			cmd = pkgcfg+" --modversion freetype2"
			fcmd = pkgcfg+" --libs --cflags freetype2"
			freetype = True
		else:
			print "not found"
	if not freetype:
		print "  Checking for freetype-config... ",
		freetypecfg = env.WhereIs("freetype-config")
		if freetypecfg:
			print freetypecfg
			ftv = conf.TryAction(freetypecfg+" --ftversion")
			if ftv[0]:
				cmd = freetypecfg+" --ftversion"
				fcmd = freetypecfg+" --cflags --libs"
				freetype = True
			else:
				print "  "+freetypecfg+" does not give library version"
		else:
			print "not found"
	if cmd:
		print "Checking for Freetype >= 2.0.0... ",
		ftobj = os.popen(cmd)
		ftver = ftobj.read()
		fterr = ftobj.close()
		print ftver,
		if ftver.split('.') >= ['2','0','0']:
			env.ParseConfig(fcmd)
		else:
			print "You need Freetype version 2.0.0 or greater for this program"
			Exit(1)
	elif not conf.CheckLib("freetype"):
		print "Freetype2 is required for this program"
		Exit(1)
	else:
		conf.env.Append(CPPPATH=['/usr/include/freetype2'])
		if not conf.CheckCHeader('ft2build.h'):
			print "Freetype2 headers are required for this program"
			Exit(1)
		else:
			lib += ['freetype']
	return lib


def check_sdl(env, conf):
	print "Checking for sdl-config... ",
	sdlcfg = env.WhereIs("sdl-config")
	if sdlcfg:
		print sdlcfg
		print "Checking for LibSDL >= 1.2.0... ",
		sdlobj = os.popen(sdlcfg+" --version")
		sdlver = sdlobj.read()
		sdlerr = sdlobj.close()
		print sdlver,
		if sdlver.split('.') >= ['1','2','0']:
			env.ParseConfig(sdlcfg+" --cflags --libs")
		else:
			print "You need LibSDL version 1.2.0 or greater for this program"
			Exit(1)
	else:
		print "no"
		print 'LibSDL is required for this program'
		Exit(1)
	return []


def check_openal(env, conf):
	print "Checking for openal-config... ",
	lib = []
	openalcfg = env.WhereIs("openal-config")
	if openalcfg:
		print openalcfg
		env.ParseConfig(openalcfg+" --cflags --libs")
	else:
		print "no"
		if not conf.CheckLib('openal'):
			print 'OpenAL is required for this program'
			Exit(1)
		elif not conf.CheckCHeader('AL/al.h'):
			print 'OpenAL headers are required for this program'
			Exit(1)
		else:
			lib = ['openal']
	return lib


def check_headers(env, conf):
	print "\nChecking header files"
	if not conf.CheckCHeader('GL/glew.h'):
		print ' Cannot find GLEW http://glew.sourceforge.net'
		Exit(1)
	if not conf.CheckCXXHeader('boost/cstdint.hpp'):
		print ' Boost library must be installed'
		Exit(1)
	if not conf.CheckCXXHeader('boost/thread.hpp'):
		print ' Cannot find Boost threading headers'
		Exit(1)
	if not conf.CheckCXXHeader('boost/filesystem/path.hpp'):
		print ' Cannot find Boost filesystem headers'
		Exit(1)
	if not conf.CheckCXXHeader('boost/regex.hpp'):
		print ' Cannot find Boost regex header'
		Exit(1)
	if not conf.CheckCXXHeader('boost/spirit.hpp'):
		print ' Cannot find Boost Spirit header'
		Exit(1)
	if not conf.CheckCHeader('IL/il.h'):
		print ' Cannot find DevIL image library header'
		Exit(1)
	if not env['disable_aio']:
		if conf.CheckCHeader('libaio.h'):
			env['libaiostep1'] = True
		else:
			print ' Cannot find libaio headers, disabling asynchronous I/O'
			env['disable_aio'] = True
	if not env['disable_lua']:
		if not conf.CheckCXXHeader('luabind/luabind.hpp'):
			print ' Cannot find Luabind header'
			Exit(1)


def check_libraries(env, conf):
	print "\nChecking libraries"
	if env.Dictionary('CC').find('gcc') != -1:
		gcc = True
	else:
		gcc = False
	lib = ['GL', 'GLEW', 'IL']
	if not conf.CheckLib('GLEW'):
		print "You need GLEW to compile this program"
		Exit(1)
	if gcc and conf.CheckLib('boost_filesystem-gcc-mt'):
		lib += ['boost_filesystem-gcc-mt']
	elif conf.CheckLib('boost_filesystem-mt'):
		lib += ['boost_filesystem-mt']
	elif gcc and conf.CheckLib('boost_filesystem-gcc'):
		lib += ['boost_filesystem-gcc']
	elif conf.CheckLib('boost_filesystem'):
		lib += ['boost_filesystem']
	else:
		print "You need the Boost filesystem library for this program"
		Exit(1)
	if gcc and conf.CheckLib('boost_thread-gcc-mt'):
		lib += ['boost_thread-gcc-mt']
	elif conf.CheckLib('boost_thread-mt'):
		lib += ['boost_thread-mt']
	elif gcc and conf.CheckLib('boost_thread-gcc'):
		lib += ['boost_thread-gcc']
	elif conf.CheckLib('boost_thread'):
		lib += ['boost_thread']
	else:
		print "You need the Boost thread library for this program"
		Exit(1)
	if gcc and conf.CheckLib('boost_regex-gcc-mt'):
		lib += ['boost_regex-gcc-mt']
	elif conf.CheckLib('boost_regex-mt'):
		lib += ['boost_regex-mt']
	elif gcc and conf.CheckLib('boost_regex-gcc'):
		lib += ['boost_regex-gcc']
	elif conf.CheckLib('boost_regex'):
		lib += ['boost_regex']
	else:
		print "You need the Boost regex library for this program"
		Exit(1)
	if not conf.CheckLib('IL'):
		print "You need the DevIL image library for this program"
		Exit(1)
	if env['use_tcmalloc']:
		if conf.CheckLib('tcmalloc'):
			lib += ['tcmalloc']
		else:
			print "tcmalloc from goog-perftools requested but not available"
			print "falling back to standard malloc"
			env['use_tcmalloc'] = False
	if not env['disable_aio']:
		if conf.CheckLib('aio') and env.has_key('libaiostep1'):
			lib += ['aio']
		else:
			print "Libaio is necessary for asynchronous I/O, disabling BackgroundReader"
	return lib


def configure(env):
	print "\nChecking configure scripts"

	conf = Configure(env)

	check_debian_powerpc(env, conf)

	lib = []
	lib += check_freetype2(env, conf)
	lib += check_sdl(env, conf)
	lib += check_openal(env, conf)

	check_headers(env, conf)
	lib += check_libraries(env, conf)

	print "\nEverything seems OK, let's build"

	env.AppendUnique(LIBS = lib)
	env = conf.Finish()

	return None


#####################
### main function ###
#####################

def generate(env):
	def makeHashTable(args):
		table = { }
		for arg in args:
			if len(arg) > 1:
				lst = arg.split('=')
				if len(lst) < 2: continue
				key = lst[0]
				value = lst[1]
				if len(key) > 0 and len(value) > 0: table[key] = value
		return table

	args = makeHashTable(sys.argv)

	cachefile = 'SCustomize'
	opts = Options(cachefile)

	#permanent options
	opts.Add('platform', 'Set to linux, freebsd or windows')
	opts.Add('debug', 'Set to yes to produce a binary with debug information', False)

	#porting options - optionnal in a first phase
	opts.Add('disable_avi', 'Set to no to turn on avi support', True)
	opts.Add('disable_clipboard', 'Set to no to turn on clipboard code', True)

	#other ported parts
	opts.Add('disable_hpi', 'Set to no to turn on hpi support : a new lib has to be created to provide calls', False)
	opts.Add('disable_lua', 'Set to no to turn on Lua support', True)
	opts.Add('disable_aio', 'Set to no to turn on libaio support', True)

	opts.Add('use_tcmalloc', 'Use tcmalloc from goog-perftools for memory allocation', False)
	opts.Add('optimize', 'Enable processor optimizations during compilation', False)
	opts.Add('disable_optimize', 'Disable all gcc optimization', False)
	opts.Add('archflags', 'Processor specific optimization flags')

	opts.Add('prefix', 'Install prefix', '/usr/local')
	opts.Add('datadir', 'Data directory', '$prefix/games/taspring')
	opts.Add('builddir', 'Build directory (where the object files live)')
	opts.Add('cachedir', 'Cache directory (see scons manual)')

	keys = ['platform', 'debug', 'disable_avi', 'disable_hpi', 'disable_lua', 'disable_aio', 'use_tcmalloc', 'optimize', 'disable_optimize', 'archflags', 'prefix', 'datadir', 'builddir', 'cachedir']

	opts.Update(env)

	env.Help(opts.GenerateHelpText(env))

	# Use this to avoid an error message 'how to make target configure ?'
	env.Alias('configure', None)

	is_configuring = False
	if 'configure' in sys.argv:
		is_configuring = True

	_configure = False
	for key in keys:
		if not env.has_key(key): _configure = True

	if is_configuring or _configure or not (env.has_key('platform') or env.GetOption("clean")):
		# be paranoid, unset existing variables
		for key in keys:
			if env.has_key(key): env.__delitem__(key)

		if args.has_key('platform'): env['platform'] = args['platform']
		else: env['platform'] = detect_platform()

		env['archflags'] = None
		if args.has_key('debug') and int(args['debug']):
			print "debugging enabled"
			env['debug'] = True
			env['optimize'] = False
			env['disable_optimize'] = False
		else:
			print "debugging NOT enabled,",
			env['debug'] = False
			if args.has_key('disable_optimize') and args['disable_optimize']:
				print "optimizing DISABLED"
				env['disable_optimize'] = True
				env['optimize'] = False
			else:
				env['disable_optimize'] = False
				if args.has_key('optimize') and int(args['optimize']):
					print "optimizing enabled"
					env['optimize'] = True
					if args.has_key('archflags'): env['archflags'] = args['archflags']
					else:
						"""detect processor: on windows, we just assume >= i686,
						on anything else we use detect_processor()"""
						if env['platform'] == 'windows': env['archflags'] = ['-march=i686']
						else: env['archflags'] = detect_processor()
				else:
					print "optimizing NOT enabled"
					env['optimize'] = False

		if args.has_key('disable_avi'): env['disable_avi'] = int(args['disable_avi'])
		else: env['disable_avi'] = True

		if args.has_key('disable_clipboard'): env['disable_clipboard'] = int(args['disable_clipboard'])
		else: env['disable_clipboard'] = True

		if args.has_key('disable_hpi'): env['disable_hpi'] = int(args['disable_hpi'])
		else: env['disable_hpi'] = False

		if args.has_key('disable_lua'): env['disable_lua'] = int(args['disable_lua'])
		else: env['disable_lua'] = True

		if args.has_key('disable_aio'): env['disable_aio'] = int(args['disable_aio'])
		else: env['disable_aio'] = True

		if args.has_key('use_tcmalloc'): env['use_tcmalloc'] = int(args['use_tcmalloc'])
		else: env['use_tcmalloc'] = False

		if args.has_key('prefix'): env['prefix'] = args['prefix']
		else: env['prefix'] = '/usr/local'

		if args.has_key('datadir'): env['datadir'] = args['datadir']
		else: env['datadir'] = env['prefix'] + '/games/taspring'

		if args.has_key('builddir'): env['builddir'] = args['builddir']
		else: env['builddir'] = None

		if args.has_key('cachedir'): env['cachedir'] = args['cachedir']
		else: env['cachedir'] = None

		opts.Save(cachefile, env)

	global include_path
	global lib_path
	if env['platform'] == 'windows':
		sfiles = windows_files + common_files
		include_path = windows_include_path + common_include_path
		lib_path = windows_lib_path + common_lib_path
	elif env['platform'] == 'linux'  :
		sfiles = linux_files + common_files
		include_path = linux_include_path + common_include_path
		lib_path = linux_lib_path + common_lib_path
	elif env['platform'] == 'freebsd':
		sfiles = freebsd_files + common_files
		include_path = freebsd_include_path + common_include_path
		lib_path = freebsd_lib_path + common_lib_path
	else:
		print "Unknown platform ", platform
		Exit(1)


	if not is_configuring and not env.GetOption("clean"):

		env.Append(CPPPATH=include_path,LIBPATH=lib_path)
		configure(env)

		defines = ['DIRECT_CONTROL_ALLOWED', '_SZ_ONE_DIRECTORY']
		defines += ['SPRING_DATADIR="\\"'+env['datadir']+'\\""']

		if env['disable_hpi']      : defines += ['NO_HPI']
		if env['disable_clipboard']: defines += ['NO_CLIPBOARD']
		if env['disable_avi']      : defines += ['NO_AVI']
		if env['disable_lua']      : defines += ['NO_LUA']
		if not env['disable_aio']  : defines += ['HAS_LIBAIO']

		flags = []
		if env['debug']: #to use debug, use scons debug=1 once
			flags += ['-ggdb3']
			defines += ['-D_DEBUG', '-DDEBUG']
		else:
			if env['optimize']:
				if env.has_key('archflags') and env['archflags']:
					flags += env['archflags']
				flags += ['-O2','-pipe','-fomit-frame-pointer','-s']
			elif not env['disable_optimize']:
				flags += ['-O']

		if env['platform'] == 'linux' or env['platform'] == 'freebsd':
			flags += ['-pthread']

		env.Append(CPPFLAGS = flags)
		env.Append(CPPDEFINES = defines)

	if not env['disable_lua']: sfiles += System_lua_files
	if not env['disable_aio']: sfiles += System_libaio_files
	if not env['disable_hpi']: sfiles += hpiutil2_files
	if not env['disable_avi']: sfiles += System_avi_files

	#BuildDir support code
	global files
	if env['builddir']:
		if not os.path.exists(env['builddir']):
			os.makedirs(env['builddir'])
		#  Avoid spreading .sconsign files everywhere - keep this line
		env.SConsignFile(env['builddir']+'/scons_signatures')
		files=[]
		for f in sfiles:
			files.append(os.path.join(env['builddir'], f))
		for d in directories:
			BuildDir(os.path.join(env['builddir'],d),d,duplicate=False)
	else:
		files = sfiles

	#CacheDir support code
	if env['cachedir']:
		if not os.path.exists(env['cachedir']):
			os.makedirs(env['cachedir'])
		#  Avoid spreading .sconsign files everywhere - keep this line
		env.SConsignFile(env['cachedir']+'/scons_signatures')
		CacheDir(env['cachedir'])


###########################
### toplevel SConstruct ###
###########################

env = Environment(ENV = os.environ)

generate(env)

spring = env.Program('../game/spring', files)
if env['optimize'] and not env.GetOption("clean"):
	env.AddPostAction('../game/spring',Action([['strip','$TARGET']]))
env.InstallAs(env['prefix']+"/bin/spring",spring)
env.Alias('install',env['prefix'])
env.Export('env')
Default(spring)
