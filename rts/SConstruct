#############################################
#architecture specific files / include pathes
import sys
import os
windows_include_path=[]
linux_include_path=['/usr/include','/usr/include/GL']
freebsd_include_path=['/usr/local/include', '/usr/X11R6/include', '/usr/X11R6/include/GL']
common_include_path = ['.','gui','include']
common_lib_path=[]
freebsd_lib_path=['/usr/local/lib','/usr/X11R6/lib']
common_files=[]
windows_files=[]
linux_files=[]
if sys.platform == 'linux2' or sys.platform == 'linux-i386':
	print "Detected platform : linux"
	detected_platform='linux'
elif sys.platform[:7] == 'freebsd':
	print "Detected platform : freebsd (%s)" % sys.platform
	print "WARNING: support is incomplete"
	detected_platform='freebsd'
else:
	print "Platform not supported yet, please edit SConstruct file"
	detected_platform='unknown'
defines = ['DIRECT_CONTROL_ALLOWED']
exclude_list = []

##################################
# build options

opts = Options('SCustomize')

#permanent options
opts.Add('platform', 'Set to linux, freebsd or windows', detected_platform)
opts.Add('debug', 'Set to yes to produce a binary with debug information', 1)

#porting options - optionnal in a first phase
opts.Add('disable_avi', 'Set to no to turn on avi support', 1)
opts.Add('disable_clipboard', 'Set to no to turn on clipboard code', 1)

#other ported parts
opts.Add('disable_hpi', 'Set to no to turn on hpi support : a new lib has to be created to provide calls', 0)

opts.Add('use_tcmalloc', 'Use tcmalloc from goog-perftools for memory allocation',0)
opts.Add('optimize', 'Enable processor optimizations during compilation', 0)

opts.Add('prefix', 'Install prefix [/usr/local]')

env = Environment(ENV = os.environ, options = opts)
Help(opts.GenerateHelpText(env))
debug = env.get('debug')
platform = env.get('platform')
if debug:
	optimize = False
else:
	optimize = env.get('optimize')

if env.Dictionary('CC').find('gcc') != -1:
	gcc = True
else:
	gcc = False

if env.get('disable_hpi'):
	defines+=['NO_HPI']
if env.get('disable_clipboard'):
	defines+=['NO_CLIPBOARD']
if env.get('disable_avi'):
	exclude_list.append("AVIGenerator.cpp")
	defines+=['NO_AVI']

if platform == 'linux' or detected_platform == 'freebsd':
	exclude_list+=["DllLib.cpp","Win32Cmd.cpp","RegHandler.cpp"]
else:
	exclude_list+=["SoLib.cpp","PosixCmd.cpp","dotfileHandler.cpp"]

defines+=['_SZ_ONE_DIRECTORY']

prefix=ARGUMENTS.get('prefix',"/usr/local")

defines+=['DATADIR="\\"'+prefix+'/games/taspring'+'\\""']

env.Append(CPPDEFINES = defines)

############################################################
# files used for build
zipfiles=["./minizip/ioapi.c","./minizip/zip.c","./minizip/unzip.c"]
winzipfiles=["./minizip/iowin32.c"]
lzmafiles=['7zip/7zAlloc.c','7zip/7zBuffer.c','7zip/7zCrc.c','7zip/7zDecode.c','7zip/7zExtract.c','7zip/7zHeader.c','7zip/7zIn.c','7zip/7zItem.c','7zip/7zMethodID.c','7zip/LzmaDecode.c']

import re
tmp=os.listdir('.')
guif=os.listdir('gui')
for f in guif:
	tmp.append("./gui/"+f)
hpiutilf=os.listdir('hpiutil2')
for f in hpiutilf:
	tmp.append("./hpiutil2/"+f)
	
#linux disable unused code
if platform == 'linux' or platform == 'freebsd':	
	exclude_list += exclude_list + Split("""
			BackgroundReader.cpp
			ARB_vertex_program_extension.cpp
			mmgr.cpp
			wavread.cpp""")

nbObjects=0
nbBuiltObjects=0
for f in tmp:
	if os.path.isfile(f) and re.compile("cpp$").search(f) and not f in exclude_list:
		common_files.append(f)
		nbObjects+=1
	if re.compile("\.o$").search(f):
		nbBuiltObjects+=1
if platform == 'windows':
	files = windows_files + common_files + zipfiles + winzipfiles + lzmafiles
	common_include_path = common_include_path + windows_include_path
else:
	if platform == 'linux':
		files = linux_files + common_files + zipfiles + lzmafiles
		common_include_path = common_include_path + linux_include_path	
	elif platform == 'freebsd':
		files = linux_files + common_files + zipfiles + lzmafiles
		common_include_path = common_include_path + freebsd_include_path
		common_lib_path = common_lib_path + freebsd_lib_path
	else:
		print "Unknown platform ", platform
		Exit(1)	
print nbObjects, " objects have to be produced"
print nbBuiltObjects, " objects are already produced from a previous build (", nbBuiltObjects*1./(nbObjects*1.)*100.,"%)\n"

#################################################
# other FLAGS
if not env.GetOption("clean"):
	if optimize:
		print "Detecting processor..."
		f = open('/proc/cpuinfo', 'r')
		str = f.readline()
		family=-1
		model=-1
		vendor=""
		while str:
			if str.startswith("vendor_id"):
				if str.find("GenuineTMx86") != -1:
					# Transmeta
					vendor="GenuineTMx86"
				elif str.find("GenuineIntel") != -1:
					# Intel
					vendor="GenuineIntel"
				elif str.find("AuthenticAMD"):
					# AMD
					vendor="AuthenticAMD"
			elif str.startswith("cpu "):
				family = re.sub('^[^0-9A-Za-z]*', '', str).strip()
			elif str.startswith("model") and str.find("name") == -1:
				model = re.sub('^[^0-9]*', '', str).strip()
			if vendor == "GenuineTMx86":
				if str.startswith("model name"):
					if str.find("Transmeta Efficeon") != -1:
						# Automatically reorders/realigns when
						# converting to VLIW, so no alignment
						# saves space without sacrificing speed
						print "  found Transmeta Efficeon"
						archflags=['-march=i686', '-mtune=pentium3', '-msse2', '-mfpmath=sse', '-falign-functions=0', '-falign-jumps=0', '-falign-loops=0']
			elif vendor == "GenuineIntel":
				if str.startswith("model name"):
					if str.find("Intel(R) Pentium(R) 4 CPU") != -1:
						print "  found Intel Pentium 4"
						archflags=['-march=pentium4']
					elif str.find("Coppermine") != -1:
						print "  found Intel Celeron (Coppermine)"
						archflags=['-march=pentium3']
					elif str.find("Pentium III") != -1:
						print "  found Intel Pentium III"
						archflags=['-march=pentium3']
					elif str.find("Pentium II") != -1:
						print "  found Intel Pentium II"
						archflags=['-march=pentium2']
					elif str.find("Intel(R) Celeron(R) CPU") != -1:
						print "  found Intel Celeron (Willamette)"
						archflags=['-march=pentium4']
					elif str.find("Celeron") != -1:
						print "  found Intel Celeron 1"
						archflags=['-march=pentium2']
					elif str.find("Intel(R) Pentium(R) M") != -1:
						print "  found Intel Pentium-M"
						archflags=['-march=pentium-m']
					elif str.find("Intel(R) Xeon(R) CPU") != -1:
						print "  found Intel Xeon w/EM64T"
						archflags=['-march=nocona', '-mmmx', '-msse3']
			elif vendor == "AuthenticAMD":
				if str.startswith("model name"):
					if str.find("Duron") != -1:
						if model == 7:
							print "  found AMD Duron Morgan"
							archflags=['-march=athlon-xp']
						elif model == 3:
							print "  found AMD Mobile Duron"
							archflags=['-march=athlon-tbird']
						else:
							print "  found AMD Duron"
							archflags=['-march=athlon-tbird']
					elif str.find("Athlon") != -1:
						if str.find("64") != -1:
							print "  found AMD Athlon 64"
							archflags=['-march=athlon64']
						elif family == 6 and model == 8:
							print "  found AMD Athlon Thunderbird XP"
							archflags=['-march=athlon-xp']
						else:
							print "  found AMD Athlon"
							archflags=['-march=athlon']
					elif str.find("Opteron") != -1:
						print "  found AMD Opteron"
						archflags=['-march=opteron']
			else:
				if str.find("Nehemiah") != -1:
					print "  found VIA Nehemiah"
					archflags=['-march=c3-2']
				elif str.find("Eden") != -1:
					print "  found VIA Eden C3"
					archflags=['-march=c3']
				elif str.find("Ezra") != -1:
					print "  found VIA Ezra"
					archflags=['-march=c3']
					
					
			str = f.readline()
		if not archflags:
			if vendor == "":
				if family.find("970"):
					print "  found PowerPC 970 (G5)"
					archflags=['-mtune=G5', '-maltivec', '-mabi=altivec']
				elif family.find("7450"):
					print "  found PowerPC 7450 (G4 v2)"
					archflags=['-mtune=7450', '-maltivec', '-mabi=altivec']
				elif family.find("7400"):
					print "  found PowerPC 7400 (G4)"
					archflags=['-mtune=7400', '-maltivec', '-mabi=altivec']
				elif family.find("750"):
					print "  found PowerPC 750 (G3)"
					archflags=['-mtune=750']
				elif family.find("604e"):
					archflags=['-mtune=604e']
			else:
				# unidentified x86
				archflags=['-march=i686']
			
		f.close()
	flags = []
	if debug: #to use debug, please use SCustomize file
		flags += ['-ggdb3','-D_DEBUG','-DDEBUG']
	else:
		if optimize:
			if archflags:
				flags += archflags
			flags += ['-O2','-pipe','-fomit-frame-pointer','-s']
		else:
			flags += ['-O']

	if platform == 'linux' or platform == 'freebsd':
		flags += ['-pthread']

	env.Append(CPPFLAGS = flags)
	#################################################
	# Check requirements

	lib=['GL','GLEW','IL']
	libaiostep1=False

	conf = Configure(env)
	conf.env.Append(CPPPATH=common_include_path,LIBPATH=common_lib_path)
	print "\nChecking configure scripts"
	freetype = False
	openal = False

	print "Checking for Freetype2... "
	print "  Checking for pkg-config... ",
	pkgcfg = env.WhereIs("pkg-config")
	cmd = ""
	fcmd = ""
	if pkgcfg:
		print pkgcfg
		print "  Checking for Freetype2 package... ",
		ret = conf.TryAction(pkgcfg+" --exists freetype2")
		if ret[0]:
			print "found"
			cmd = pkgcfg+" --modversion freetype2"
			fcmd = pkgcfg+" --libs --cflags freetype2"
			freetype = True
		else:
			print "not found"
	if not freetype:
		print "  Checking for freetype-config... ",
		freetypecfg = env.WhereIs("freetype-config")
		if freetypecfg:
			print freetypecfg
			ftv = conf.TryAction(freetypecfg+" --ftversion")
			if ftv[0]:
				cmd = freetypecfg+" --ftversion"
				fcmd = freetypecfg+" --cflags --libs"
				freetype = True
			else:
				print "  "+freetypecfg+" does not give library version"
		else:
			print "not found"
	if cmd:
		print "Checking for Freetype >= 2.0.0... ",
		ftobj = os.popen(cmd)
		ftver = ftobj.read()
		fterr = ftobj.close()
		print ftver,
		if ftver.split('.') >= ['2','0','0']:
			env.ParseConfig(fcmd)
		else:
			print "You need Freetype version 2.0.0 or greater for this program"
			Exit(1)
	elif not conf.CheckLib("freetype"):
		print "Freetype2 is required for this program"
		Exit(1)
	else:
		conf.env.Append(CPPPATH=['/usr/include/freetype2'])
		if not conf.CheckCHeader('ft2build.h'):
			print "Freetype2 headers are required for this program"
			Exit(1)
		else:
			lib+=['freetype']

	print "Checking for sdl-config... ",
	sdlcfg = env.WhereIs("sdl-config")
	if sdlcfg:
		print sdlcfg
		print "Checking for LibSDL >= 1.2.0... ",
		sdlobj = os.popen(sdlcfg+" --version")
		sdlver = sdlobj.read()
		sdlerr = sdlobj.close()
		print sdlver,
		if sdlver.split('.') >= ['1','2','0']:
			env.ParseConfig(sdlcfg+" --cflags --libs")
		else:
			print "You need LibSDL version 1.2.0 or greater for this program"
			Exit(1)
	else:
		print "no"
		print 'LibSDL is required for this program'
		Exit(1)


	print "Checking for openal-config... ",
	openalcfg = env.WhereIs("openal-config")
	if openalcfg:
		print openalcfg
		env.ParseConfig(openalcfg+" --cflags --libs")
	else:
		print "no"
		if not conf.CheckLib('openal'):
			print 'OpenAL is required for this program'
			Exit(1)
		elif not conf.CheckCHeader('AL/al.h'):
			print 'OpenAL headers are required for this program'
			Exit(1)
		else:
			lib+=['openal']

	#print "Checking for glib-config... ",
	#glibcfg = env.WhereIs("glib-config")
	#if glibcfg:
	#	print glibcfg
	#	env.ParseConfig("glib-config --cflags --libs")
	#else:
	#	print "no"
	#	print 'GLib is required for this program'
	#	Exit(1)


	print "\nChecking header files"
	if not conf.CheckCHeader('GL/glew.h'):
		print ' Cannot find GLEW http://glew.sourceforge.net'
		Exit(1)
	if not conf.CheckCXXHeader('boost/cstdint.hpp'):
		print ' Boost library must be installed'
		Exit(1)
	if not conf.CheckCXXHeader('boost/thread.hpp'):
		print ' Cannot find Boost threading headers'
		Exit(1)
	if not conf.CheckCXXHeader('boost/filesystem/path.hpp'):
		print ' Cannot find Boost filesystem headers'
		Exit(1)
	if not conf.CheckCXXHeader('boost/regex.hpp'):
		print ' Cannot find Boost regex header'
		Exit(1)
	if not conf.CheckCXXHeader('boost/spirit.hpp'):
		print ' Cannot find Boost Spirit header'
		Exit(1)
	if not conf.CheckCHeader('IL/il.h'):
		print ' Cannot find DevIL image library header'
		Exit(1)
	if conf.CheckCHeader('libaio.h'):
		defines+=['HAS_LIBAIO']
		libaiostep1=True
	else:
		print ' Cannot find libaio headers, disabling asynchronous I/O'

	print "\nChecking libraries"
	if not conf.CheckLib('GLEW'):
		print "You need GLEW to compile this program"
		Exit(1)
	if gcc and conf.CheckLib('boost_filesystem-gcc-mt'):
		lib+=['boost_filesystem-gcc-mt']
	elif conf.CheckLib('boost_filesystem-mt'):
		lib+=['boost_filesystem-mt']
	elif gcc and conf.CheckLib('boost_filesystem-gcc'):
		lib+=['boost_filesystem-gcc']
	elif conf.CheckLib('boost_filesystem'):
		lib+=['boost_filesystem']
	else:
		print "You need the Boost filesystem library for this program"
		Exit(1)
	if gcc and conf.CheckLib('boost_thread-gcc-mt'):
		lib+=['boost_thread-gcc-mt']
	elif conf.CheckLib('boost_thread-mt'):
		lib+=['boost_thread-mt']
	elif gcc and conf.CheckLib('boost_thread-gcc'):
		lib+=['boost_thread-gcc']
	elif conf.CheckLib('boost_thread'):
		lib+=['boost_thread']
	else:
		print "You need the Boost thread library for this program"
		Exit(1)
	if gcc and conf.CheckLib('boost_regex-gcc-mt'):
		lib+=['boost_regex-gcc-mt']
	elif conf.CheckLib('boost_regex-mt'):
		lib+=['boost_regex-mt']
	elif gcc and conf.CheckLib('boost_regex-gcc'):
		lib+=['boost_regex-gcc']
	elif conf.CheckLib('boost_regex'):
		lib+=['boost_regex']
	else:
		print "You need the Boost regex library for this program"
		Exit(1)
	if not conf.CheckLib('IL'):
		print "You need the DevIL image library for this program"
		Exit(1)
	if env.get('use_tcmalloc'):
		if conf.CheckLib('tcmalloc'):
			lib+=['tcmalloc']
		else:
			print "tcmalloc from goog-perftools requested but not available"
			print "falling back to standard malloc"
	if conf.CheckLib('aio'):
		lib+=['aio']
		if libaiostep1:
			files+=['BackgroundReader.cpp']
	else:
		print "Libaio is necessary for asynchronous I/O, disabling BackgroundReader"
	env = conf.Finish()

	###################################################
	# let's build

	print "\nEverything seems OK, let's build"
	env.Append(LIBS = lib)

	#print "\nCCFLAGS : ", env['CCFLAGS'],"\n"
spring = env.Program('spring', files)
if optimize and not env.GetOption("clean"):
	env.AddPostAction('spring',Action([['strip','$TARGET']]))
env.InstallAs(prefix+"/bin/spring",spring)
env.Alias('install',prefix)
env.Export('env')
